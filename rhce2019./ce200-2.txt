

RHCE7红帽认证 模拟测试

    >上午 09:00-09:50 自习
    >上午 10:00-12:00 EX200--RHCSA模拟测试
    >下午 13:30-14:20 自习
    >下午 14:30-17:30 EX300--RHCE模拟测试

        开始EX200测试
        开始EX300测试
/**************************** 非必须  操作 *****************
[root@room9pc01 ~]# rm -rf /content/
[root@room9pc01 ~]# cp -rpf /var/lib/libvirt/images/content/  /

[root@room9pc27 ~]# ls  /content/
content  courses  lost+found  rhel7.0
[root@room9pc27 ~]# ls /var/lib/libvirt/images/content/
content  courses  lost+found  rhel7.0

[root@room9pc27 ~]# showmount   -e
Export list for room9pc27.tedu.cn:
/content 172.25.254.0/24
[root@room9pc27 ~]# cat  /etc/exports
/content/  172.25.254.0/24(ro)

[root@room9pc27 ~]# systemctl  is-active  nfs-server.service 
active

[root@room9pc27 ~]# ifconfig  |egrep  -A1 "rhce:(| 0:)"
rhce: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.25.254.250  netmask 255.255.255.0  broadcast 172.25.254.255
--
rhce:0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.25.0.250  netmask 255.255.0.0  broadcast 172.25.255.255

[root@room9pc27 ~]# rht-vmctl   reset  classroom  &&  sleep 5
classroom [OK]
域 classroom 已开始

[root@room9pc27 ~]# rht-vmctl   reset  server  &&  sleep 5
server [OK]
域 server 已开始

[root@room9pc27 ~]# rht-vmctl   reset  desktop 
......
***************************************/

-------------------   00a、重设 root 密码  ----------------------------
--------------------  00a、重设 root 密码  ------------------------------

1)重启虚拟机 server,出现 GRUB 启动菜单时按 e 键进入编辑状态
2)找到 linux16 所在行, LANG=en_US.UTF-8 末尾
                                 添加 rd.break console=tty0
   按 Ctrl+x 键 进入 恢复模式
3)以可写方式挂载硬盘中的根目录,并重设 root 密码:

-----------------  //以可读写方式重新挂载根系统  ----------------------
switch_root:/# mount  -o   remount,rw  /sysroot

---------------- //切换到临时根系统  /sysroot/------------ 
switch_root:/# chroot   /sysroot/

 ---------交互式  将系统的 root 账号密码设置为 redhat  //设置考试指定的密码------------
sh-4.2# passwd  root
   输入密码 redhat   回车确认

/***************
   --------- 非 交互式  将系统的 root 账号密码设置为 redhat ------------
输入命令 echo redhat  |passwd  --stdin  root  回车确认
注意若出现乱码,直接 Ctrl + c  结束当前命令,等到显示
sh-4.2# 再接着 设置密码
输入命令 echo redhat  |passwd  --stdin  root  回车确认
***************/

--------------------  //标记下一次启动重做 SELinux 标签  ----------------
sh-4.2# touch  /.autorelabel
sh-4.2# exit
switch_root:/#reboot


--------------------  00b、配置主机名、IP 地址/掩码/默认网关/DNS 地址 -------------
--------------------  00b、配置主机名、IP 地址/掩码/默认网关/DNS 地址 -------------

考试说明

为了能够继续考试，您必须首先完成下述任务。

将系统的 root 账号密码设置为 redhat 。
配置您的虚拟机系统使用下述静态网络配置：
 * Hostname：server0.example.com
 * IP address：172.25.0.11
 * Netmask：255.255.255.0
 * Gateway：172.25.0.254
 * Name server：172.25.254.254

您必须完成对网络的修改，这样才能访问其余的考题，一旦您完成了上述修改，
点击下面的URL地址：http://rhgls.domain254.example.com/exam/ex200/index2.html

如果您已经成功完成了初始的题目，您将被重定向到考试的其余部分。

防火墙默认是打开的，在您认为是适当的时候可以关闭。
在评分之前您的系统会被重新启动，
所以请您确保您所做的所有修改和服务配置在重新启动之后仍然能够生效，
而无需人工干预。
所有考试用的虚拟机实例必须能重启之后进入正确的用户级别，而无需人工协助。
如果考试用的虚拟机不能启动或不能正常启动，将被评零分。

您在考试中使用的Red Hat Enterprise Linux操作系统版本对应的分发包可以
通过YUM在下面的链接中找到：http://content.example.com/rhel7.0/x86_64/dvd
注意一些考试题目可能依赖于其他考试题目。
比如说，在考试题目中可能要求您针对一个用户执行一系列的限制，但是这个用户的创建可能是在其他题目中要求的。
为了方便您的标识，
每个考试题目都有一些选取按钮以协助您去标识哪个题目您已经完成了，哪些还没有。
当然，如果您觉得用不着，您也可以不去理会这些按钮。


[root@room9pc27 ~]# virsh  console  server
连接到域 server
换码符为 ^]


Red Hat Enterprise Linux Server 7.0 (Maipo)
Kernel 3.10.0-123.el7.x86_64 on an x86_64

server0 login: root
Password: redhat
Last login: Fri Jan 12 18:54:14 from 172.25.0.250

[root@server0 ~]# echo  redhat  |passwd  --stdin  root  #设置考试指定的密码

         -------------------  配置主机名  -------------------------

[root@server0 ~]# hostnamectl   set-hostname   server0.example.com
[root@server0 ~]# hostname
server0.example.com

[root@server0 ~]# cat  /etc/hostname 
server0.example.com

[root@server0 ~]# nmcli  device   status
DEVICE  TYPE      STATE         CONNECTION  
eth0    ethernet  connected     System eth0 
.........................

nmcli
Network Manager Command Line Interface

-------------------------  配置 IP 地址/掩码 /默认网关 /DNS 地址  -----------------

[root@server0 ~]# nmcli   connection  modify  "System eth0"  \
> ipv4.method manual          \
> ipv4.addresses  "172.25.0.11/24   172.25.0.254"  \
> ipv4.dns  172.25.254.254    \
> connection.autoconnect  yes

     ---------------------------  激活 配置  ---------------------------------------

[root@server0 ~]# nmcli  connection   up  "System eth0" 


[root@server0 ~]# nmcli  connection  show
NAME         UUID                                  TYPE            DEVICE 
System eth0  5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  802-3-ethernet  eth0  

[root@server0 ~]# cat  /etc/resolv.conf 
# Generated by NetworkManager
search example.com
nameserver 172.25.254.254

[root@server0 ~]# ip  route  show
default via 172.25.0.254 dev eth0  proto static  metric 1024 
172.25.0.0/24 dev eth0  proto kernel  scope link  src 172.25.0.11 

[root@server0 ~]# cat   /etc/sysconfig/network-scripts/ifcfg-eth0 

DEVICE=eth0
BOOTPROTO=none
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
IPV6INIT=no
PERSISTENT_DHCLIENT=1
IPADDR0=172.25.0.11
PREFIX0=24
GATEWAY0=172.25.0.254
DNS1=172.25.254.254
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
NAME="System eth0"
UUID=5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03

[root@server0 ~]# nmcli  connection  show   "System eth0"
connection.id:                          System eth0
........................

[root@server0 ~]# reboot


[root@room9pc27 ~]# ssh  -o  StrictHostKeyChecking=no  -X  root@172.25.0.11
...............

[root@server0 ~]# hostname
server0.example.com

[root@server0 ~]# cat  /etc/resolv.conf 
# Generated by NetworkManager
search example.com
nameserver 172.25.254.254

[root@server0 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         172.25.0.254    0.0.0.0         UG    1024   0        0 eth0
172.25.0.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@server0 ~]# ifconfig  |awk  '/inet /{print  $2}'
172.25.0.11
127.0.0.1


==========================================
--------------------------------  desktop0.example.com -----------------

[root@room9pc27 ~]# virsh  console  desktop
连接到域 desktop
换码符为 ^]


Red Hat Enterprise Linux Server 7.0 (Maipo)
Kernel 3.10.0-123.el7.x86_64 on an x86_64

desktop0 login: root
Password: redhat
Last login: Fri Jan 12 18:54:00 from 172.25.0.250

[root@desktop0 ~]# echo  redhat  |passwd  --stdin  root

[root@desktop0 ~]# hostnamectl  set-hostname   desktop0.example.com

/***************
添加DNS
# nmcli connection modify eth0 ipv4.dns 114.114.114.114

删除DNS
# nmcli connection modify eth0 -ipv4.dns 114.114.114.114

添加一个网关（GATEWAY）
 # nmcli connection modify eth0 ipv4.gateway 192.168.0.2

可一块写入：
nmcli connection modify eth0 ipv4.dns 114.114.114.114 ipv4.gateway 192.168.0.2
*****************/
[root@desktop0 ~]# nmcli  device  status
DEVICE  TYPE      STATE         CONNECTION  
eth0    ethernet  connected     System eth0 

----------------- 添加一个网卡连接 -----------------
/*********~]# nmcli   connection  add   type  ethernet  \
> con-name  "System eth0"  ifname  eth0
********/
[root@desktop0 ~]# nmcli  connection show
NAME         UUID                                  TYPE            DEVICE 
System eth0  6f55a10a-37f9-45f2-9b42-88a62937cce4  802-3-ethernet  eth0  

-------------------------  配置 IP 地址/掩码 /默认网关 /DNS 地址  -----------------

[root@desktop0 ~]# nmcli   connection  modify  "System eth0"  \
> ipv4.method manual          \
> ipv4.addresses  "172.25.0.10/24   172.25.0.254"  \
> ipv4.dns  172.25.254.254    \
> connection.autoconnect  yes

[root@desktop0 ~]# nmcli  connection  up  "System eth0"  #启用网络接口的连接

---------- 网络管理命令行工具NetworkManager command line tool 简称nmcli ---------
---- #nmcli connection reload 刷新配置文件（增加，减少或修改配置文件） ----------------

[root@desktop0 ~]# nmcli   connection  reload  # 重新加载 配置文件
[root@desktop0 ~]# echo  $?
0
[root@desktop0 ~]# ping  -c2  -i0.2  -w1 172.25.0.254

[root@desktop0 ~]# ping  -c2  -i0.2  -w1 172.25.254.254

[root@desktop0 ~]# ping  -c2  -i0.2  -w1 172.25.0.11

[root@desktop0 ~]# reboot

[root@room9pc27 ~]# ssh  -X  172.25.0.10
..............
[root@desktop0 ~]# cat  /etc/hosts
..............
[root@desktop0 ~]# tail  -10  /etc/sysconfig/network-scripts/ifcfg-eth0 
.......................

===============================================
您必须完成对网络的修改，这样才能访问其余的考题，一旦您完成了上述修改，
点击下面的URL地址：http://rhgls.domain254.example.com/exam/ex200/index2.html


考试说明,请仔细阅读

为您的系统指定一个默认的软件仓库
调整逻辑卷的大小
创建用户帐户
配置文件/var/tmp/fstab的权限
配置一个 cron 任务
创建一个共享目录
安装内核的升级
绑定到外部验证服务
autofs的配置
配置NTP网络时间客户端
配置一个用户帐户
添加一个swap分区
查找文件
查找一个字符串
创建一个逻辑卷
创建一个归档
------------------------------ 1. 为您的系统指定一个默认的软件仓库 ----------------------
为您的系统指定一个默认的软件仓库

YUM的软件库源为 
http://content.example.com/rhel7.0/x86_64/dvd ，
将此配置为您的系统的默认软件仓库。 

[root@room9pc27 ~]# ssh  -o  StrictHostKeyChecking=no  -X  root@172.25.0.11


[root@server0 ~]# yum-config-manager  --add   http://content.example.com/rhel7.0/x86_64/dvd


[root@server0 ~]# ls  /etc/yum.repos.d/
content.example.com_rhel7.0_x86_64_dvd.repo  rhel_dvd.repo

[root@server0 ~]# vim   /etc/yum.repos.d/content.example.com_rhel7.0_x86_64_dvd.repo 
[root@server0 ~]# cat   /etc/yum.repos.d/content.example.com_rhel7.0_x86_64_dvd.repo

[content.example.com_rhel7.0_x86_64_dvd]
name=added from: http://content.example.com/rhel7.0/x86_64/dvd
baseurl=http://content.example.com/rhel7.0/x86_64/dvd
enabled=1
gpgcheck=0    #手动添加的//不检查软件签名

/************----------------------  提示 您尚未安装任何 GPG 公钥  没有签名
               ###    后面加上 --nogpgcheck 参数 即可
 ~]# yum  -y  install  docker-engine  --nogpgcheck
*********/

[root@server0 ~]# vim  /etc/yum.conf 

[root@server0 ~]# egrep  -n  "gpgcheck"   /etc/yum.conf
8:gpgcheck=0


[root@server0 ~]# mkdir  /etc/yum.repos.d/repo

[root@server0 ~]# mv  /etc/yum.repos.d/rhel_dvd.repo   /etc/yum.repos.d/repo/

[root@server0 ~]# yum  clean  all  > /dev/null && yum repolist 
..............
源标识                                 源名称                                               状态
content.example.com_rhel7.0_x86_64_dvd added from: http://content.example.com/rhel7.0/x86_6 4,305

/***************
yum  localinstall  安装本地 RPM
  makecache      生成原数据缓存
  provides       Find what package provides the given value
  reinstall      重新安装一个包
  search         查找包细节居给定的字符串
  --nogpgcheck   禁掉GPG验证检查
**********/

============ desktop0.example.com  ===========

[root@room9pc27 ~]# ssh  -X  172.25.0.10

[root@desktop0 ~]# ls  /etc/yum.repos.d/
rhel_dvd.repo
[root@desktop0 ~]# mkdir   /etc/yum.repos.d/repo

[root@desktop0 ~]# mv   /etc/yum.repos.d/rhel_dvd.repo    /etc/yum.repos.d/repo/

[root@desktop0 ~]# yum-config-manager   --add  http://content.example.com/rhel7.0/x86_64/dvd

[root@desktop0 ~]# ls  /etc/yum.repos.d/
content.example.com_rhel7.0_x86_64_dvd.repo  repo

[root@desktop0 ~]# vim   /etc/yum.repos.d/content.example.com_rhel7.0_x86_64_dvd.repo 
[root@desktop0 ~]# cat   /etc/yum.repos.d/content.example.com_rhel7.0_x86_64_dvd.repo

[content.example.com_rhel7.0_x86_64_dvd]
name=added from: http://content.example.com/rhel7.0/x86_64/dvd
baseurl=http://content.example.com/rhel7.0/x86_64/dvd
enabled=1
gpgcheck=0    #手动添加的//不检查软件签名

[root@desktop0 ~]# vim  /etc/yum.conf 
[root@desktop0 ~]# sed  -n 8p  /etc/yum.conf
gpgcheck=0

[root@desktop0 ~]# yum  clean  all  >/dev/null  &&  yum repolist 
......................
repolist: 4,305
====================================


------------------------------- 2 调整逻辑卷的大小

自行建立一个200MiB的逻辑卷 /dev/systemvg/vo，
格式化为ext3文件系统并挂载到 /vo 。
然后将逻辑卷vo和其文件系统大小调整到 300 MiB。
要确保文件系统中的内容保持完整。
请注意：分区大小很少能够完全符合要求的大小，所以大小在 270 MiB 和 330 MiB 之间都是可以接受的。 


[root@server0 ~]# lsblk 
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    253:0    0  10G  0 disk 
└─vda1 253:1    0  10G  0 part /
vdb    253:16   0  10G  0 disk 

[root@server0 ~]# fdisk   -l  /dev/vda   //确认现分区表模式

[root@server0 ~]# fdisk   /dev/vdb 
...............
命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): e
分区号 (1-4，默认 1)：4
起始 扇区 (2048-20971519，默认为 2048)：
将使用默认值 2048
Last 扇区, +扇区 or +size{K,M,G} (2048-20971519，默认为 20971519)：+3G
分区 4 已设置为 Extended 类型，大小设为 3 GiB

命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 1 extended, 3 free)
   l   logical (numbered from 5)
Select (default p): l
添加逻辑分区 5
起始 扇区 (4096-6293503，默认为 4096)：
将使用默认值 4096
Last 扇区, +扇区 or +size{K,M,G} (4096-6293503，默认为 6293503)：+210M   #考题/vo
分区 5 已设置为 Linux 类型，大小设为 210 MiB


命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 1 extended, 3 free)
   l   logical (numbered from 5)
Select (default p): l
添加逻辑分区 6
起始 扇区 (436224-6293503，默认为 436224)：
将使用默认值 436224
Last 扇区, +扇区 or +size{K,M,G} (436224-6293503，默认为 6293503)：+110M  #考题/vo
分区 6 已设置为 Linux 类型，大小设为 110 MiB

命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 1 extended, 3 free)
   l   logical (numbered from 5)
Select (default p): l
添加逻辑分区 7
起始 扇区 (663552-6293503，默认为 663552)：
将使用默认值 663552
Last 扇区, +扇区 or +size{K,M,G} (663552-6293503，默认为 6293503)：+320M  #考题/vo
分区 7 已设置为 Linux 类型，大小设为 320 MiB

命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 1 extended, 3 free)
   l   logical (numbered from 5)
Select (default p): l
添加逻辑分区 8
起始 扇区 (1320960-6293503，默认为 1320960)：
将使用默认值 1320960
Last 扇区, +扇区 or +size{K,M,G} (1320960-6293503，默认为 6293503)：+512M  #考题/swap
分区 8 已设置为 Linux 类型，大小设为 512 MiB

命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 1 extended, 3 free)
   l   logical (numbered from 5)
Select (default p): l
添加逻辑分区 9
起始 扇区 (2371584-6293503，默认为 2371584)：
将使用默认值 2371584
Last 扇区, +扇区 or +size{K,M,G} (2371584-6293503，默认为 6293503)：+1G  #考题/PE
分区 9 已设置为 Linux 类型，大小设为 1 GiB

命令(输入 m 获取帮助)：p
...............
命令(输入 m 获取帮助)：w
The partition table has been altered!

Calling ioctl() to re-read partition table.
正在同步磁盘。

[root@server0 ~]# partprobe  /dev/vdb   # 刷新分区表

[root@server0 ~]# lsblk 
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda    253:0    0   10G  0 disk 
└─vda1 253:1    0   10G  0 part /
vdb    253:16   0   10G  0 disk 
├─vdb4 253:20   0    1K  0 part 
├─vdb5 253:21   0  210M  0 part 
├─vdb6 253:22   0  110M  0 part 
├─vdb7 253:23   0  320M  0 part 
├─vdb8 253:24   0  512M  0 part 
└─vdb9 253:25   0    1G  0 part 

[root@server0 ~]# reboot     # 强烈建议重启一次

[root@room9pc27 ~]# ssh  172.25.0.11

[root@server0 ~]# lsblk 
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda    253:0    0   10G  0 disk 
└─vda1 253:1    0   10G  0 part /
vdb    253:16   0   10G  0 disk 
├─vdb4 253:20   0    1K  0 part 
├─vdb5 253:21   0  210M  0 part 
├─vdb6 253:22   0  110M  0 part 
├─vdb7 253:23   0  320M  0 part 
├─vdb8 253:24   0  512M  0 part 
└─vdb9 253:25   0    1G  0 part 

=============  使用卷组扩容的方式 扩展 逻辑卷 文件系统大小  ==============

[root@server0 ~]# lsblk  /dev/vdb{5,6}
NAME MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vdb5 253:21   0  210M  0 part 
vdb6 253:22   0  110M  0 part 

[root@server0 ~]# blkid  /dev/vdb{5,6}

[root@server0 ~]# pvcreate   /dev/vdb{5,6} #创建物理卷(可以不执行此命令)

  Physical volume "/dev/vdb5" successfully created
  Physical volume "/dev/vdb6" successfully created

--------------------------------------  #创建卷组 /dev/systemvg -------------------

[root@server0 ~]# vgcreate   systemvg   /dev/vdb5  #创建卷组 /dev/systemvg

  Volume group "systemvg" successfully created

[root@server0 ~]# vgs  /dev/systemvg
  VG       #PV #LV #SN Attr   VSize   VFree  
  systemvg   1   0   0 wz--n- 208.00m 208.00m

   ----------------------  #创建逻辑卷/dev/systemvg/vo --------------------

[root@server0 ~]# lvcreate   -L   200MiB  -n  vo   systemvg  #创建逻辑卷/dev/systemvg/vo
  Logical volume "vo" created

[root@server0 ~]# lvs
  LV   VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-a----- 200.00m  
                                           
[root@server0 ~]# vgs
  VG       #PV #LV #SN Attr   VSize   VFree
  systemvg   1   1   0 wz--n- 208.00m 8.00m

[root@server0 ~]# lsblk  /dev/vdb{5,6}
NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vdb5          253:21   0  210M  0 part 
└─systemvg-vo 252:0    0  200M  0 lvm  
vdb6          253:22   0  110M  0 part 

--------------------------------- 创建挂载 目录 --------------------------

[root@server0 ~]# mkdir   /vo
[root@server0 ~]# ls  /vo/

--------------------------------------  #格式化文件系统ext3  ------------

[root@server0 ~]# mkfs.ext3   /dev/systemvg/vo  #格式化文件系统ext3 

mke2fs 1.42.9 (28-Dec-2013)
........................                     
正在写入inode表: 完成                            
Creating journal (4096 blocks): 完成
Writing superblocks and filesystem accounting information: 完成 

[root@server0 ~]# blkid   /dev/systemvg/vo
/dev/systemvg/vo: UUID="2eb4d871-ba47-487a-86dd-4dbca04444c9" SEC_TYPE="ext2" TYPE="ext3" 

----------------------------  设置 开启自动挂载 ----------------------------------------

[root@server0 ~]# vim  /etc/fstab 
[root@server0 ~]# tail   -2  /etc/fstab

UUID=9bf6b9f7-92ad-441b-848e-0257cbb883d1 /    xfs    defaults    1   1
/dev/systemvg/vo   /vo  ext3  defaults   0   0

[root@server0 ~]# mount  -a

---------------  #注意文件系统类型 ext3  文件系统大小 200MiB (有误差 10M 正常)-------

[root@server0 ~]# df  -hT  /vo/    #注意文件系统类型 ext3  文件系统大小 190M
文件系统                      类型   容量   已用  可用 已用% 挂载点
/dev/mapper/systemvg-vo ext3  190M  1.6M  175M    1% /vo

[root@server0 ~]# lvs   /dev/systemvg/vo 
  LV   VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-ao---- 200.00m 
                                          
[root@server0 ~]# vgs   /dev/systemvg      #查看卷组已使用空间
  VG       #PV #LV #SN Attr   VSize   VFree
  systemvg   1   1   0 wz--n- 208.00m 8.00m

[root@server0 ~]# echo  first200MiB  > /vo/1.txt  #验证数据完整
[root@server0 ~]# cat  /vo/1.txt
first200MiB

[root@server0 ~]# blkid   /dev/systemvg/vo
/dev/systemvg/vo: UUID="2eb4d871-ba47-487a-86dd-4dbca04444c9" TYPE="ext3" 

[root@server0 ~]# lsblk  /dev/vdb{5,6}
NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vdb5          253:21   0  210M  0 part 
└─systemvg-vo 252:0    0  200M  0 lvm  /vo
vdb6          253:22   0  110M  0 part 


--------- #扩展卷组 ,注意是mount 在线扩容,仅仅支持ext3 文件系统格式 ,注意空闲分区物理卷 /dev/vdb6 ----

[root@server0 ~]# vgextend   systemvg   /dev/vdb6

  Volume group "systemvg" successfully extended

[root@server0 ~]# vgs  systemvg    #查看卷组剩余空间

  VG       #PV #LV #SN Attr   VSize   VFree  
  systemvg   2   1   0 wz--n- 316.00m 116.00m

[root@server0 ~]# lvs  /dev/systemvg/vo 

  LV   VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-ao---- 200.00m  
                                           
-----  # 扩展逻辑卷空间  310MiB ,注意设置的逻辑卷空间要略微大于>考题要求的300MiB (文件系统大小) ---
----  # 扩展逻辑卷空间  310MiB ,注意设置的逻辑卷空间要略微大于>考题要求的300MiB (文件系统大小) ---

[root@server0 ~]# lvextend   -L  310MiB  /dev/systemvg/vo 

  Rounding size to boundary between physical extents: 312.00 MiB
  Extending logical volume vo to 312.00 MiB
  Logical volume vo successfully resized

[root@server0 ~]# lvs  /dev/systemvg/vo 
  LV   VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-ao---- 312.00m  
                                           
[root@server0 ~]# vgs   systemvg 
  VG       #PV #LV #SN Attr   VSize   VFree
  systemvg   2   1   0 wz--n- 316.00m 4.00m

--------------  #注意文件系统类型 ext3  文件系统大小 190MiB (还没有刷新文件系统)-------

[root@server0 ~]# df  -hT  /vo/
文件系统                类型  容量  已用  可用 已用% 挂载点
/dev/mapper/systemvg-vo ext3  190M  1.6M  175M    1% /vo

[root@server0 ~]# blkid    /dev/systemvg/vo
/dev/systemvg/vo: UUID="2eb4d871-ba47-487a-86dd-4dbca04444c9" TYPE="ext3" 

------------------------------------ 刷新 逻辑卷  /dev/systemvg/vo 文件系统  -----------------------

[root@server0 ~]# resize2fs   /dev/systemvg/vo 

resize2fs 1.42.9 (28-Dec-2013)
Filesystem at /dev/systemvg/vo is mounted on /vo; on-line resizing required
old_desc_blocks = 1, new_desc_blocks = 2
The filesystem on /dev/systemvg/vo is now 319488 blocks long.

--------------  #注意文件系统类型 ext3  文件系统大小 299MiB (已经刷新文件系统)-------

[root@server0 ~]# df  -hT  /vo/
文件系统                类型  容量  已用  可用 已用% 挂载点
/dev/mapper/systemvg-vo ext3  299M  2.1M  278M    1% /vo

[root@server0 ~]# vgs  systemvg      #查看卷组已使用空间
  VG       #PV #LV #SN Attr   VSize   VFree
  systemvg   2   1   0 wz--n- 316.00m 4.00m

[root@server0 ~]# lvs    /dev/systemvg/vo    #查看逻辑卷 空间
  LV   VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-ao---- 312.00m  
                                           
[root@server0 ~]# ls  /vo/    #验证了旧的文件数据完整性
1.txt  lost+found

[root@server0 ~]# cat  /vo/1.txt  #验证了旧的文件数据完整性
first200MiB

[root@server0 ~]# lsblk 
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda             253:0    0   10G  0 disk 
└─vda1          253:1    0   10G  0 part /
vdb             253:16   0   10G  0 disk 
├─vdb4          253:20   0    1K  0 part 
├─vdb5          253:21   0  210M  0 part 
│ └─systemvg-vo 252:0    0  312M  0 lvm  /vo
├─vdb6          253:22   0  110M  0 part 
│ └─systemvg-vo 252:0    0  312M  0 lvm  /vo
├─vdb7          253:23   0  320M  0 part 
├─vdb8          253:24   0  512M  0 part 
└─vdb9          253:25   0    1G  0 part 

[root@server0 ~]# tail  -1  /etc/fstab    # 逻辑卷分区 开机自动挂载
/dev/systemvg/vo   /vo  ext3  defaults   0   0

[root@server0 ~]# umount   /vo/  #卸载
[root@server0 ~]# ls     /vo/
[root@server0 ~]# mount  -a    #自动挂载
[root@server0 ~]# ls   /vo/
1.txt  lost+found

[root@server0 ~]# df  -hT   /vo/
文件系统                      类型  容量  已用   可用  已用%  挂载点
/dev/mapper/systemvg-vo ext3  299M  2.1M  278M    1% /vo

请注意：分区大小很少能够完全符合要求的大小，所以大小在 270 MiB 和 330 MiB 之间都是可以接受的

=========================================
--------------------------------- 3  创建用户帐户

创建下列用户、组以及和组的成员关系：
一个名为adminuser的组
一个名为natasha的用户，其属于adminuser，这个组是该用户的从属组
一个名为harry的用户，属于adminuser，这个组是该用户的从属组
一个名为sarah的用户，其在系统中没有可交互的shell，并且不是adminuser组的成员用户
natasha、harry、和sarah的密码都要设置为flectrag

[root@server0 ~]# groupadd   adminuser   #创建组名adminuser

[root@server0 ~]# tail  -1  /etc/group
adminuser:x:1001:

------ 创建用户 一个名为natasha的用户，其属于adminuser，这个组是该用户的从属组 ----

[root@server0 ~]# useradd  -G  adminuser  natasha

[root@server0 ~]# id  natasha
uid=1001(natasha) gid=1002(natasha) 组=1002(natasha),1001(adminuser)
[root@server0 ~]# 

创建用户 一个名为harry的用户，属于adminuser，这个组是该用户的从属组

[root@server0 ~]# useradd  -G  adminuser  harry
[root@server0 ~]# id  harry
uid=1002(harry) gid=1003(harry) 组=1003(harry),1001(adminuser)

创建用户一个名为sarah的用户，其在系统中没有可交互的shell，并且不是adminuser组的成员用户

[root@server0 ~]# useradd   -s  /sbin/nologin  sarah

[root@server0 ~]# id   sarah
uid=1003(sarah) gid=1004(sarah) 组=1004(sarah)

[root@server0 ~]# grep   -n  sarah   /etc/passwd #在系统中没有可交互的shell

42:sarah:x:1003:1004::/home/sarah:/sbin/nologin


-----  natasha、harry、和sarah的密码都要设置为flectrag  ------------

[root@server0 ~]# for  i  in  natasha  harry  sarah; do
> echo   flectrag  |passwd  --stdin  ${i};done
...........

[root@server0 ~]# tail  -3   /etc/passwd
natasha:x:1001:1002::/home/natasha:/bin/bash
harry:x:1002:1003::/home/harry:/bin/bash
sarah:x:1003:1004::/home/sarah:/sbin/nologin

[root@server0 ~]# grep  -n  adminuser  /etc/group
64:adminuser:x:1001:natasha,harry



====================================
------------------------------- 4  配置文件/var/tmp/fstab的权限 ---------------------

拷贝文件/etc/fstab到/var/tmp/fstab，配置文件/var/tmp/fstab的权限：
文件/var/tmp/fstab的拥有者是root用户
文件/var/tmp/fstab属于root组
文件/var/tmp/fstab对任何人都不可执行
用户natasha能够对文件/var/tmp/fstab执行读和写操作
用户harry 对文件/var/tmp/fstab既不能读，也不能写
所有其他用户（当前的和将来的）能够对文件/var/tmp/fstab进行读操作

[root@server0 ~]# ll  /etc/fstab   
-rw-r--r--. 1 root root 338 2月  15 18:57 /etc/fstab
[root@server0 ~]# tail  -3 /etc/fstab 
#
UUID=9bf6b9f7-92ad-441b-848e-0257cbb883d1 /    xfs    defaults    1   1
/dev/systemvg/vo   /vo  ext3  defaults   0   0

[root@server0 ~]# cp  /etc/fstab    /var/tmp/

文件/var/tmp/fstab的拥有者是root用户
文件/var/tmp/fstab属于root组
文件/var/tmp/fstab对任何人都不可执行

[root@server0 ~]# ll   /var/tmp/fstab 
-rw-r--r--. 1 root root 338 2月  15 19:59 /var/tmp/fstab

  ------ 用户natasha能够对文件/var/tmp/fstab执行读和写操作 --------

[root@server0 ~]# setfacl   -m  u:natasha:rw  /var/tmp/fstab


  -------- 用户harry 对文件/var/tmp/fstab既不能读，也不能写 -----------

[root@server0 ~]# setfacl   -m  u:harry:-  /var/tmp/fstab


所有其他用户（当前的和将来的）能够对文件/var/tmp/fstab进行读操作

[root@server0 ~]# ll   /var/tmp/fstab 
-rw-rw-r--+ 1 root root 338 2月  15 19:59 /var/tmp/fstab

[root@server0 ~]# getfacl    /var/tmp/fstab

getfacl: Removing leading '/' from absolute path names
# file: var/tmp/fstab
# owner: root
# group: root
user::rw-
user:natasha:rw-
user:harry:---
group::r--
mask::rw-
other::r--

[root@server0 ~]# 


--------------------------------------------- 5  配置一个cron任务

为用户natasha配置一个定时任务，每天在本地时间14:23时执行命令 /bin/echo hiya 

/******** # yum  -y install  cronie  crontabs  **********/

[root@server0 ~]# systemctl  is-active  crond  && systemctl  is-enabled  crond
active
enabled
[root@server0 ~]# rpm  -q  cronie  crontabs
cronie-1.4.11-11.el7.x86_64
crontabs-1.11-6.20121102git.el7.noarch
[root@server0 ~]# rpm  -ql  cronie  |grep  spool
/var/spool/cron
[root@server0 ~]# which  crontab 
/usr/bin/crontab
[root@server0 ~]# ll  /usr/bin/crontab   #文件有 set uid属性
-rwsr-xr-x. 1 root root 57536 1月  28 2014 /usr/bin/crontab


为用户natasha配置一个定时任务，每天在本地时间14:23时执行命令 /bin/echo hiya 

[root@server0 ~]# crontab   -e  -u  natasha    #编辑 任务

no crontab for natasha - using an empty one
crontab: installing new crontab

[root@server0 ~]# cat  /var/spool/cron/natasha 
23 14 * * * /bin/echo  hiya

[root@server0 ~]# ls  /var/spool/cron/
natasha

[root@server0 ~]# crontab   -l  -u natasha
23 14 * * * /bin/echo  hiya

---------------  #重启定时crond任务 服务(确保开机自启动 enable) --------

[root@server0 ~]# systemctl   restart  crond.service  

[root@server0 ~]# ls  /var/spool/mail/
harry  natasha  rpc  sarah  student

[root@server0 ~]# cat   /var/spool/mail/natasha 

[root@server0 ~]# ll  /var/spool/mail/natasha
-rw-rw----. 1 natasha mail 0 2月  15 19:45 /var/spool/mail/natasha


============================
-------------------------------- 6 创建一个共享目录

创建一个共享目录/home/admins ，特性如下：
/home/admins目录的组所有权是adminuser
adminuser组的成员对目录有读写和执行的权限。
除此之外的其他所有用户没有任何权限（root用户能够访问系统中的所有文件和目录）
在/home/admins目录中创建的文件，其组所有权会自动设置为属于adminuser组

[注]此处所谓的共享目录并不是指网络共享，只是某个组成员共用 

[root@server0 ~]# grep  -n  adminuser   /etc/group
64:adminuser:x:1001:natasha,harry

/************  chmod  g+s  /home/admins/ *************/

  -------- 使用了 Set Gid 属性  suid=4  sgid=2  Sticky bit=1 --------
在/home/admins目录中创建的文件，其组所有权会自动设置为属于adminuser组
---- adminuser组的成员对目录/home/admins/有读写和执行的权限 ---

[root@server0 ~]# mkdir   -m  2770  /home/admins

[root@server0 ~]# ls  -ld   /home/admins/
drwxrws---. 2 root root 6 2月  15 20:26 /home/admins/

[root@server0 ~]# chown   root:adminuser  /home/admins/

[root@server0 ~]# ls  -ld   /home/admins/
drwxrws---. 2 root adminuser 6 2月  15 20:26 /home/admins/


-------------------------------------  7  安装内核的升级

从指定的地址 
http://classroom.example.com/content/rhel7.0/x86_64/errata/Pa ckages/ 
找到新版kernel的rpm安装文件，
下载并用来升级内核，
同时要满足下列要求：
当系统重新启动之后升级的内核要作为默认的内核
原来的内核要被保留，并且仍然可以正常启动

[root@server0 ~]# uname    -r  #查看版本//确认内核版本
3.10.0-123.el7.x86_64


从指定的地址 
http://classroom.example.com/content/rhel7.0/x86_64/errata/Pa ckages/ 
找到新版kernel的rpm安装文件
http://classroom.example.com/content/rhel7.0/x86_64/errata/Packages/

Index of /content/rhel7.0/x86_64/errata/Packages
[ICO]	Name	Last modified	Size	Description
[PARENTDIR]	Parent Directory 	 	- 	 
[ ]	kernel-3.10.0-123.1...>	2018-11-27 05:39 	29M	----右键复制链接地址 
[ ]	kernel-doc-3.10.0-12..>	2018-11-27 05:39 	12M	 
[ ]	rht-system-1.0.0-2.e..>	2018-11-27 05:39 	3.9K	 


------------------ 下载 找到新版kernel的rpm安装文件 ----------------------------

[root@server0 ~]# wget   http://classroom.example.com/content/rhel7.0/x86_64/errata/Packages/kernel-3.10.0-123.1.2.el7.x86_64.rpm
..............
正在保存至: “kernel-3.10.0-123.1.2.el7.x86_64.rpm”

100%[====================>] 30,266,784  85.0MB/s 用时 0.3s   

2019-02-15 20:37:03 (85.0 MB/s) - 已保存 “kernel-3.10.0-123.1.2.el7.x86_64.rpm” [30266784/30266784])

[root@server0 ~]# ll  kernel-3.10.0-123.1.2.el7.x86_64.rpm 
-rw-r--r--. 1 root root 30266784 11月 27 18:39 kernel-3.10.0-123.1.2.el7.x86_64.rpm

[root@server0 ~]# rpm  -ivh   kernel-3.10.0-123.1.2.el7.x86_64.rpm 

警告：kernel-3.10.0-123.1.2.el7.x86_64.rpm: 头V3 RSA/SHA256 Signature, 密钥 ID fd431d51: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:kernel-3.10.0-123.1.2.el7        ################################# [100%]

[root@server0 ~]# uname  -r
3.10.0-123.el7.x86_64

[root@server0 ~]# reboot    #重启以使新内核生效

[root@room9pc27 ~]# ssh  root@172.25.0.11
..........
[root@server0 ~]# uname   -r   # 确认新内核版本已经改变
3.10.0-123.1.2.el7.x86_64


====================================

---------------------------------  8 绑定到外部验证服务

系统 classroom.example.com 提供了一个 LDAP 验证服务。
您的系统需要按照以下要求绑定到这个服务上：

验证服务器的基本 DN 是：dc=example,dc=com
帐户信息和验证信息都是由 LDAP 提供的
连接要使用证书进行加密，

证书可以在下面的链接中下载 ：http://classroom.example.com/pub/example-ca.crt
当正确完成配置后，
用户 ldapuser0 应该能够登录到您的系统中，但是没有主目录。
当您完成 autofs的题目之后，才能生成主目录
用户ldapuser0的密码是password

[root@server0 ~]# ls  /etc/yum.repos.d/
content.example.com_rhel7.0_x86_64_dvd.repo  repo
[root@server0 ~]# yum clean all >/dev/null &&  yum repolist  |tail -3
源标识                                 源名称                              状态
content.example.com_rhel7.0_x86_64_dvd added from: http://content.example. 4,305
repolist: 4,305

/************************

System Security Services Dameon(SSSD)

1.SSSD简介

一个守护进程，该进程可以用来访问多种验证服务器，如LDAP，Kerberos等，并提供授权。
SSSD是 介于本地用户和数据存储之间的进程，
本地客户端首先连接SSSD，再由SSSD联系外部资源提供者(一台远程服务器)
***********/


[root@server0 ~]# yum  -y  install  sssd |tail  -3
警告：RPM 数据库已被非 yum 程序修改。
  sssd-proxy.x86_64 0:1.11.2-65.el7                                             

完毕！

[root@server0 ~]# rpm -q sssd
sssd-1.11.2-65.el7.x86_64

[root@server0 ~]# type  authconfig-tui 
authconfig-tui 是 /usr/sbin/authconfig-tui

[root@server0 ~]# ls  /etc/openldap/
certs  ldap.conf
[root@server0 ~]# ls  /etc/openldap/certs/

[root@server0 ~]# rpm  -qf  /usr/sbin/authconfig-tui 
authconfig-6.2.8-8.el7.x86_64
[root@server0 ~]# rpm  -qa |grep  authconfig
authconfig-6.2.8-8.el7.x86_64

[root@server0 ~]# rpm  -ql  authconfig |grep  authconfig-tui
/usr/sbin/authconfig-tui
/usr/share/authconfig/authconfig-tui.py
/usr/share/authconfig/authconfig-tui.pyc
/usr/share/authconfig/authconfig-tui.pyo
/usr/share/man/man8/authconfig-tui.8.gz

[root@server0 ~]# authconfig-tui   #使用简易配置工具

authconfig-tui - (c) │                                         │ 
                     │  用户信息           认证                                │ 
                     │  [ ] 缓存信息       [ ] 使用 MD5 密码                    │ 
                     │  [*] 使用 LDAP      [*] 使用 shadow 密码            │ 
                     │  [ ] 使用 NIS       [*] 使用 LDAP 认证               │ 
                     │  [ ] 使用 IPAv2     [ ] 使用 Kerberos             │ 
                     │  [ ] 使用 Winbind   [*] 使用指纹读取器                 │ 
                     │                     [ ] 使用 Winbind 认证                │ 
                     │                     [*] 本地授权即可                       │ 
                     │                                                            │ 
                     │      ┌──────┐            ┌────────┐    │ 
                     │      │ 取消        │           │ 下一步   (点击) │    │ 
                     │      └──────┘            └────────┘    │ 

              ┌───────────────────┤ LDAP 设置 ├────────────┐
                 │                                                                   │ 
                 │           [*] 使用 TLS                                  │ 
                 │  服务器： classroom.example.com___________________   │---指定服务器主机名
                 │ 基础 DN： dc=example,dc=com_______________________   │-指定服务端域名(用DNS域名的不同部分组成的基准DN)
                 │                                                                   │ 
                 │         ┌──────┐                 ┌──────┐       │ 
                 │         │ 后退       │                  │ 确定 (点击)│       │ 
                 │         └──────┘                 └──────┘       │ 
                 │                                                                   │ 
                 │                                                                   │ 
                 └───────────────────────────────┘ 
LDAP目录树的最顶部就是根，也就是所谓的“基准DN"
LDAP目录记录的标识名（Distinguished Name，简称DN）
https://baike.baidu.com/item/LDAP/2875565?fr=aladdin

             ┌─────────────┤ 警告 ├────────────┐
             │                                                                │ 
             │                                                                │ 
             │ 要连到启用 TLS 的 LDAP                            ↑ │ 
             │ 服务器，您需要一个签署您服务器证书的 CA              ▮ │ 
             │ 证书。将此PEM                                    ▒ │ 
             │ 格式的证书复制到“/etc/openldap/cacerts”目录中。⏎ ↓ │ 
             │                                                                │ 
             │                     ┌──────┐                           │ 
             │                     │ 确定       │                           │ 
             │                     └──────┘                           │ 
             │                                                                 │ 
             └──────────────────────────────┘ 

提示下载证书到 /etc/openldap/cacerts 目录时,另开一终端执行:

[root@room9pc27 ~]# ssh  -X  172.25.0.11
Last login: Wed Feb 13 19:57:53 2019 from 172.25.0.250
[root@server0 ~]# ls  /etc/openldap/
certs  ldap.conf
[root@server0 ~]# ls  /etc/openldap/certs/

[root@server0 ~]# cat  /etc/openldap/ldap.conf 
#
# LDAP Defaults
#
# See ldap.conf(5) for details
# This file should be world readable but not world writable.

#BASE	dc=example,dc=com
#URI	ldap://ldap.example.com ldap://ldap-master.example.com:666

#SIZELIMIT	12
#TIMELIMIT	15
#DEREF		never

TLS_CACERTDIR	/etc/openldap/certs

# Turning this off breaks GSSAPI used with krb5 when rdns = false
SASL_NOCANON	on

[root@server0 ~]# ls  /etc/openldap/
certs  ldap.conf

[root@server0 ~]# ls  /etc/openldap/
cacerts  certs  ldap.conf

[root@server0 ~]# ls  -ld  /etc/openldap/cacerts/
drwxr-xr-x. 2 root root 6 2月  13 20:51 /etc/openldap/cacerts/

[root@server0 ~]# cd  /etc/openldap/cacerts/
[root@server0 cacerts]# ls
连接要使用证书进行加密，
证书可以在下面的链接中下载 ：http://classroom.example.com/pub/example-ca.crt 

[root@server0 cacerts]# wget   http://classroom.example.com/pub/example-ca.crt

--2019-02-13 20:57:25--  http://classroom.example.com/pub/example-ca.crt
正在解析主机 classroom.example.com (classroom.example.com)... 172.25.254.254
正在连接 classroom.example.com (classroom.example.com)|172.25.254.254|:80... 已连接。
已发出 HTTP 请求，正在等待回应... 200 OK
长度：1220 (1.2K)
正在保存至: “example-ca.crt”

100%[======================================>] 1,220       --.-K/s 用时 0s      

2019-02-13 20:57:25 (123 MB/s) - 已保存 “example-ca.crt” [1220/1220])

[root@server0 cacerts]# ls
example-ca.crt
[root@server0 cacerts]# ll  example-ca.crt 
-rw-r--r--. 1 root root 1220 7月  11 2014 example-ca.crt

[root@server0 cacerts]# file   example-ca.crt
example-ca.crt: PEM certificate

[root@server0 cacerts]# cat   example-ca.crt
-----BEGIN CERTIFICATE-----
MIIDWTCCAsKgAwIBAgIJAJ..........
............
y6xbFLj/ju/WC+l3wDXBtNXq3nFZvF12n6VVw9WjIN8SrdYq0bWcFNF9TRdb
-----END CERTIFICATE-----

[root@server0 cacerts]# tail  -1  example-ca.crt
-----END CERTIFICATE-----
-----------------------  然后回到 authconfig-tui 工具确认,稍等片刻即可。 -------------------

                 ┌─────────────┤ 警告 ├─────────────┐
                 │                                                                  │ 
                 │ 要连到启用 TLS 的 LDAP                             ↑ │ 
                 │ 服务器，您需要一个签署您服务器证书的 CA                ▮ │ 
                 │                                                                  │ 
                 │                     ┌──────┐                            │ 
                 │                     │ 确定  (点击)│                           │ 
                 │                     └──────┘                            │ 
                 │                                                                  │ 
                 └───────────────────────────────┘ 

要连到启用 TLS 的 LDAP                           ↑ │ 
服务器，您需要一个签署您服务器证书的 CA 
 证书。将此PEM                               
 格式的证书复制到“/etc/openldap/cacerts”目录中。⏎ ▮ │                                               
 然后按“确定”。 

[root@server0 ~]# cd   /etc/openldap/cacerts/
[root@server0 cacerts]# ls
example-ca.crt

/*************-------------- #使用简易配置工具  正在配置中 ----------------------
[root@server0 ~]# authconfig-tui  #按 回车键 配置自动完成需要时间,耐心等待
***************/

[root@server0 cacerts]# ls
d5912a02.0  example-ca.crt
[root@server0 cacerts]# pwd
/etc/openldap/cacerts
[root@server0 cacerts]# cd

[root@server0 ~]# id  ldapuser0          #验证 LDAP 用户
uid=1700(ldapuser0) gid=1700(ldapuser0) 组=1700(ldapuser0)
[root@server0 ~]# systemctl  is-active   sssd
active
[root@server0 ~]# systemctl  restart  sssd && systemctl  enable  sssd
[root@server0 ~]# ls  /home/
admins  harry  natasha  sarah  student


[root@server0 ~]# id  ldapuser20     #验证 LDAP 用户
uid=1720(ldapuser20) gid=1720(ldapuser20) 组=1720(ldapuser20)






------------------------  9 autofs的配置

按照下述要求配置 autofs 用来自动挂载 LDAP 用户的主目录：
classroom.example.com（172.25.0.11）通过 NFS 输出 /home/guests 目录到您的系统，
这个文件系统包含了用户ldapuser0的主目录，
并且已经预先配置好了
ldapuser0用户的主目录是 classroom.example.com:/home/guests/ldapuser0
ldapuser0的主目录应该按需挂载到本地的/home/guests/ldapuser0 目录下
用户对其主目录必须是可写的
ldapuser0用户的密码是password

[root@server0 ~]# id  ldapuser20
uid=1720(ldapuser20) gid=1720(ldapuser20) 组=1720(ldapuser20)

[root@server0 ~]# yum  -y install  autofs |tail  -7
已安装:
  autofs.x86_64 1:5.0.7-40.el7                                                  

作为依赖被安装:
  hesiod.x86_64 0:3.2.1-3.el7                                                   

完毕！
[root@server0 ~]# rpm  -q  autofs
autofs-5.0.7-40.el7.x86_64

[root@server0 ~]# rpm  -ql  autofs  |grep master
/etc/auto.master
/etc/auto.master.d
/usr/share/doc/autofs-5.0.7/ldap-automount-auto.master
/usr/share/doc/autofs-5.0.7/ldap-automount-rfc2307-bis-auto.master
/usr/share/doc/autofs-5.0.7/ldap-automount-rfc2307-bis-old-style-auto.master
/usr/share/doc/autofs-5.0.7/ldap-nis-auto.master
/usr/share/man/man5/auto.master.5.gz

[root@server0 ~]# rpm  -qf  /etc/auto.master
autofs-5.0.7-40.el7.x86_64


[root@server0 ~]# mkdir   /home/guests  #根据文件 auto.master定义的文件名
[root@server0 ~]# ls   /home/
admins  guests  harry  natasha  sarah  student

[root@server0 ~]# vim   /etc/auto.master

[root@server0 ~]# egrep   -nv  "^($|#)"  /etc/auto.master
7:/misc	/etc/auto.misc
13:/net	-hosts
17:+dir:/etc/auto.master.d
27:+auto.master
28:/home/guests       /etc/guests.rule

被监控的目录路径 	 自定义操作策略文件的路径


[root@server0 ~]# vim  /etc/guests.rule   # 注意减号" - "
[root@server0 ~]# cat   /etc/guests.rule   #根据文件 auto.master定义的文件名
*           -rw   classroom.example.com:/home/guests/&
            ## 若有版本 3 要求,则添加 v3改成  -rw,v3
/**************添加配置
ldapuser0  -rw,v3  classroom.example.com:/home/guests/ldapuser0
********/

挂载点目录名   -挂载参数               服务器地址:设备路径 
[root@server0 ~]# cat  /etc/guests.rule
*     -rw    classroom.example.com:/home/guests/&

[root@server0 ~]# systemctl   is-active   autofs
unknown
[root@server0 ~]# systemctl  start  autofs  &&  systemctl   enable  autofs  #起服务 
ln -s '/usr/lib/systemd/system/autofs.service' '/etc/systemd/system/multi-user.target.wants/autofs.service'

[root@server0 ~]# sudo  ls  /home/guests/
[root@server0 ~]# su   -l  ldapuser0   -c   "ls  /home/guests/"
ldapuser0
[root@server0 ~]# su   -   ldapuser20  -c   "ls  /home/guests/"
ldapuser0  ldapuser20
[root@server0 ~]# sudo  ls  /home/guests/
ldapuser0  ldapuser20
[root@server0 ~]# ls  /home/guests/
ldapuser0  ldapuser20
[root@server0 ~]# ssh  -l ldapuser1  172.25.0.11  ls   /home/guests/
............................
Are you sure you want to continue connecting (yes/no)? yes
..................
ldapuser1@172.25.0.11's password: password
ldapuser0
ldapuser1
ldapuser20
[root@server0 ~]# ssh  -l ldapuser20  172.25.0.11  ls   /home/guests/
ldapuser20@172.25.0.11's password: password
ldapuser0
ldapuser1
ldapuser20
[root@server0 ~]#  ls  /home/guests/
ldapuser0  ldapuser1  ldapuser20

[root@server0 ~]# df  -hT   /home/guests/
文件系统                类型      容量  已用  可用  已用%  挂载点
/etc/guests.rule   autofs   0   0    0     -  /home/guests

[root@server0 ~]# df  -hT  |grep   home/guests
/**************               文件系统                  类型    容量  已用  可用  已用%  挂载点
classroom.example.com:/home/guests/ldapuser0  nfs4  10G 3.2G  6.9G 32% /home/guests/ldapuser0




===============================

---------------------------- 10 配置NTP网络时间客户端

配置您的系统，让其作为 NTP 服务器 classroom.example.com 的客户端

[root@server0 ~]# yum  -y  install   chrony
............
[root@server0 ~]# rpm  -q   chrony
chrony-1.29.1-1.el7.x86_64

[root@server0 ~]# vim  /etc/chrony.conf 
       //注释掉默认的 server 配置
server  classroom.example.com  iburst  #手动添加服务器//添加新的配置

[root@server0 ~]# egrep   iburst   /etc/chrony.conf
#server 0.rhel.pool.ntp.org iburst
#server 1.rhel.pool.ntp.org iburst
#server 2.rhel.pool.ntp.org iburst
#server 3.rhel.pool.ntp.org iburst
server   classroom.example.com  iburst


[root@server0 ~]# date  -s  "2018-12-22 12:55:33"
2018年 12月 22日 星期六 12:55:33 CST
[root@server0 ~]# date 
2018年 12月 22日 星期六 12:55:35 CST

[root@server0 ~]# systemctl  restart  chronyd.service 
[root@server0 ~]# systemctl  enable  chronyd
[root@server0 ~]# date
2019年 02月 16日 星期六 14:43:45 CST

[root@server0 ~]# timedatectl   set-ntp   yes  && timedatectl  |grep -i ntp
     NTP enabled: yes
NTP synchronized: yes

[root@server0 ~]# timedatectl  ; date 
      Local time: 六 2019-02-16 14:46:39 CST
  Universal time: 六 2019-02-16 06:46:39 UTC
        RTC time: 六 2019-02-16 06:46:40
        Timezone: Asia/Shanghai (CST, +0800)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a
2019年 02月 16日 星期六 14:46:39 CST




----------------------------- 11 配置一个用户帐户

创建一个名为alex的用户，用户ID是 3456，密码是flectrag 

[root@server0 ~]# useradd    -u  3456  alex
[root@server0 ~]# echo  flectrag  |passwd  --stdin  alex
更改用户 alex 的密码 。
passwd：所有的身份验证令牌已经成功更新。
[root@server0 ~]# id  alex
uid=3456(alex) gid=3456(alex) 组=3456(alex)



------------------------------- 12 添加一个swap分区

在您的系统中添加一个大小为 512 MiB 的swap分区：
当您的系统启动时，swap 分区应该可以自动挂载
不要移除或者修改其他已经存在于您的系统中的 swap 分区

[root@server0 ~]# lsblk 
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda             252:0    0   10G  0 disk 
└─vda1          252:1    0   10G  0 part /
vdb             252:16   0   10G  0 disk 
├─vdb4          252:20   0    1K  0 part 
├─vdb5          252:21   0  210M  0 part 
│ └─systemvg-vo 253:0    0  312M  0 lvm  /vo
├─vdb6          252:22   0  110M  0 part 
│ └─systemvg-vo 253:0    0  312M  0 lvm  /vo
├─vdb7          252:23   0  320M  0 part 
├─vdb8          252:24   0  512M  0 part 
└─vdb9          252:25   0    1G  0 part 

[root@server0 ~]# blkid   /dev/vdb8

[root@server0 ~]# cat  /proc/sys/vm/swappiness 
30
[root@server0 ~]# mkswap    /dev/vdb8  #创建交换分区,格式化交换文件系统
正在设置交换空间版本 1，大小 = 524284 KiB
无标签，UUID=7bf954a0-a067-40a1-984e-7bd28a8efb83

[root@server0 ~]# vim  /etc/fstab 

[root@server0 ~]# tail   -3   /etc/fstab
UUID=9bf6b9f7-92ad-441b-848e-0257cbb883d1 /    xfs    defaults    1   1
/dev/systemvg/vo   /vo  ext3   defaults   0   0
/dev/vdb8         swap   swap   defaults   0   0

[root@server0 ~]# swapon   -a   ## -a 参数是开启全部的交换空间

[root@server0 ~]# swapon   -s   #-s 显示简短的装置讯息,查看swap是否挂载

文件名	              类型     大小    已用  权限
/dev/vdb8  partition   524284   0    -1

[root@server0 ~]# blkid   /dev/vdb8
/dev/vdb8: UUID="7bf954a0-a067-40a1-984e-7bd28a8efb83" TYPE="swap" 

[root@server0 ~]# lsblk
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda             252:0    0   10G  0 disk 
└─vda1          252:1    0   10G  0 part /
vdb             252:16   0   10G  0 disk 
├─vdb4          252:20   0    1K  0 part 
├─vdb5          252:21   0  210M  0 part 
│ └─systemvg-vo 253:0    0  312M  0 lvm  /vo
├─vdb6          252:22   0  110M  0 part 
│ └─systemvg-vo 253:0    0  312M  0 lvm  /vo
├─vdb7          252:23   0  320M  0 part 
├─vdb8          252:24   0  512M  0 part [SWAP]
└─vdb9          252:25   0    1G  0 part 

[root@server0 ~]# 


-------------------------- 13  查找文件

找出所有用户student拥有的文件，并且把它们拷贝到/root/findfiles 目录中

[root@server0 ~]# mkdir   /root/findfiles

[root@server0 ~]# find  /  -user student  -type f  -exec cp  -p {} /root/findfiles/  \;

find: ‘/proc/6288/task/6288/fdinfo/6’: 没有那个文件或目录
find: ‘/proc/6288/fdinfo/6’: 没有那个文件或目录

[root@server0 ~]# ls   /root/findfiles/
authorized_keys  gnome-initial-setup-done  monitors.xml  student


-------------------------------  14 查找一个字符串

在文件/usr/share/dict/words中查找到所有包含字符串seismic的行：
将找出的行按照原文的先后顺序拷贝到/root/wordlist文件中
/root/wordlist文件不要包含空行，
并且其中的所有行的内容都必须是
 /usr/share/dict/words 文件中原始行的准确副本

[root@server0 ~]# grep   "seismic"  /usr/share/dict/words  >  /root/wordlist

/******
[root@server0 ~]# cat  -n  /root/wordlist  |sed  -n  "1p;\$p"
     1	anaseismic
    24	unseismic
[root@server0 ~]# head  -1   /root/wordlist 
anaseismic
[root@server0 ~]# tail -1  /root/wordlist
unseismic
[root@server0 ~]# wc  -l   /root/wordlist 
24 /root/wordlist
********/


---------------------------------------------- 15 创建一个逻辑卷

根据下面的要求创建一个新的逻辑卷：
逻辑卷命名为database，属于datastore卷组，
并且逻辑卷的大小为50个物理扩展单元 (physical extent)
在datastore卷组中的逻辑卷，
物理扩展单元 (physical extent) 大小应为 16 MiB
使用ext3 文件系统对新的逻辑卷进行格式化，
此逻辑卷应该在系统启动的时候自动挂载在 /mnt/database 目录下

/***********
 1 创建卷组的时候设置PE的大小
 格式：vgcreate  -s   PE大小   卷组名    空闲的物理卷分区
   例如 # vgcreate  -s  2M   myvg    /dev/vdc3

---------------  注意 小写字母  l  20 ------------------
创建逻辑卷 设置 PE的个数(大小)
      lvcreate  -l  PE的个数   -n  test   卷组名
  例 # lvcreate  -l  20      -n  mylv   myvg

2 卷组已经存在,修改卷组PE大小
   vgchange  -s  PE大小    卷组名   
**********/

[root@server0 ~]# lsblk   /dev/vdb9
NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vdb9 252:25   0   1G  0 part 

[root@server0 ~]# blkid    /dev/vdb9


----------------- 创建卷组 datastore  的时候设置PE的大小 16MiB   ---------------

[root@server0 ~]# vgcreate   -s  16MiB   datastore   /dev/vdb9

  Physical volume "/dev/vdb9" successfully created
  Volume group "datastore" successfully created

[root@server0 ~]# vgdisplay    datastore  |grep  -i size
  VG Size               1008.00 MiB
  PE Size               16.00 MiB
  Alloc PE / Size       0 / 0   
  Free  PE / Size       63 / 1008.00 MiB

----------   创建逻辑卷database  设置 PE的个数50 -------------------------

[root@server0 ~]# lvcreate   -l  50  -n  database   /dev/datastore
  Logical volume "database" created

------------------  查看 逻辑卷/dev/datastore/database  的信息----------

[root@server0 ~]# lvs   /dev/datastore/database 
  LV       VG        Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  database datastore -wi-a----- 800.00m  

---------------------- 使用ext3文件系统对新的逻辑卷进行格式化，
此逻辑卷应该在系统启动的时候自动挂载在 /mnt/database 目录下

[root@server0 ~]# mkdir   /mnt/database
[root@server0 ~]# ls  /mnt/database/

[root@server0 ~]# mkfs.ext3  /dev/datastore/database  #格式化 ext3 文件系统
..............
正在写入inode表: 完成                            
Creating journal (4096 blocks): 完成
Writing superblocks and filesystem accounting information: 完成

[root@server0 ~]# vim   /etc/fstab  
[root@server0 ~]# tail  -3   /etc/fstab 
/dev/systemvg/vo   /vo  ext3   defaults   0   0
/dev/vdb8         swap   swap   defaults   0   0
/dev/datastore/database    /mnt/database  ext3  defaults  0  0

[root@server0 ~]# mount  -a

[root@server0 ~]# lsblk 
NAME                   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda                    252:0    0   10G  0 disk 
└─vda1                 252:1    0   10G  0 part /
vdb                    252:16   0   10G  0 disk 
├─vdb4                 252:20   0    1K  0 part 
├─vdb5                 252:21   0  210M  0 part 
│ └─systemvg-vo        253:0    0  312M  0 lvm  /vo
├─vdb6                 252:22   0  110M  0 part 
│ └─systemvg-vo        253:0    0  312M  0 lvm  /vo
├─vdb7                 252:23   0  320M  0 part 
├─vdb8                 252:24   0  512M  0 part [SWAP]
└─vdb9                 252:25   0    1G  0 part 
  └─datastore-database 253:1    0  800M  0 lvm  /mnt/database

[root@server0 ~]# df  -hT   /mnt/database/
文件系统                       类型  容量  已用  可用 已用% 挂载点
/dev/mapper/datastore-database ext3  772M  828K  715M    1% /mnt/database
[root@server0 ~]# 

[root@server0 ~]# blkid   /dev/datastore/database
/dev/datastore/database: UUID="06cd11d8-ff76-4318-bc2b-0eb28dc1f721" TYPE="ext3" 
                                         
[root@server0 ~]# vgs
  VG        #PV #LV #SN Attr   VSize    VFree  
  datastore   1   1   0 wz--n- 1008.00m 208.00m
  systemvg    2   1   0 wz--n-  316.00m   4.00m

[root@server0 ~]# lvs
  LV       VG        Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  database datastore -wi-ao---- 800.00m                                             
  vo       systemvg  -wi-ao---- 312.00m     


------------------------------------------ 16 创建一个归档

创建一个名为/root/backup.tar.bz2的归档文件，
其中包含/usr/local目录中的内容，
tar归档必须使用bzip2进行压缩

tar命令
[root@linux ~]# tar [-cxtzjvfpPN] 文件与目录 ....
参数：
-c ：建立(创建)一个压缩文件的参数指令(create 的意思)；
-x ：解开(解压)一个压缩文件的参数指令！

-j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？
-j：有bz2属性的   .tar.bz2

-f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！
　　　例如使用『 tar -zcvfP tfile sfile』就是错误的写法，要写成
　　　『 tar -zcvPf tfile sfile』才对喔！
-p ：使用原文件的原来属性（属性不会依据使用者而变）
-P ：可以使用绝对路径来压缩！

[root@server0 ~]# ls  /usr/local/
bin  etc  games  include  lib  lib64  libexec  sbin  share  src

[root@server0 ~]# tar  -jcPf  /root/backup.tar.bz2   /usr/local/

[root@server0 ~]# tar  -jtPf  /root/backup.tar.bz2  #-P使用绝对路径来压缩/查看
/usr/local/
/usr/local/bin/
...........
[root@server0 ~]# tar  -jtf  /root/backup.tar.bz2 
tar: 从成员名中删除开头的“/”    #这里没有使用 -P ,所以多了 此行 "/"
/usr/local/
/usr/local/bin/
.......
/usr/local/src/

[root@server0 ~]# file  /root/backup.tar.bz2
/root/backup.tar.bz2: bzip2 compressed data, block size = 900k

[root@server0 ~]# ll  /root/backup.tar.bz2
-rw-r--r--. 1 root root 1891 2月  16 15:44 /root/backup.tar.bz2





================================

[root@room9pc27 ~]# tar   -xPf  /root/checkcsa-2.4.0.tar.gz 
[root@room9pc27 ~]# tar  -tPf  /root/checkcsa-2.4.0.tar.gz
rht-checkcsa.py
checkcsa.py
.checkcsa
ReadMe.txt
[root@room9pc27 ~]# ll  rht-checkcsa.py 
-rw-r--r-- 1 root root 874 12月  5 2017 rht-checkcsa.py
[root@room9pc27 ~]# chmod  a+x  rht-checkcsa.py

------------------------  #RHCSA评分  ---------------------

[root@room9pc27 ~]# ./rht-checkcsa.py 


[root@server0 ~]#  df  -hT   /mnt/database/
文件系统                       类型  容量  已用  可用 已用% 挂载点
/dev/mapper/datastore-database ext3  772M  828K  715M    1% /mnt/database
[root@server0 ~]# df  -hT  /vo/
文件系统                类型  容量  已用  可用 已用% 挂载点
/dev/mapper/systemvg-vo ext3  299M  2.1M  278M    1% /vo

[root@server0 ~]# tail -4  /etc/fstab 

UUID=9bf6b9f7-92ad-441b-848e-0257cbb883d1 /    xfs    defaults    1   1
/dev/systemvg/vo   /vo  ext3   defaults   0   0
/dev/vdb8         swap   swap   defaults   0   0
/dev/datastore/database    /mnt/database  ext3  defaults  0  0

[root@server0 ~]# lsblk 
NAME                   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda                    252:0    0   10G  0 disk 
└─vda1                 252:1    0   10G  0 part /
vdb                    252:16   0   10G  0 disk 
├─vdb4                 252:20   0    1K  0 part 
├─vdb5                 252:21   0  210M  0 part 
│ └─systemvg-vo        253:0    0  312M  0 lvm  /vo
├─vdb6                 252:22   0  110M  0 part 
│ └─systemvg-vo        253:0    0  312M  0 lvm  /vo
├─vdb7                 252:23   0  320M  0 part 
├─vdb8                 252:24   0  512M  0 part [SWAP]
└─vdb9                 252:25   0    1G  0 part 
  └─datastore-database 253:1    0  800M  0 lvm  /mnt/database

[root@server0 ~]# 











