
==========================  TCP/IP三次握手四次断开  =================
=================== TCP的三次握手(建立连接）和四次挥手(关闭连接）==========

                                       Client                                   Server
                             没有任何连接状态 CLOSED |                                   | CLOSED 没有任何连接状态
                                            |                                   | LISTEN 侦听来自远方TCP端口的连接请求
发送SYN,请求建立连接(seq=100,ctl=SYN) send SYN |--------------- SYN -------------->| receive SYN
       在发送连接请求后等待匹配的连接请求 SYN_SENT |                                   | SYN_RECV 服务端收到建立连接的SYN没有收到ACK包的时候状态
                 receive SYN+ACK |<-- SYN+ACK ---| SYN+ACK send 发送SYN，ACK(seq=300,ack=101,ctl=SYN,ACK)
                                        |            | SYN-RECEIVED 在收到和发送一个连接请求后等待对连接请求的确认状态
            发送ACK(seq=101  ack=301  ctl=ACK) |-------------- ACK --------------->| receive ACK
 代表一个打开的连接，数据可以传送给用户 ESTABLISHED|                                  | ESTABLISHED 代表一个打开的连接，数据可以传送给用户
                                            | <=== TCP session established ===> |
                                                         |                                              |
      发送FIN 请求断开连接(FIN=1,ACK=1) send FIN |-------------- FIN --------------->| receive FIN
等待远程TCP的连接中断请求，或先前的连接中断请求的确认 FIN_WAIT-1 |                       | CLOSE_WAIT 等待从本地用户发来的连接中断请求
                                 receive ACK |<------------- ACK ----------------| send ACK 发送ACK(ACK=1)
               从远程TCP等待连接中断请求 FIN_WAIT-2 |                                   |
                     receive FIN |<------------- FIN ----------------| send FIN 发送FIN 请求断开连接(FIN=1,ACK=1)
等待足够的时间以确保远程TCP接收到连接中断请求的确认 TIME_WAIT |                          | LAST_ACK 等待原来发向远程TCP的连接中断请求的确认
                            发送ACK(ACK=1) send ACK |-------------- ACK --------------->| receive ACK
                                     TimeOut |                                   | CLOSED 没有任何连接状态
                               没有任何连接状态 CLOSED |                                   |

位码即tcp标志位,有6种标示:

SYN(synchronous建立联机)

ACK(acknowledgement 确认)

PSH(push传送)

FIN(finish结束)

RST(reset重置)

URG(urgent紧急)

Sequence number(顺序号码)[32位序列号 和 32 位确认号 举例,seq=100,]

Acknowledge number(确认号码)
established   已建立的; 已设立的; 已制定的; 确定的
receive 收到; 接待; 接到; 接纳;
          接收; 受理; 欢迎; 承受;
TCP(Transmission Control Protocol)　传输控制协议
===================================================

			             OSI参考模型(七层框架)

          [5] 应用层        |<----------协议--------->|	        应用层     (计算机) APDU [是应用层协议数据单元]【网络服务与最终用户的一个接口】
                HTTP  FTP  TFTP  SMTP【邮件协议】  SNMP【Simple Network Management Protocol 简单网络管理协议，SNMP就是为了让别人能够获得路由器上的统计数据而约定好的数据交流的规则】  DNS
                    上层数据
6  接口      
             表示层         |-----------协议-----------|         表示层              PPDU [是表示层协议数据单元]【数据的表现形式，如加密、压缩】
5  接口
 	     会话层         |-----------协议-----------|         会话层              SPDU [是会话层协议数据单元]【建立、管理、中止会话，例如断点续传】
4  接口      
      	  [4] 传输层        <----------协议--------->         传输层     (防火墙) TPDU [是传输层协议数据单元,即 segment "数据段"]【定义传输数据的协议端口号，以及流控和差错校验】
                TCP      UDP
                TCP头部     上层数据
3  接口
       	  [3] 网络层        <----------协议--------->         网络层     (路由器)  package 数据包 【用抓包工具抓到的一条条记录就是包】【进行逻辑地址寻址，实现不同网络之间的通信】
                ICMP【ping这个工具 使用的协议】  IGMP【Internet Group Manage Protocol ： Internet组管理协议，提供internet网际多点 传送的功能,即将一个ip包拷贝给多个host，是一个尚处于实验阶段的协议】    IP   ARP【地址解析协议 Address Resolution Protocol】   RARP【Reverse Address Resolution Protocol 反向地址转换协议，允许局域网的物理机 从网关服务器的 ARP 表 或者缓存上 请求转换 其 IP 地址】
                IP头部   TCP头部     上层数据
2  接口
          [2] 数据链路层    <----------协议--------->         数据链路层 (交换机)  frame  数据帧 【数据链路层协议数据单元 以太网桢格式 】【链路层分组 称为 帧 】【建立逻辑连接、进行硬件地址寻址、差错校验等功能】
                MAC头部  IP头部   TCP头部   上层数据
1  接口   
          [1] 物理层	    <----------协议--------->	        物理层     (网卡)    bit   比特流  【建立、维护、断开物理连接】

          层            主机A                              主机B          数据单元
-------------------------------------------------------------------------------------------------------------------------------------
TCP/UDP常用端口号
默认端口号　　　　　　服务　　　　　　　　　　说明

21　　　　　　　　　　FTP　　　　　　　　　　文件传输协议（英文：File Transfer Protocol，缩写：FTP）
                                                 是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式。
                                                 它属于网络传输协议的应用层。

22　　　　　　　　　　SSH　　　　　　　　　 Secure Shell（缩写为SSH），
                                                 由IETF的网络工作小组（Network Working Group）所制定；
                                      SSH为一项创建在应用层和传输层基础上的安全协议，
                                                 为计算机上的Shell（壳层）提供安全的传输和使用环境。

23　　　　　　　　　　Telnet　　　　　　　  Telnet协议是一种应用层协议，使用于互联网及局域网中，
                                                 使用虚拟终端机的形式，提供双向、以文字字符串为主的交互功能。
                                                 属于TCP/IP协议族的其中之一，
                                                 是Internet远程登录服务的标准协议和主要方式，
                                                 常用于网页服务器的远程控制，可供用户在本地主机运行远程主机上的工作。

80　　　　　　　　　　HTTP　　　　　　　　  超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）
                                                是互联网上应用最为广泛的一种网络协议。
                                                设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。

443　　　　　　　　　  HTTPS　　　　　　　超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，
                                               常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。
                                               在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来加密数据包。
                                     HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。

TCP     协议名称          端口号     套接字        作用
Telnet  专司终端模拟      23        Tcp 23      它为用户提供了在本地计算机上完成远程主机工作的能力
SMTP    简单邮件传输协议  25        Tcp 25      它帮助每台计算机在发送或中转信件时找到下一个目的地
HTTP    超文本传输协议    80        Tcp 80      超文本传输协议，是我们浏览网页、看在线视频、听在线音乐等必须遵循的规则
FTP     文件传输协议      20、21    Tcp 20      文件传输协议 FTP [ File Transfer Protocol ]使得主机间可以共享文件
                                        和Tcp21
DNS     域名系统          53        Tcp 53      因特网上作为域名和IP地址相互映射的一个分布式数据库，
                                                      能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串
HTTPS   超文本传输安全协议 443     Tcp 443     HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版
SSH     安全壳协议        22        Tcp 22	SSH  为建立在应用层和传输层基础上的安全协议
POP3    邮局协议版本3    110        Tcp 110     本协议主要用于支持使用客户端远程管理在服务器上的电子邮件
NTP     网络时间协议     123        Tcp 123     它是用来同步网络中各个计算机时间的协议
IMAP4 第四版因特网信息存取协议 143  Tcp 143     IMAP4协议与POP3协议一样也是规定个人计算机如何访问互联网上的邮件服务器进行收发邮件的协议，
                                                       但是IMAP4协议同POP3协议相比更高级
--------------------------------------------------------------------------------------
UDP         协议名称             端口号    套接字       作用
SNMP        简单网络管理协议     161       UDP 161    该协议能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况
TFTP        简单文件传输协议     69        UDP 69     TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，
                                                              提供不复杂、开销不大的文件传输服务
DNS         域名系统             53        UDP 53     因特网上作为域名和IP地址相互映射的一个分布式数据库，
                                                             能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串
BooTPS/DHCP 动态主机配置协议	67	UDP 67    主要有两个用途:给内部网络或网络服务供应商自动分配IP地址，
                                                             给用户或者内部网络管理员作为对所有计算机作中央管理的手段



A (126) 1  -126.0.0.0  [0000  0001] -[0111 1111]  私有地址A 10.0.0.1    ~ 10.255.255.254
B (64 ) 128-191.0.0.0  [1000  0000] -[1011 1111]  私有地址B 172.16.0.1  ~ 172.31.255.254
C (32 ) 192-223.0.0.0  [1100  0000] -[1101 1111]  私有地址C 192.168.0.1 ~ 192.168.255.254
D (16 ) 224-239.0.0.0  [1110  0000] -[1110 1111]  组播地址
E (15 ) 240-254.0.0.0  [1111  0000] -[1111 1110]
        1 	 1 	 1 	 1 	 1 	 1 	 1 	 1 
	0	0	0	0	0	0	0	0
 	128	64	32	16	8	4	2	1

----------------------------------------------------------
0.0.0.0
　　严格说来，0.0.0.0已经不是一个真正意义上的IP地址了。
它表示的是这样一个集合：所有不清楚的主机和目的网络。
这里的“不清楚”是指在本机的路由表里没有特定条目指明如何到达。
对本机来说，它就是一个“收容所”，所有不认识的“三无”人员，一律送进去。

255.255.255.255
　　限制广播地址。
对本机来说，这个地址指本网段内(同一广播域)的所有主机。
如果翻译成人类的语言，应该是这样：“这个房间里的所有人都注意了！”
这个地址不能被路由器转发。

224.0.0.1
　　组播地址，注意它和广播的区别。
从224.0.0.0到239.255.255.255都是这样的地址。
224.0.0.1特指所有主机，
224.0.0.2特指所有路由器。
这样的地址多用于一些特定的程序以及多媒体程序。
如果你的主机开启了IRDP(Internet路由发现协议，使用组播功能)功能，那么你的主机路由表中应该有这样一条路由
====================================================================
if [ $a -eq 1 -a $b -eq 1 ]----------# -a 并且      -o 或者  shell语言--------------]
vbr     :   inet 192.168.0  .254  --eth0
vbr1    :   inet 192.168.1  .254  --eth1
private2:   inet 192.168.2  .254  --eth2
----------------------------------------------------------------------------------------------------------------
1物理层【网卡】 2 数据链路层 【交换机】3 网络层 【路由器】4 传输层 【防火墙】 会话层 表示层 5 应用层 【计算机 软件平台】

Mac 地址第 8 位（bit）= 0时，
即 第 2 位 16进制数 是 0，2，4，6，8，A，C，E 时，
表示该Mac地址为 “ 单 播 ”地址【物理地址】；

Mac 地址 第 8 位(bit) = 1 时
即 第 2 位 16进制数 是  1，3，5，7，9，B，D，F 时，
表示该Mac地址为 “ 组 播 ” 地址【逻辑地址】；

Mac 地址 48 位都是 1 ，表示 广播地址；

一块物理网卡的地址一定是 单播地址【物理地址】【即 第 8 bit = 0 】

====   MAC 地址【也叫 物理地址，或者 硬件地址 】 由 12 位 16进制数 组成   ==============

== [2] 数据链路层 (交换机)  frame  数据帧 【链路层分组 称为 帧 】【建立逻辑连接、进行硬件地址寻址、差错校验等功能】 ==
== [2] 数据链路层 (交换机)  frame  数据帧 【数据链路层协议数据单元 以太网桢格式 】【链路层分组 称为 帧 】【建立逻辑连接、进行硬件地址寻址、差错校验等功能】  MAC头部  IP头部   TCP头部   上层数据  ==================

======== 以太网桢格式  =======================

                MAC头部  IP头部   TCP头部   上层数据
Destination Address  Source Address                          循环冗余校验 【Cyclic Redundancy Check 】
    DA                    SA               Type         Data               CRC
  目的地址                      源地址               类型/长度         数据                桢校验序列
6Byte[48bit]          6Byte【本机地址】  2Byte【16bit】 46~1500Byte       4Byte【32bit】

Mac 地址第 8 位（bit）= 0时，
即 第 2 位 16进制数 是 0，2，4，6，8，A，C，E 时，
表示该Mac地址为 “ 单 播 ”地址【物理地址】； 一对一

Mac 地址 第 8 位(bit) = 1 时
即 第 2 位 16进制数 是  1，3，5，7，9，B，D，F 时，
表示该Mac地址为 “ 组 播 ” 地址【逻辑地址】； 一对多

 ==========  Mac 地址 48 位都是 1 ，表示 广播地址； 一对所有 ==================

 (0F)16=(0000 1111)2  ---- 第8位 是1
   ff:ff:ff:ff:ff:ff

一块物理网卡的地址一定是 单播地址【物理地址】【即 第 8 bit = 0 】

[root@Va1 ~]# cat cpsed.txt
abbccc123
[root@Va1 ~]# md5sum  cpsed.txt  ## 校验值 --- 桢校验序列
525254c74379e30ff71457e5bcad27a1  cpsed.txt

[root@Va1 ~]# echo  abc123 > cpsed.txt 

[root@Va1 ~]# md5sum  cpsed.txt
2c6c8ab6ba8b9c98a1939450eb4089ed  cpsed.txt

帧检验序列即 frame check sequence,
让接收帧的网卡或接口判断是否发生了错误。

帧校验序列
判断过程如下：
发送网卡利用多项式计算，
称循环冗余校验（CRC),
将计算结果写入FCS字段，
接收方收到这个帧，对其做相同的CRC计算。
如果计算结果与接收的FCS字段相同，
则帧没有发生错误。
如果不同，
接收方就相信帧肯定发生了错误，并丢弃这个帧。

循环冗余校验(Cyclic Redundancy Check, CRC)

是一种 根据 网络数据包 或 电脑文件 等数据 产生
简短固定位数 校验码 的一种 散列函数，
主要用来 检测或校验 数据传输 或者保存后 可能出现的错误。
它是利用除法及余数的原理来作错误侦测的。





















ICMP【ping这个工具 使用的协议】  

IGMP【Internet Group Manage Protocol ： 9
Internet组管理协议，
提供internet网际多点 传送的功能,即将一个ip包拷贝给多个host，是一个尚处于实验阶段的协议】    



ARP【地址解析协议 Address Resolution Protocol

ARP协议就是将IP地址转换为MAC物理地址,

在 数据链路层 中传输的 数据报(Datagram) 只能识别MAC地址，

所以只能将IP地址转换为MAC物理地址再进行传输和定向；

ARP server先将目的地的IP地址转换成物理地址，
发出一个ARP request,
这个request是个没有指定目的地的广播，

当网络中有匹配的物理地址时，
就将这个物理地址返回，即ARP reply，

但ARP reply是有明确的目标地址的，是单播。
这时，数据包就有方向了，就可以继续向目的地进发了。
】 


ARP Address  Resolution  Protocol  地址转换协议，
在以太网中，所有对IP的访问最终都转化为对
网卡MAC地址的访问

[root@hiys ~]# cat  -n /etc/ethertypes  |sed  -n  '13p;28p'
    13	ARP		0806	ether-arp	#
    28	802_1Q		8100	8021q 1q 802.1q	dot1q # 802.1Q Virtual LAN tagged frame
电气和电子工程师协会
( IEEE，全称是Institute of Electrical and Electronics Engineers)
以太网 上 实现 中继可用的 2 种 封装类型 ISL （Cisco 私有协议）
IEEE  802.1q  协议

[root@hiys ~]# arp  -n
Address                  HWtype  HWaddress           Flags Mask            Iface
176.121.213.1            ether   88:f0:77:d1:6a:cd   C                     enp2s0
 
[root@hiys ~]# cat  /proc/net/arp  ##查看arp静态绑定地址
IP address       HW type     Flags       HW address            Mask     Device
176.121.213.1    0x1         0x2         88:f0:77:d1:6a:cd     *        enp2s0

[root@hiys ~]# ifconfig  enp2s0  |head   -4
enp2s0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 176.121.213.151  netmask 255.255.255.0  broadcast 176.121.213.255
        inet6 fe80::1e1b:dff:fe54:282  prefixlen 64  scopeid 0x20<link>
        ether 1c:1b:0d:54:02:82  txqueuelen 1000  (Ethernet)

[root@hiys ~]# tail   -2  /etc/resolv.conf
# Generated by NetworkManager
nameserver 176.121.0.100

用ifconfig修改MAC地址
ifconfig eth0 down //关闭网卡
ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE //修改MAC地址
ifconfig eth0 up    //启动网卡

启用和关闭ARP协议
ifconfig eth0:ws arp 
ifconfig eth0:ws -arp 

==================================
[root@hiys ~]# echo  "scale=1;2^7" |bc
128
[root@hiys ~]# echo  "scale=1;2^6" |bc
64

 0，2，4，6，8，A，C，E  ------ 二进制尾数 是 0
  1，3，5，7，9，B，D，F ------ 二进制尾数 是 1
一个 16进制数 等于 4 个 二进制数
48bit = 12 位 16进制数 = 6 Byte字节
1Byte=8bit

====   MAC 地址【也叫 物理地址，或者 硬件地址 】 由 12 位 16进制数 组成   ==============

== [2] 数据链路层 (交换机)  frame  数据帧 【链路层分组 称为 帧 】【建立逻辑连接、进行硬件地址寻址、差错校验等功能】 ==

Destination Address  Source Address                          循环冗余校验 【Cyclic Redundancy Check 】
    DA                    SA               Type         Data               CRC
  目的地址                      源地址               类型/长度         数据                桢校验序列
6Byte[48bit]          6Byte【本机地址】  2Byte【16bit】 46~1500Byte       4Byte【32bit】

Mac 地址第 8 位（bit）= 0时，
即 第 2 位 16进制数 是 0，2，4，6，8，A，C，E 时，
表示该Mac地址为 “ 单 播 ”地址【物理地址】；

Mac 地址 第 8 位(bit) = 1 时
即 第 2 位 16进制数 是  1，3，5，7，9，B，D，F 时，
表示该Mac地址为 “ 组 播 ” 地址【逻辑地址】；

Mac 地址 48 位都是 1 ，表示 广播地址；

一块物理网卡的地址一定是 单播地址【物理地址】【即 第 8 bit = 0 】

以太网 MAC地址-----用来 识别 一个 以太网上的 某个 单独的 设 备 或 一组设备

 |<--    24bit 【供应商标识】    -->|<-- 24bit 【供应商对网卡的唯一编号】-->|
 |  0000 0000    0000 0000   0000 0000   |  0000 0000      0000 0000     0000 0000 |
例如 00-06-1b -e3-93-6c  前24bit 是 00-06-1b  表明这是 IMB  供应商生产的设备
    00-0d-28-be-b6-42  前 24位 是  00-0d-28 表明这是 CISCO 供应商生产的设备

-------------------------------------------------------------------------------------------------------------------------------------
“ 单 播 ” 地址【物理地址】【即 第 8 bit = 0 】
“ 组 播 ” 地址【逻辑地址】【即 第 8 bit = 1 】
 0，2，4，6，8，A，C，E  ------ 二进制尾数 是 0
  1，3，5，7，9，B，D，F ------ 二进制尾数 是 1

   0      0      0     0     0      0      0      0 
   1      1       1     1      1      1      1      1
 2^7    2^6    2^5   2^4   2^3   2^2   2^1    2^0
  128    64     32     16     8     4      2      1
  128=(1000 0000)2
   64=(0100 0000)2
   32=(0010 0000)2
    16=(0001 0000)2
   15=(0000 1111)2 = (F)16
   14=(0000 1110)2 = (E)16
   13=(0000 1101)2 = (D)16
   12=(0000 1100)2 = (C)16
   11=(0000 1011)2 = (B)16
   10=(0000 1010)2 = (A)16
    9=(0000 1001)2 = (9)16
    8=(0000 1000)2
    7=(0000 0111)2
    6=(0000 0110)2
   0    1    2    3    4    5    6    7    8    9   10    11    12    13    14    15
  0   1   2   3   4   5   6   7   8   9   A   B    C   D    E    F

一个 16进制数 等于 4 个 二进制数
48bit = 12 位 16进制数 = 6 Byte
1Byte=8bit

   (0F)16=(0000 1111)2  ---- 第8位 是1
   (0E)16=(0000 1110)2 
   (0D)16=(0000 1101)2 --- 第8位 是1
   (0C)16=(0000 1100)2  
   (0B)16=(0000 1011)2 --- 第8位 是1
   (0A)16=(0000 1010)2   
    (09)16=(0000 1001)2   --- 第8位 是1
    (08)16=(0000 1000)2
    (07)16=(0000 0111)2   --- 第8位 是1
.................
    (01)16=(0000 0001)2   --- 第8位 是1
    (00)16=(0000 0000)2  --- 第8位 是0
总结
    0，2，4，6，8，A，C，E  ------ 二进制尾数 是 0
     1，3，5，7，9，B，D，F ------ 二进制尾数 是 1
一个 16进制数 等于 4 个 二进制数
48bit = 12 位 16进制数 = 6 Byte
1Byte=8bit

[root@hiys ~]# ifconfig  enp2s0  |head   -4
enp2s0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 176.121.213.151  netmask 255.255.255.0  broadcast 176.121.213.255
        inet6 fe80::1e1b:dff:fe54:282  prefixlen 64  scopeid 0x20<link>
        ether 1c:1b:0d:54:02:82  txqueuelen 1000  (Ethernet)

MAC 地址【也叫 物理地址，或者 硬件地址 】 由 12 位 16进制数 组成

一个 16进制数 等于 4 个 二进制数

48bit = 12 位 16进制数

----------------------------------------------------------------------
帧检验序列即 frame check sequence,
让接收帧的网卡或接口判断是否发生了错误。

帧校验序列
判断过程如下：
发送网卡利用多项式计算，
称循环冗余校验（CRC),
将计算结果写入FCS字段，
接收方收到这个帧，对其做相同的CRC计算。
如果计算结果与接收的FCS字段相同，
则帧没有发生错误。
如果不同，
接收方就相信帧肯定发生了错误，并丢弃这个帧。

循环冗余校验(Cyclic Redundancy Check, CRC)

是一种 根据 网络数据包 或 电脑文件 等数据 产生
简短固定位数 校验码 的一种 散列函数，
主要用来 检测或校验 数据传输 或者保存后 可能出现的错误。
它是利用除法及余数的原理来作错误侦测的。

以太网 MAC地址-----用来 识别 一个 以太网上的 某个 单独的 设 备 或 一组设备

 |<--    24bit 【供应商标识】    -->|<-- 24bit 【供应商对网卡的唯一编号】-->|
 |  0000 0000    0000 0000   0000 0000   |  0000 0000      0000 0000     0000 0000 |
例如 00-06-1b -e3-93-6c  前24bit 是 00-06-1b  表明这是 IMB  供应商生产的设备
    00-0d-28-be-b6-42  前 24位 是  00-0d-28 表明这是 CISCO 供应商生产的设备


 0，2，4，6，8，A，C，E  ------ 二进制尾数 是 0
  1，3，5，7，9，B，D，F ------ 二进制尾数 是 1
一个 16进制数 等于 4 个 二进制数
48bit = 12 位 16进制数 = 6 Byte字节
1Byte=8bit
 
====   MAC 地址【也叫 物理地址，或者 硬件地址 】 由 12 位 16进制数 组成   ==============

== [2] 数据链路层 (交换机)  frame  数据帧 【链路层分组 称为 帧 】【建立逻辑连接、进行硬件地址寻址、差错校验等功能】 ==

Destination Address  Source Address                          循环冗余校验 【Cyclic Redundancy Check 】
    DA                    SA               Type         Data               CRC
  目的地址                      源地址               类型/长度         数据                桢校验序列
6Byte[48bit]          6Byte【本机地址】  2Byte【16bit】 46~1500Byte       4Byte【32bit】

Mac 地址第 8 位（bit）= 0时，
即 第 2 位 16进制数 是 0，2，4，6，8，A，C，E 时，
表示该Mac地址为 “ 单 播 ”地址【物理地址】； 一对一

Mac 地址 第 8 位(bit) = 1 时
即 第 2 位 16进制数 是  1，3，5，7，9，B，D，F 时，
表示该Mac地址为 “ 组 播 ” 地址【逻辑地址】； 一对多

   Mac 地址 48 位都是 1 ，表示 广播地址； 一对所有

 (0F)16=(0000 1111)2  ---- 第8位 是1
   ff:ff:ff:ff:ff:ff

一块物理网卡的地址一定是 单播地址【物理地址】【即 第 8 bit = 0 】



十六进制数 0，2，4，6，8，A，C，E  ----- 二进制尾数 是 0
         1，3，5，7，9，B，D，F ------ 二进制尾数 是 1
验证
 1c:1b:0d:54:02:82  第2 位 16 进制数是 c ，Mac 地址第 8 位（bit）= 0 ，表示该Mac地址为 “ 单 播 ”地址
   52:54:00:37:78:11         第2 位 16 进制数是 2 ， Mac 地址第 8 位（bit）= 0，表示该Mac地址为 “ 单 播 ”地址
  52:54:00:f8:f9:d7   第2 位 16 进制数是 2 ， Mac 地址第 8 位（bit）= 0，表示该Mac地址为 “ 单 播 ”地址

一块物理网卡的地址一定是 单播地址【即 第 8 bit = 0 】

[root@hiys ~]# ifconfig |grep  ether
        ether 1c:1b:0d:54:02:82  txqueuelen 1000  (Ethernet)
        ether 52:54:00:37:78:11  txqueuelen 1000  (Ethernet)
        ether 52:54:00:f8:f9:d7  txqueuelen 1000  (Ethernet)
        ether 52:54:00:88:2b:9c  txqueuelen 1000  (Ethernet)
        ether 52:54:00:95:33:2e  txqueuelen 1000  (Ethernet)
        ether 52:54:00:45:6a:61  txqueuelen 1000  (Ethernet)
        ether 52:54:00:45:6a:61  txqueuelen 1000  (Ethernet)
        ether 52:54:00:ea:38:40  txqueuelen 1000  (Ethernet)
        ether 52:54:00:81:da:cc  txqueuelen 1000  (Ethernet)
        ether 52:54:00:c8:58:d3  txqueuelen 1000  (Ethernet)

一块物理网卡的地址一定是 单播地址【即 第 8 bit = 0 】

Switch#show mac-address-table 
          Mac Address Table
-------------------------------------------
Vlan    Mac Address       Type        Ports
----    -----------       --------    -----
   1    0002.17de.eedd    DYNAMIC     Fa0/1
   1    00d0.d3e3.bd19    DYNAMIC     Fa0/2

  0002.17de.eedd   第2 位 16 进制数是 0 ， Mac 地址第 8 位（bit）= 0，表示该Mac地址为 “ 单 播 ”地址
  00d0.d3e3.bd19   第2 位 16 进制数是 0 ， Mac 地址第 8 位（bit）= 0，表示该Mac地址为 “ 单 播 ”地址


以太网 MAC地址-----用来 识别 一个 以太网上的 某个 单独的 设 备 或 一组设备

 |<--    24bit 【供应商标识】    -->|<-- 24bit 【供应商对网卡的唯一编号】-->|
 |  0000 0000    0000 0000   0000 0000   |  0000 0000      0000 0000     0000 0000 |
例如 00-06-1b -e3-93-6c  前24bit 是 00-06-1b  表明这是 IMB  供应商生产的设备
    00-0d-28-be-b6-42  前 24位 是  00-0d-28 表明这是 CISCO 供应商生产的设备

-------------------------------------------------------------------------------------------------------------------------------------
“ 单 播 ” 地址【物理地址】【即 第 8 bit = 0 】
“ 组 播 ” 地址【逻辑地址】【即 第 8 bit = 1 】
 0，2，4，6，8，A，C，E  ------ 二进制尾数 是 0
  1，3，5，7，9，B，D，F ------ 二进制尾数 是 1

电气和电子工程师协会
( IEEE，全称是Institute of Electrical and Electronics Engineers)
是一个国际性的电子技术与信息科学工程师的协会，
是目前全球最大的非营利性专业技术学会，
其会员人数超过40万人，遍布160多个国家。
IEEE致力于电气、电子、计算机工程和与科学有关的领域的开发和研究，
在太空、计算机、电信、生物医学、电力及消费性电子产品
等领域已制定了900多个行业标准，
现已发展成为具有较大影响力的国际学术组织。
====================================

======= 互联网通信不仅要防止 ip冲突，也需要防止  mac冲突 ==========
## eth0，eth1，eth2……代表网卡一，网卡二，网卡三……  lo代表127.0.0.1，即localhost

[root@Va1 ~]# ifconfig  |grep ether
        ether 52:54:00:1d:9a:90  txqueuelen 1000  (Ethernet)
        ether 52:54:00:b1:bb:0d  txqueuelen 1000  (Ethernet)
        ether 52:54:00:7f:d5:df  txqueuelen 1000  (Ethernet)

[root@Va1 ~]# ifconfig eth2 |grep ether
        ether 52:54:00:7f:d5:df  txqueuelen 1000  (Ethernet)

[root@Va1 ~]# ifconfig 
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
..................
eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
......................

eth2: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.2.11  netmask 255.255.255.0  broadcast 192.168.2.255
        ether 52:54:00:7f:d5:df  txqueuelen 1000  (Ethernet)
.............................

[root@Va1 ~]# ifconfig eth2  down  ## 先把网卡eth2 关闭

[root@Va1 ~]# ifconfig eth2  hw  ether 52:54:00:7f:d5:ee ## 临时修改 MAC地址52:54:00:7f:d5:df 最后二位改成ee
[root@Va1 ~]# echo  $?
0
[root@Va1 ~]# ifconfig eth2  up  ## 把网卡eth2 打开

[root@Va1 ~]# ifconfig eth2 |grep ether  ## 查看 eth2 的MAC 地址已经改变
        ether 52:54:00:7f:d5:ee  txqueuelen 1000  (Ethernet)
[root@Va1 ~]# ifconfig  |grep ether
        ether 52:54:00:1d:9a:90  txqueuelen 1000  (Ethernet)
        ether 52:54:00:b1:bb:0d  txqueuelen 1000  (Ethernet)
        ether 52:54:00:7f:d5:ee  txqueuelen 1000  (Ethernet)

[root@Va1 ~]# reboot   ## 重启
[root@hiys ~]# ssh  -X  192.168.0.11
[root@Va1 ~]# ifconfig eth2 |grep ether  ## 重启后又恢复原先的MAC 地址了
        ether 52:54:00:7f:d5:df  txqueuelen 1000  (Ethernet)

[root@Va1 ~]# vim  /etc/sysconfig/network-scripts/ifcfg-eth2
[root@Va1 ~]# cat  /etc/sysconfig/network-scripts/ifcfg-eth2
NAME="eth2"
DEVICE="eth2"
ONBOOT=yes
NM_CONTROLLED="no"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL="no"
BOOTPROTO="static"
IPADDR="192.168.2.11"
NETMASK="255.255.255.0"
GATEWAY="192.168.0.254"
MACADDR=52:54:00:7f:d5:bb ## 最后这一行MAC是手动添加的【永久修改MAC地址】

[root@Va1 ~]# systemctl  restart  network  ## 重启网络

[root@Va1 ~]# ifconfig eth2 |grep ether  ## 查看 eth2 的MAC 地址最后二位 已经改变 52:54:00:7f:d5:bb
        ether 52:54:00:7f:d5:bb  txqueuelen 1000  (Ethernet)

[root@Va1 ~]# reboot
Connection to 192.168.0.11 closed by remote host.
Connection to 192.168.0.11 closed.
[root@hiys ~]# ssh  -X  192.168.0.11
[root@Va1 ~]# ifconfig eth2 |grep ether  ## 查看 eth2 的MAC 地址最后二位 已经永久改变 52:54:00:7f:d5:bb
        ether 52:54:00:7f:d5:bb  txqueuelen 1000  (Ethernet)
[root@Va1 ~]# ifconfig 
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.0.11  netmask 255.255.255.0  broadcast 192.168.0.255
        ether 52:54:00:1d:9a:90  txqueuelen 1000  (Ethernet)
................

eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.11  netmask 255.255.255.0  broadcast 192.168.1.255
        ether 52:54:00:b1:bb:0d  txqueuelen 1000  (Ethernet)
.........................

eth2: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.2.11  netmask 255.255.255.0  broadcast 192.168.2.255
        ether 52:54:00:7f:d5:bb  txqueuelen 1000  (Ethernet)
..............................

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1  (Local Loopback)
..........................

[root@Va1 ~]# 




 RARP【
     Reverse Address Resolution Protocol 反向地址转换协议，
允许局域网的物理机 从网关服务器的 ARP 表 或者缓存上 请求 转换 其 IP 地址,
也就是将MAC物理地址转换为IP地址

RARP协议是为了
获取无磁盘操作系统的IP地址而设计的。
具有本地磁盘的系统通常是从磁盘中的配置文件中读取IP地址的，

但是无盘系统无法这样操作，
所以就需要将MAC地址转换成IP地址了
】

无盘系统
比如有些网吧的机器本身没有硬盘，
而是通过局域网连接到服务器。
从这些机器上看到的磁盘实际上是共享的服务器的磁盘


计算机网络的功能
数据通信、资源共享、增加数据可靠性、提高系统处理能力

计算机网络的发展
60年代:分组交换
70-80年代:TCP/IP
90年后:Web技术

标准：一致同意的规则

ISO（国际标准化组织）在网络通信中创建了OSI（开放系统互联）模型。
ANSI（美国国家标准化局）
ITU-T（国际电信联盟-电信标准部）
IEEE（电气和电子工程师学会）

按照网络规模和使用范围分类为
WAN：广域网    LAN:局域网

网络设备
交换机、路由器
网络设备生产厂商：cisco思科，华为。

网络拓扑结构
1、点对点
两台设备之间有一条单独的连接，通常用于广域网连接
2、星型拓扑
1）优点：易于实现、易于网络扩展、易于故障排查
2）缺点：中心节点压力大、组网成本较高
3、网型拓扑结构
1）各个节点至少与其他两个节点相连
2）可靠性高、组网成本高

OSI
1、国际标准化组织（ISO）
开放系统互连参考模型OSI
OSI是一个开放式体系结构，它规定将网络分为七层
2、协议分层
为了降低网络设计的复杂性，将协议进行了分层设计

应用层：网络服务与最终用户的一个接口
表示层：数据的表现形式，如加密、压缩。
会话层：建立、管理、中止会话，例如断点续传。
传输层：定义传输数据的协议端口号，以及流控和差错校验。
网络层：进行逻辑地址寻址，实现不同网络之间的通信。
数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。
物理层：建立、维护、断开物理连接。

TCP/IP协议族的组成
应用层：HTTP、https、FTP、TFTP、SMTP 、SNMP、DNS
传输层：TCP、UDP
网络层：ICMP、IGMP、IP、ARP

PDU（协议数据单元）
传输层    段   segment
网络层    包   packet
数据链路层 帧  frame
物理层     比特 bit

相应层次的设备
应用层     计算机
传输层     防火墙
网络层     路由器
数据链路层 交换机
物理层     网卡

接口
以太网接口：
RJ-45水晶头
光纤接口：
FC 、ST、SC 
LC 窄体方形光纤接头（目前主流）
MT-RJ 

双绞线
1）双绞线分类：
屏蔽双绞线 （STP）
线外包裹一层金属网膜，用于电磁环境非常复杂的工业环境中 
非屏蔽双绞线 （UTP）
2）双绞线标准与分类 ：
Cat5五类双绞线，适用于100Mbps的网络
Cat 5e衰减更小，适用于100Mbps的网络，串扰更少，性能优于5类线 （超五类）
Cat 6适用于1000Mbps的网络
Cat 7适用于10000Mbps的网络
4、双绞线的连接规范
1）线序
T568A：
白绿、绿、白橙、蓝、白蓝、橙、白棕、棕
T568B：
白橙、橙、白绿、蓝、白蓝、绿、白棕、棕 
2）线缆的连接：
标准网线（直连线或直通线）：用于连接不同设备（A-A，B-B）[交换机 可以直接 用 直通线 ]
交叉网线：用于连接相同设备 （A-B）
全反线 ：不用于以太网的连接，主要用于计算机的串口和路由器或交换机的console（控制口）相连
例外情况：版本较新设备可以随意使用标准与交叉网线而不受限制，设备本身具备自动识别功能。

5、物理层设备
网卡、中继器

======================
交换机的工作模式：
Switch>用户模式
Switch>enable 
Switch#特权模式
Switch#configure  terminal 
Switch(config)#全局配置模式
Switch(config)#interface fastEthernet 0/1
Switch(config-if)#接口模式
exit返回上一模式
end直接退到特权模式

命令输入错误被卡住时同时按键盘ctrl+shift+6这三个按键

常用命令：
Switch(config)#hostname S1修改主机名为S1
Switch#show  running-config查看配置信息

配置enable明文口令
全局配置模式：enable  password  123
保存交换机的配置
特权： copy  running-config  startup-config
或 write
恢复设备出厂默认值
特权：erase  startup-config
重启：reload

设备配置的准备工作
空闲一段时间后，重回初始界面的问题
switch(config)#line con 0
switch(config-line)#exec-timeout 0 0

配置输出日志同步
Switch(config)#line console 0
Switch(config-line)#logging synchronous

禁用DNS查询
switch(config)#no ip domain-lookup


--------------------============================
数据传输速率的单位是bit/s 记作：bps

1m/s指的是是1024KB/s

[root@hiys ~]# echo  "scale=2;1000/8" |bc
125.00
8bit=1Byte
1Kb=1000bit=125Byte

[root@hiys ~]# echo  "scale=2;1000*1000/8" |bc
125000.00
[root@hiys ~]# echo  "scale=2;1000*1000/8/1024" |bc
122.07

1Mb=1000 000 bit= 125 000 Byte= 122.07 KByte

[root@hiys ~]# echo  "scale=2;100*1000*1000/8/1024" |bc
12207.03
[root@hiys ~]# echo  "scale=2;100*1000*1000/8/1024/1024" |bc
11.92
100Mb= 12207.03KByte = 11.92 MByte

Mbps 即 Milionbit pro second(百万位每秒)；
Kbps 即 Kilobit pro second（千位每秒）；
 bps 即 bit pro second（位每秒）；

速度单位，bit即比特，通常用b（小写）表示，指一位二进制位，Milionbit = 1000Kilobit = 1000 000 bit；

所以1Mbps=1000 000bps；

这是通常用来衡量带宽的单位，指每秒钟传输的二进制位数；

而通常软件上显示的速度则是指每秒种传输的字节数（Byte）通常用B（大写）表示；
MB即百万字节也称兆字节；
KB即千字节；
B即字节；
之间关系为1MB=1024KB=1024*1024B；
1B=8b；

数据传输速率的单位是bit/s 记作：bps

1m/s指的是是1024KB/s

[root@hiys ~]# echo  "scale=2;1000/8" |bc
125.00
8bit=1Byte
1Kb=1000bit=125Byte

[root@hiys ~]# echo  "scale=2;1000*1000/8" |bc
125000.00
[root@hiys ~]# echo  "scale=2;1000*1000/8/1024" |bc
122.07

1Mb=1000 000 bit= 125 000 Byte= 122.07 KByte

[root@hiys ~]# echo  "scale=2;100*1000*1000/8/1024" |bc
12207.03
[root@hiys ~]# echo  "scale=2;100*1000*1000/8/1024/1024" |bc
11.92
100Mb= 12207.03KByte = 11.92 MByte

[root@hiys ~]# echo  "scale=2;1000*1000*1000/8/1024/1024" |bc
119.20
1000Mb=  119.20 MB

======================================
DNS占用53号端口，同时使用TCP和UDP协议。

那么DNS在什么情况下使用这两种协议？
DNS在区域传输的时候使用TCP协议，
其他时候使用UDP协议。

DNS区域传输的时候使用TCP协议：

1.辅域名服务器会定时（一般3小时）
向主域名服务器进行查询以便了解数据是否有变动。
如有变动，会执行一次区域传送，进行数据同步。
区域传送使用TCP而不是UDP，
因为数据同步传送的数据量比一个请求应答的数据量要多得多。

2.TCP是一种可靠连接，保证了数据的准确性。

域名解析时使用UDP协议：

客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。
不用经过三次握手，
这样DNS服务器负载更低，响应更快。
理论上说，客户端也可以指定向DNS服务器查询时用TCP，
但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包
--------------------------------------------------------------------------------------

TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。

tcp协议和udp协议的差别 
TCP UDP 
是否连接 面向连接 面向非连接 
传输可靠性 可靠 不可靠 
应用场合 传输大量数据 少量数据 
速度 慢 快

TCP与UDP区别总结：

1.基于连接与无连接；
2.对系统资源的要求（TCP较多，UDP少）；
3.UDP程序结构较简单；
4.流模式与数据报模式 ；

1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接

2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付

3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;
UDP是面向报文的 
UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）

4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信

5、TCP首部开销20字节;UDP的首部开销小，只有8个字节
6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道
















 [4] 传输层     (防火墙) TPDU [是传输层协议数据单元,即 segment "数据段"]
 报文段， segment， 组成报文的每个分组。
 我们将 传输层分组 称为 报文段。
传输层实现报文交付。

分组(packet)
分组是在网络中传输的二进制格式的单元，
为了提供通信性能和可靠性，每个用户发送的数据会被分成多个更小的部分。
在每个部分的前面加上一些必要的控制信息组成的首部，
有时也会加上尾部，就构成了一个分组。

 [5] 应用层        |<----------协议--------->|    (计算机) APDU [是应用层协议数据单元]
数据报，Datagram，
通过网络传输的数据的基本单元，
包含一个报头（header）和数据本身，
其中报头描述了数据的目的地以及和其它数据之间的关系。
可以理解为传输数据的分组。
我们将通过网络传输的数据的基本单元称为数据报。

报文，message，
一般指完整的信息，
传输层实现报文交付。
我们将位于应用层的信息分组称为报文。
报文(message)
报文是网络中交换与传输的数据单元，
也是网络传输的单元。
报文包含了将要发送的完整的数据信息，
其长短不需一致。
报文在传输过程中会不断地封装成分组、包、帧来传输，
封装的方式就是添加一些控制信息组成的首部，
那些就是报文头。


3.数据包(data packet)
数据包是TCP/IP协议通信传输中的数据单元，
也称为“包”。
是指自包含的，带有足够寻址信息，可独立地从源主机传输到目的主机，
而不需要依赖早期的源主机和目的主机之间交换信息以及传输网络的数据包。
 
4.数据报(datagram)
面向无连接的数据传输，
其工作过程类似于报文交换。
采用数据报方式传输时，
被传输的分组称为数据报。
 
5.帧(frame)
帧是数据链路层的传输单元。
它将上层传入的数据添加一个头部和尾部，组成了帧。


由此可见，抓包抓到的是传输层的包，
所以packet，frame，Datagram，segment是存在于同条记录中的，

而frame，Datagram，segment是
基于所在协议层不同而取了不同的名字。
-----------------------------------------------------------------------------------------------------------------------------------------------

A (126) 1  -126.0.0.0  [0000  0001] -[0111 1111]  私有地址A 10.0.0.1    ~ 10.255.255.254
B (64 ) 128-191.0.0.0  [1000  0000] -[1011 1111]  私有地址B 172.16.0.1  ~ 172.31.255.254
C (32 ) 192-223.0.0.0  [1100  0000] -[1101 1111]  私有地址C 192.168.0.1 ~ 192.168.255.254
D (16 ) 224-239.0.0.0  [1110  0000] -[1110 1111]  组播地址
E (15 ) 240-254.0.0.0  [1111  0000] -[1111 1110]
        1 	 1 	 1 	 1 	 1 	 1 	 1 	 1 
	0	0	0	0	0	0	0	0
 	128	64	32	16	8	4	2	1

----------------------------------------------------------


国外 ：亚马逊AWS  微软 Azure,	IBM  SCE+,
国内：华为云 ，阿里云，百度云,腾讯云 .....

---------------------------------

阿里云应用架构
  基础架构  ------  弹性架构
              |
 大数据架构 ------应用开发架构

-----------------------------------------

阿里基础应用架构

SLB 负载均衡
       |  SLB负载均衡，流量入口
         |
        \/
  ECS 应用服务器 ------ ECS 运行应用，如CentOS6.3 服务器
         |
——————————
  |                  |
OSS对象存储    RDS 数据库    文件数据库【MYSQL6.5】

-----------------------------------------

阿里云 弹性 应用架构
   SLB 负载均衡
ECS   ECS   ECS  ECS  | ECS 自动伸缩
----------------------------------------|
    |                |
OSS对象存储   RDS 数据库   

-----------------------------
弹性云服务器 ECS  （ Elastic  Compute  Service ）
----------------------------------------------
      	  [4] 传输层        <----------协议--------->         传输层     (防火墙) TPDU [是传输层协议数据单元,即 segment "数据段"]
                TCP      UDP
                TCP头部     上层数据
3  接口
       	  [3] 网络层        <----------协议--------->         网络层     (路由器)  package 数据包
                ICMP  IGMP    IP   ARP   RARP
                IP头部   TCP头部     上层数据
2  接口
          [2] 数据链路层    <----------协议--------->         数据链路层 (交换机)  frame  数据帧
                MAC头部  IP头部   TCP头部   上层数据
--------------------------------------------------------------------------------
Virtual Server via Network Address Translation 
通过网络地址转换实现虚拟服务器

一、lvs介绍
Linux Virtual Server项目的目标 ：
使用集群技术和Linux操作系统实现一个高性能、高可用的服务器，
它具有很好的可伸缩性（Scalability）、
可靠性（Reliability）
和可管理性（Manageability）

LVS的英文全名为“Linux Virtual Server”，即Linux虚拟服务器，
是一个虚拟的四层交换器集群系统，
根据目标地址和目标端口实现用户请求转发，
本身不产生流量，
只做用户请求转发，
目前是负载均衡性能最好的集群系统。

二、lvs集群的类型：
lvs-nat：修改请求报文的目标IP,多目标IP的DNAT
lvs-dr：操纵封装新的MAC地址
lvs-tun：在原请求IP报文之外新加一个IP首部
lvs-fullnat：修改请求报文的源和目标IP

三、常用的名词
VS：Virtual Server，虚拟服务器，也称为Director
RS：Real Server(lvs)，真正的服务器，集群中各节点

OS ：【操作系统 Operating System 】

CIP：客户端IP,用户的IP

VIP：Director 虚拟服务器 向 外部 提供服务的IP
VIP: LVS虚拟的IP，用于用户访问

RIP：集群节点 真正的服务器 的 IP
RIP: Real Server 的IP

DIP：Director 虚拟服务器 与 RS真正的服务器 通信的IP
DIP: LVS Director调度器自已的IP

LIP: LVS Director调度器指定的local address 【内网ip地址】，FULLNAT模式下专用的

LB  ：负载调度器（Load Balancer）
STP 生成树
STP spanning tree
 

名称	缩 写	说明
虚拟IP地址（Virtual Ip Address）       VIP  
VIP为Director用于向客户端计算机提供服务的IP地址。比如：www.rsq.com域名就要解析到VIP上提供服务。

真实IP地址（Real Server Ip Address）   RIP	
在集群下面节点上使用的IP地址，物理IP地址。

Director的IP地址（Director Ip Address）   DIP 
Director用于连接内网络的IP地址，物理网卡上的IP地址。是负载均衡器上的IP

客户端主机IP地址（Client Ip Address)    CIP  
客户端用户计算机请求集群服务器的IP地址，该地址用作 发送给 集群的 请求的 源IP地址。

真实服务器（Real Server)  RS 
集群节点，为LVS内部的真实服务器。


常用的名词
VS：Virtual Server，虚拟服务器，也称为Director
RS：Real Server(lvs)，真正的服务器，集群中各节点

OS ：【操作系统 Operating System 】

CIP：客户端IP,用户的IP

VIP：Director 虚拟服务器 向 外部 提供服务的IP
VIP: LVS虚拟的IP，用于用户访问

RIP：集群节点 真正的服务器 的 IP
RIP: Real Server 的IP

DIP：Director 虚拟服务器 与 RS真正的服务器 通信的IP
DIP: LVS Director调度器自已的IP

LIP: LVS Director调度器指定的local address 【内网ip地址】，FULLNAT模式下专用的

LB  ：负载调度器（Load Balancer）
STP 生成树
STP spanning tree
 
LVS主要组成部分

1）负载调度器

英文名称叫"load balancer"
或者"Director"，
它是整个集群对外的前端机，
负责将客户的请求发送到一组服务器上执行
，而客户认为服务是来自一个IP地址
(我们可称之为虚拟IP地址VIP)上的。

2）服务器池

"server pool/ Realserver"，
是一组真正执行客户请求的服务器，
执行的服务一般有WEB、MAIL、FTP和DNS等。

3）共享存储

"shared storage"，
它为服务器池提供一个共享的存储区，
这样很容易使得服务器池拥有相同的内容，提供相同的服务。

LVS 的四种工作模式原理简介及优缺点

1、NAT模式

原理 
这个是 通 过  网 络 地 址 转 换  的方法来实现调度的。
首先 调度器 (LB)  接收到客户的请求数据包时（请求的目的IP为VIP），
根据调度算法 决定 将 请求 发送给 哪个后端的 真实服务器（RS）。
然后 调度 就把客户端 发送的请求数据包 的目标IP地址 及 端口 改成 后端真实服务器 的IP地址（RIP）,
这样 真实服务器（RS） 就能够接收到 客户的请求数据包了。 
真实服务器响应完请求后，
查看默认路由（NAT模式下我们需要把RS的默认路由设置为LB服务器 【DIP地址】。）
把响应后的数据包发送给LB,
LB再接收到响应包后，
把包的源地址改成虚拟地址（VIP）然后发送回给客户端。

1、LVS-NAT
原理简述
客户端向VIP发起请求连接，Director在经过调度之后选取RS，将本地端口与RS的端口做映射，
然后RS返还数据Director将数据返还客户端
-----------------------------------------------------
   -- - - - - -- - - - - -- - - -- - -- - -- - - -- - -- - -- - -
 LVS-NAT 只需要在LB上配置一个公网IP地址【即VIP地址】
            src-ip    -->     dst-ip

         cip(客户端IP) --> vip [ LVS虚拟的IP，用于用户访问(外网)]
dip[ Director 虚拟服务器 
  与RS真正的服务器 通信的IP(内网)]--> rip[集群节点真正的服务器IP(内网)]

   4、RS接受到请求后, 响应请求给 调度器LB, Director将响应报文RIP改为VIP, 
 DIP改为CIP, 响应给用户
  
vip [ LVS虚拟的IP，用于用户访问] -->  cip(客户端IP)
  - - - -- -- -- - -- - -- - -- -- -- - -- - -- - -- - -- - -
原理图简述：

1)客户端请求数据，目标IP为VIP

2)请求数据到达LB服务器，LB根据调度算法 将 目的地址 
修改为 RIP地址
及对应端口
（此RIP地址是根据调度算法得出的）
并在连接HASH表中记录下这个连接。

3)数据包从LB服务器到达RS服务器webserver，然后webserver进行响应。
Webserver的网关必须是 调度器 LB 【即VS：Virtual Server，虚拟服务器，也称为Director 的DIP地址】，
然后将数据返回给 调度器 LB服务器。

4)收到 真实服务器（RS） 的返回后的数据，
根据 连接HASH表 修改 源地址VIP&目标地址CIP，及对应端口80.
然后数据就从LB出发到达客户端。

5)客户端收到的就只能看到VIP信息。

NAT模式优缺点：

1、NAT技术将请求的报文和响应的报文都需要通过LB进行地址改写，
因此网站访问量比较大的时候
LB负载均衡调度器有比较大的瓶颈，
一般要求  最多  只能   10-20台 节点

2、只需要在LB上配置一个公网IP地址【即VIP地址】就可以了。

3、每台内部的节点服务器的网关地址
必须是
调度器LB的内网地址【DIP地址】。

4、NAT模式支持对IP地址和端口进行转换。
即用户请求的端口和真实服务器的端口可以不一致。
--------------------------------------------------------------------

2、TUN模式（隧道模式）【需要加密】

原理 
virtual server via ip tunneling模式:
采用NAT模式时，由于请求和响应的报文必须 通过 调度器 地址 重写，

当客户请求越来越多时，调度器处理能力将成为瓶颈。

为了解决这个问题，调度器把请求的 报文 通过 IP隧道 转发到真实的服务器。
真实的服务器 将 响应 处理后的数据 直接返回给客户端。
这样调度器就 只处理 请求 入站 报文，
由于一般网络服务应答数据比请求报文大很多，
采用VS/TUN模式后，集群系统的最大吞吐量可以提高10倍 【100-200台 节点】。

VS/TUN的工作流程图如下所示，
它和NAT模式不同的是，
它在 LB 和 RS 之间的传输 不用改写 IP地址。

而是把客户请求包封装在一个 IP tunnel里面，

然后发送给RS节点服务器，

节点服务器接收到之后解开IP tunnel后，
进行响应处理。
并且  直接 把 包 通过 自己的外网地址 发送给客户 不用经过LB服务器。 


Tunnel原理流程图: 
1）客户请求数据包，目标地址VIP发送到LB上。

2）LB接收到客户请求包，进行IP Tunnel封装。
即在原有的包头加上IP Tunnel的包头。
然后发送出去。

3）RS节点服务器根据IP Tunnel包头信息
（此时就有一种逻辑上的隐形隧道，只有LB和RS之间懂）
收到请求包，
然后解开IP Tunnel包头信息，
得到客户的请求包并进行响应处理。

4）响应处理完毕之后，RS服务器使用自己的出公网的线路，
将这个响应数据包发送给客户端。源IP地址还是VIP地址。

原理简述
客户端向VIP发送请求时，[源CIP；目的VIP]，
Director经过 调度 轮询 后 选择 一个RS 后 
使用 隧道技术 再次封装后 
向RS发送【源DIP；目的RIP [源CIP；目的VIP]】，
RS通过隧道收到请求后 拆开数据后 得到[源CIP；目的VIP]，
发现 目的IP 为 自己L0接口的IP 后 就把数据收下，
找到数据后 
将数据直接通过 公网 返还给客户端[源VIP；目的CIP]

特性
1.RIP、DIP、VIP必须为公网IP
2.RS网关不指向Director
3.请求报文由Director转发至RS，回复报文由RS直接发送至客户端
4.不支持端口映射
5.RS的OS【操作系统 Operating System 】 必须支持隧道技术
6.Director与RS、RS与RS可以跨网段、跨机房。

----------------------------------------------
      	  [4] 传输层        <----------协议--------->         传输层     (防火墙) TPDU [是传输层协议数据单元,即 segment "数据段"]
                TCP      UDP
                TCP头部     上层数据
3  接口
       	  [3] 网络层        <----------协议--------->         网络层     (路由器)  package 数据包
                ICMP  IGMP    IP   ARP   RARP
                IP头部   TCP头部     上层数据
2  接口
          [2] 数据链路层    <----------协议--------->         数据链路层 (交换机)  frame  数据帧
                MAC头部  IP头部   TCP头部   上层数据
--------------------------------------------------------------------------------

3、DR模式（直接路由模式）【性能最高,ip必须公网，费钱】

原理 
DR模式是通过 改写 请求报文的 目标MAC地址，

-------------------------------------------------------------------------------------------------------
  0002.17de.eedd   第2 位 16 进制数是 0 ， Mac 地址第 8 位（bit）= 0，表示该Mac地址为 “ 单 播 ”地址
  00d0.d3e3.bd19   第2 位 16 进制数是 0 ， Mac 地址第 8 位（bit）= 0，表示该Mac地址为 “ 单 播 ”地址

以太网 MAC地址-----用来 识别 一个 以太网上的 某个 单独的 设 备 或 一组设备

 |<--    24bit 【供应商标识】    -->|<-- 24bit 【供应商对网卡的唯一编号】-->|
 |  0000 0000    0000 0000   0000 0000   |  0000 0000      0000 0000     0000 0000 |
例如 00-06-1b -e3-93-6c  前24bit 是 00-06-1b  表明这是 IMB  供应商生产的设备
    00-0d-28-be-b6-42  前 24位 是  00-0d-28 表明这是 CISCO 供应商生产的设备

-------------------------------------------------------------------------------------------------------------------------------------
“ 单 播 ” 地址【物理地址】【即 第 8 bit = 0 】
“ 组 播 ” 地址【逻辑地址】【即 第 8 bit = 1 】
 0，2，4，6，8，A，C，E  ------ 二进制尾数 是 0
  1，3，5，7，9，B，D，F ------ 二进制尾数 是 1
----------------------------------------------------------------------------------------
将请求发给真实服务器的，
而真实服务器 响应后的处理结果 直接 返回给 客户端用户。
同TUN模式一样，
DR模式可以极大的提高集群系统的伸缩性。
而且DR模式 没有IP隧道 的开销，
对集群中的真实服务器 也没有  必须支持IP隧道协议 的要求。
但是要求 调度器LB 与 真实服务器RS 都有 一块网卡 连接到 同一物理网段上，
必须在 同一个局域网 环境。

DR模式是互联网使用比较多的一种模式。

-------------------------------------------
生成树协议STP使用哪两个参数来选举根网桥 ___D___。

A．网桥优先级和IP地址
B．链路速率和IP地址
C．链路速率和MAC地址
D．网桥优先级和MAC地址

STP  Spanning Tree Protocol生成树协议
网桥BID值最小的交换机 是网络中的根网桥
默认值32768 
网桥优先级取值范围0 ~ 65535

[root@Va1 ~]# echo  "2^7" |bc
128
[root@Va1 ~]# echo  "2^8" |bc
256
[root@Va1 ~]# echo  "2^10" |bc
1024
[root@Va1 ~]# echo  "2^11" |bc
2048

[root@Va1 ~]# echo  "2^12" |bc
4096
[root@Va1 ~]# echo  "2^13" |bc
8192
[root@Va1 ~]# echo  "2^14" |bc
16384
[root@Va1 ~]# echo  "2^15" |bc
32768
[root@Va1 ~]# echo  "2^16" |bc
65536
[root@Va1 ~]# 

  0     4096  8192  12288 16384 20480 24576 28672
  32768 36864 40960 45056 49152 53248 57344 61440
SW1(config)#spanning-tree vlan 1 priority 24576
SW1(config)#spanning-tree vlan 1 root primary

SW2(config)#spanning-tree vlan 1 priority  28672
SW2(config)#spanning-tree vlan 1 root secondary

Sw3#show spanning-tree
VLAN0001
  Bridge ID  Priority    32769  (priority 32768 sys-id-ext 1)
             Address     00D0.BA94.6627

Fa0/1            Altn BLK 19        128.1    P2p
Fa0/2            Root FWD 19        128.2    P2p
=====24576--primary  28672--secondary  32768 

SW2#show spanning-tree
VLAN0001
  Bridge ID  Priority    28673  (priority 28672 sys-id-ext 1)
Fa0/1            Root FWD 19        128.1    P2p
Fa0/2            Desg FWD 19        128.2    P2p

SW1#show spanning-tree
VLAN0001
Fa0/2            Desg FWD 19        128.2    P2p
Fa0/1            Desg FWD 19        128.1    P2p

============20480 24576 28672 {默认32768} 36864====
Switch(config)#hostname SW1
SW1(config)#line console 0
SW1(config-line)#exec-timeout 0 0
SW1(config-line)#logging synchronous

SW1(config)#spanning-tree vlan 1 priority 0001
% Bridge Priority must be in increments of 4096.
% Allowed values are:
  0     4096  8192  12288 16384 20480 24576 28672
  32768 36864 40960 45056 49152 53248 57344 61440
======================================================
STP 生成树
STP spanning tree
一、STP算法
　　IEEE802.1D标准定义了STP的生成树算法。该算法依赖于BID、路径开销和端口ID参数来做出决定。
　　1、BID（网桥ID）：
　　BID是生成树算法的第一个参数，BID决定了桥接网络的中心，称为根网桥或根交换机。
BID参数是一个8字节域。
前2个字节（10进制）称为“网桥优先级”，
后6个字节（16进制）是交换机的一个MAC地址。
网桥优先级用来衡量一个网桥的优先度，范围是0——65535，默认是32768。
思科交换机中的PVST+（每VLAN生成树）生成树协议使每个VLAN都有一个STP实例。
比较两个BID的大小的原则：
一是网桥优先级小的BID优先，二是如果网桥优先级相同，BID中的后六个字节的MAC小的则BID优先。
　　2、路径开销：
　　路径开销是生成树算法的第二个参数，决定到根网桥（根交换机）的路径。
　　通俗说，路径开销是用来衡量网桥之间的距离的远近的，其值是两个网桥之间某条路径上所有链路开销的总和。
　　路径开销与跳数无关。
　　路径开销决定到根网桥或根交换机的最佳路径，最小的路径开销是到根交换机的最佳路径。
　　路径开销的值的规律：带宽越大，STP开销越小。
　　3、端口ID：
   端口ID是生成树算法的第三个参数，也决定到根交换机的路径。
它由2个字节组成，包括“端口优先级”和“端口号”，各占8位。
　　端口优先级值从0——255，默认128；端口号包括256个。
　　端口ID大小的判定与BID大小的判定相同。

“根桥的选举”
就是在交换网络中所有运行STP协议的交换机上选举出一个唯一的根桥。
“根桥”是STP生成树的最顶端交换设备，
是STP生成树的“树根”。
根桥的选举依据是各桥的配置BPDU报文中BID（桥ID）字段值，
BID字段值最小的交换机将成为根桥。
而桥配置BPDU报文中BID字段共有8个字节，
即2个字节的桥优先级
和6个字节的桥背板MAC，
其中桥优先级的取值范围是0~65535，缺省值是32768。
在进行BID比较时，
先比较桥优先级，优先级值小的为根桥；
当桥优先级值相等时，再比较桥的背板MAC地址，MAC地址小的为根桥
--------------------- 
“指定端口的选举”
是在每一个物理网段的不同端口之间选举出一个指定端口。
“指定端口”与前面所说的“根端口”相对，
它可以理解为离下游设备最近的端口，
是本物理网段
（这里的“网段”是指一个交换机端口所连接的所有设备）
中唯一可以接收下游设备数据的端口。
它是依次根据以下三项条件来判定的：

（1）某网段到根桥的路径开销最小。
（2）接收数据时发送方（也就是链路对端的桥）的桥ID最小
（3）发送方端口ID最小
  （端口ID有16位，它是由8位端口优先级和8位端口编号组成的，
其中端口优先级的取值范围是0~240，缺省值是128，
可以修改，但必须是16的倍数）。

网络收敛后，
只有指定端口和根端口可以处于转发状态。
其他端口都是Blocking状态，不转发用户流量。
根桥的所有端口都是指定端口（除根桥物理上存在环路）。

-----------------------------------------------------
TTL的主要作用是
避免IP包在网络中的无限循环和收发[ 即 路由环路现象 ]
节省了网络资源，并能使IP包的发送者能收到告警消息。
TTL 是由发送主机设置的，
以防止数据包不断在IP互联网络上永不终止地循环。
转发IP数据包时，
要求路由器至少将 TTL 减小 1。
---------------------------------------------
三、常用的名词
VS：Virtual Server，虚拟服务器，也称为Director
RS：Real Server(lvs)，真正的服务器，集群中各节点

OS ：【操作系统 Operating System 】

CIP：客户端IP,用户的IP

VIP：Director 虚拟服务器 向 外部 提供服务的IP
VIP: LVS虚拟的IP，用于用户访问

RIP：集群节点 真正的服务器 的 IP
RIP: Real Server 的IP

DIP：Director 虚拟服务器 与 RS真正的服务器 通信的IP
DIP: LVS Director调度器自已的IP

LIP: LVS Director调度器指定的local address 【内网ip地址】，FULLNAT模式下专用的

LB  ：负载调度器（Load Balancer）

IDC（Internet Data Center）
TTL Time To Live
  该字段指定IP包 被 路由器 丢弃之前 允许通过的 最大网段数量
STP 生成树
STP spanning tree
 

/****************
IDC（Internet Data Center）.
     互联网数据中心，
通常可以被定义为一种拥有完善的设备
（包括高速互联网接入宽带，高性能局域网络，安全可靠的机房环境等），
 专业化的管理，完善的应用级服务平台．

 IDC运营商为ICP，企业，媒体和各类网站提供大规模，高质量，安全可靠的
 专业化服务器托管，空间租用，网络批发宽带以及ASP，EC等业务．

 数据中心在大型主机时代就已出现，
 那时是为了通过托管，外包或集中方式向企业提供大型主机的管理维护．
 以达到专业化管理和降低运行成本的目的．

 IDC是对入驻（HOSTING）企业，商户或网站服务器群托管的场所；
 是各种模式电子商务赖以安全运做的基础设施，
 也是支持企业及其商业联盟其分销商，供应商．客户等，
 事实价值链管理的平台．
IDC有两个非常重要的显著特征
 在网络中的位置 和 总的网络 带宽容量，
它购成了网络基础资源的一部分，
就象骨干网、接入网一样，
它提供了一种高端的数据传输（dATA deLIVERY）的业务，提供高速接入的服务。

LVS-FULLNAT转发模式

在大规模的网络下，在淘宝的业务中，官方LVS满足不了需求；原因有3点， 
1) 刚才讲三种转发模式，部署成本比较高； 
2) 和商用的负载均衡比，LVS没有DDOS防御攻击功能； 
3) 主备部署模式，性能无法扩展；一个VIP下的流量特别大怎么办？

FULLNAT原理： 
FULLNAT转发数据包是类似NAT模式，

IN和OUT数据包都是经过LVS；
唯一的区别：后端RealServer 或者交换机不需要做任何配置。 

FULLNAT是一种新的转发模式
– 主要思想：引入local address（内网ip地址），
src-ip      --> dst-ip
cip(客户端IP)--> vip [ LVS虚拟的IP，用于用户访问]
                    [ Director虚拟服务器向外部提供服务的IP]

   cip-vip 转换为
   lip->rip，

src-ip      --> dst-ip
cip(客户端IP)--> vip [ LVS虚拟的IP，用于用户访问]
lip [ LVS Director调度器指定的local address 
       (内网ip地址)，FULLNAT模式下专用的 ] -----> rip[集群节点 真正的服务器 的 IP]

而 lip和rip均为IDC内网ip，可以跨vlan通讯；

FULLNAT：NAT模型的改进版

特性：

实现RS间跨VLAN通信，是NAT模式的改进版；

默认内核不支持，需重新编译内核 【 最难点 】，才能使用；

适用场景：

内网服务器跨VLAN的负载分担

====================
dpdk是 intel 公司发布的一款数据包转发处理套件. 
它运行于linux userspace。
这组套件包括了linux 进程所需要的大部分组件。

但缺少一个传统的tcp/ip 协议栈。
其他应用程序没办法方便的通过dpdk对外通信。
可以移植一个TCP/IP协议栈到dpdk。

DPDK(因特尔intel内核,tcp/ip协议栈重写) +  LVS  +  FULLNAT  +  OSPF
--------------------------------------------------------------
DPVS(开源,小米公司)= DPDK  +  LVS  +  FULLNAT
DPVS + OSPF  主流大型架构
---------------------------------------------------------------------------------

常用的名词
VS：Virtual Server，虚拟服务器，也称为Director
RS：Real Server(lvs)，真正的服务器，集群中各节点

OS ：【操作系统 Operating System 】

CIP：客户端IP,用户的IP

VIP：Director 虚拟服务器 向 外部 提供服务的IP
VIP: LVS虚拟的IP，用于用户访问

RIP：集群节点 真正的服务器 的 IP
RIP: Real Server 的IP

DIP：Director 虚拟服务器 与 RS真正的服务器 通信的IP
DIP: LVS Director调度器自已的IP

LIP: LVS Director调度器指定的local address 【内网ip地址】，FULLNAT模式下专用的

LB  ：负载调度器（Load Balancer）

IDC（Internet Data Center）
TTL Time To Live
  该字段指定IP包 被 路由器 丢弃之前 允许通过的 最大网段数量
STP 生成树
STP spanning tree
 -----------------------------------------

============================
  - - -- LVS-NAT  - -- cip vip(dip) (rip) - -- -
src-ip  -->   dst-ip
cip     -1->   vip(dip内)
dip(内) -2->   rip(内)
(rip内) -3->  (dip内)vip
vip     -4->  cip
-------------------------------------------------------------------------

--------------------------------------------------
 FULLNAT工作流程 cip vip(lip) (dip)[伪装公网vip] (rip) ---

    src-ip    -->     dst-ip

  cip(客户端IP) --1-> vip(公网)[lip(内网)，FULLNAT模式]

               OSPF
  注意 这一步可以进行路由转发, 链接多个子服务器 lvs-nat模式

lip(内网ip地址) --2-> dip(内网兼伪装公网vip)
dip(内网兼伪装公网vip) -3->  rip(内)
 (rip内)       --4->  (dip内)伪装公网vip
伪装公网vip     --5->  cip

=============================

FULLNAT工作流程
    1、引入LIP(local address)，可以配置多个，也可以使用DIP
    2、客户端请求VIP 
      CIP-VIP --> LIP-RIP
   3、Director接受到请求,根据调度算法得出转发的RS,
 将CIP修改为LIP, VIP修改为对应RIP, 
 转发给RS 
      LIP-RIP -->  CIP - VIP
   -- - - - - --  FULLNAT工作流程 -   -- - ---

            src-ip    -->     dst-ip

         cip(客户端IP) --1-> vip [ LVS虚拟的IP，用于用户访问(公网)]

         LB  ：负载调度器（Load Balancer）
     注意 这一步可以进行路由转发, 链接一个子服务器 lvs-nat模式

lip [ LVS Director父调度器指定的local address 
  (内网ip地址)，FULLNAT模式下专用的 ] --2-> dip[ Director 虚拟子服务器 
                                         与RS真正的服务器 通信的IP(内网兼公网)]

   dip[ Director虚拟 子服务器 
  与RS真正的服务器 通信的IP(内网)]-3-> rip[集群节点真正的服务器IP(内网)]

   4、RS接受到请求后, 响应请求给DIP, Director将响应报文RIP(内网)改为VIP, 
 DIP(内网兼公网)改为CIP(公网), 响应给用户
  
vip [ LVS虚拟的IP，用于用户访问] --4->  cip(客户端IP)
  - - - -- -- -- - -- - -- - -- -- -- - -- - -- - -- - -- - -
======================================
   -- - - -  - - - -- LVS-NAT  - -- - --   -- - -
src-ip  -->   dst-ip
cip     -->   vip(dip内)
dip(内) -->   rip(内)
(rip内) -->  (dip内)vip
vip     -->  cip

 LVS-NAT 只需要在LB上配置一个公网IP地址【即VIP地址】
            src-ip    -->     dst-ip

         cip(客户端IP) -1-> vip [ LVS虚拟的IP，用于用户访问(外网)]
dip[ Director 虚拟服务器 
  与RS真正的服务器 通信的IP(内网)]-2-> rip[集群节点真正的服务器IP(内网)]

   4、RS接受到请求后, 响应请求给 调度器LB, Director将响应报文RIP改为VIP, 
 DIP改为CIP, 响应给用户
  
vip [ LVS虚拟的IP，用于用户访问] -3->  cip(客户端IP)
  - - - -- -- -- - -- - -- - -- -- -- - -- - -- - -- - -- - -
==============================================

实现FULLNAT模型需要注意的:
    1、请求报文和响应报都要通过Director
    【 LIP-RIP 】
   2、RIP接收到的请求报文的源地址为LIP,目标地址为RIP
    3、支持端口映射
    4、为了保证应用透明性，通过tcp option传递client ip给RealServer(TOA).
       要RS读取数据包中的tcp option来记录client ip
    5、和NAT比，正常转发性能下降<10%



			             OSI参考模型(七层框架)

          [5] 应用层        |<----------协议--------->|	        应用层     (计算机) APDU [是应用层协议数据单元]
                HTTP  FTP  TFTP  SMTP  SNMP  DNS
                    上层数据
6  接口      
             表示层         |-----------协议-----------|         表示层              PPDU [是表示层协议数据单元]
5  接口
 	     会话层         |-----------协议-----------|         会话层              SPDU [是会话层协议数据单元]
4  接口      
      	  [4] 传输层        <----------协议--------->         传输层     (防火墙) TPDU [是传输层协议数据单元,即 segment "数据段"]
                TCP      UDP
                TCP头部     上层数据
3  接口
       	  [3] 网络层        <----------协议--------->         网络层     (路由器)  package 数据包
                ICMP  IGMP    IP   ARP   RARP
                IP头部   TCP头部     上层数据
2  接口
          [2] 数据链路层    <----------协议--------->         数据链路层 (交换机)  frame  数据帧
                MAC头部  IP头部   TCP头部   上层数据
1  接口   
          [1] 物理层	    <----------协议--------->	        物理层     (网卡)    bit   比特流

          层            主机A                              主机B          数据单元
-----------------------------------------------------------------------------------------------------------------------------------------------




====================
dpdk是 intel 公司发布的一款数据包转发处理套件. 
它运行于linux userspace。
这组套件包括了linux 进程所需要的大部分组件。

但缺少一个传统的tcp/ip 协议栈。
其他应用程序没办法方便的通过dpdk对外通信。
可以移植一个TCP/IP协议栈到dpdk。

DPDK(因特尔intel内核,tcp/ip协议栈重写) +  LVS  +  FULLNAT  +  OSPF
--------------------------------------------------------------
DPVS(开源,小米公司)= DPDK  +  LVS  +  FULLNAT
DPVS + OSPF  主流大型架构
---------------------------------------------------------------------------------

常用的名词
VS：Virtual Server，虚拟服务器，也称为Director
RS：Real Server(lvs)，真正的服务器，集群中各节点

OS ：【操作系统 Operating System 】

CIP：客户端IP,用户的IP

VIP：Director 虚拟服务器 向 外部 提供服务的IP
VIP: LVS虚拟的IP，用于用户访问

RIP：集群节点 真正的服务器 的 IP
RIP: Real Server 的IP

DIP：Director 虚拟服务器 与 RS真正的服务器 通信的IP
DIP: LVS Director调度器自已的IP

LIP: LVS Director调度器指定的local address 【内网ip地址】，FULLNAT模式下专用的

LB  ：负载调度器（Load Balancer）

IDC（Internet Data Center）
TTL Time To Live
  该字段指定IP包 被 路由器 丢弃之前 允许通过的 最大网段数量
STP 生成树
STP spanning tree
 -----------------------------------------

============================
  - - -- LVS-NAT  - -- cip vip(dip) (rip) - -- -
src-ip  -->   dst-ip
cip     -1->   vip(dip内)
dip(内) -2->   rip(内)
(rip内) -3->  (dip内)vip
vip     -4->  cip
-------------------------------------------------------------------------

--------------------------------------------------
 FULLNAT工作流程 cip vip(lip) (dip)[伪装公网vip] (rip) ---

    src-ip    -->     dst-ip

  cip(客户端IP) --1-> vip(公网)[lip(内网)，FULLNAT模式]

               OSPF
  注意 这一步可以进行路由转发, 链接多个子服务器 lvs-nat模式

lip(内网ip地址) --2-> dip(内网兼伪装公网vip)
dip(内网兼伪装公网vip) -3->  rip(内)
 (rip内)       --4->  (dip内)伪装公网vip
伪装公网vip     --5->  cip

=============================

[root@room9pc01 ~]# ssh -o StrictHostKeyChecking=no  -X  192.168.2.15
root@192.168.2.15's password: 1
Last login: Fri Dec 21 15:39:44 2018 from 192.168.2.254
[root@Va5 ~]# ifdown  eth0
[root@Va5 ~]# ifdown  eth1
[root@Va5 ~]# ifconfig  |grep  'inet '
        inet 192.168.2.15  netmask 255.255.255.0  broadcast 192.168.2.255
................
[root@Va5 ~]# ping  114.114.114.114
connect: 网络不可达
[root@Va5 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
169.254.0.0     0.0.0.0         255.255.0.0     U     1004   0        0 eth2
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 eth2
192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0

[root@Va5 ~]# route  add  default  gw  192.168.2.14

[root@Va5 ~]# ping  114.114.114.114
PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data.
^C
--- 114.114.114.114 ping statistics ---
11 packets transmitted, 0 received, 100% packet loss, time 9999ms

[root@Va5 ~]# 
------------------------------  Va4 -------------------

[root@Va4 ~]# service  iptables  status  |grep -io active
Redirecting to /bin/systemctl status iptables.service
Active
active

[root@Va4 ~]# iptables  -t nat  -nL
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         
RETURN     all  --  192.168.122.0/24     224.0.0.0/24        
RETURN     all  --  192.168.122.0/24     255.255.255.255     
MASQUERADE  tcp  --  192.168.122.0/24    !192.168.122.0/24     masq ports: 1024-65535
MASQUERADE  udp  --  192.168.122.0/24    !192.168.122.0/24     masq ports: 1024-65535
MASQUERADE  all  --  192.168.122.0/24    !192.168.122.0/24   
 
[root@Va4 ~]# iptables  -t  nat  -I  POSTROUTING  -s  192.168.2.0/24 \
> -o  eth0  -j  MASQUERADE

[root@Va4 ~]# iptables  -t  nat  -nL  POSTROUTING  
Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         
MASQUERADE  all  --  192.168.2.0/24       0.0.0.0/0           
RETURN     all  --  192.168.122.0/24     224.0.0.0/24        
RETURN     all  --  192.168.122.0/24     255.255.255.255     
MASQUERADE  tcp  --  192.168.122.0/24    !192.168.122.0/24     masq ports: 1024-65535
MASQUERADE  udp  --  192.168.122.0/24    !192.168.122.0/24     masq ports: 1024-65535
MASQUERADE  all  --  192.168.122.0/24    !192.168.122.0/24 
   
[root@Va4 ~]# 
-------------------------  Va5 -------------------
[root@Va5 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.2.14    0.0.0.0         UG    0      0        0 eth2
169.254.0.0     0.0.0.0         255.255.0.0     U     1004   0        0 eth2
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 eth2
192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0
[root@Va5 ~]# ping  114.114.114.114  -c4
PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data.
64 bytes from 114.114.114.114: icmp_seq=1 ttl=73 time=24.2 ms
64 bytes from 114.114.114.114: icmp_seq=2 ttl=74 time=24.5 ms
64 bytes from 114.114.114.114: icmp_seq=3 ttl=67 time=24.8 ms
64 bytes from 114.114.114.114: icmp_seq=4 ttl=70 time=25.3 ms

--- 114.114.114.114 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3005ms
rtt min/avg/max/mdev = 24.227/24.745/25.392/0.456 ms
[root@Va5 ~]# 


物理机上查找上网用的网卡
打开路由转发
sysctl -w net.ipv4.ip_forward=1
设置伪装上网
[root@room9pc19 docker]# iptables -t nat -I POSTROUTING -s 192.168.4.0/24 -o enp2s0 -j MASQUERADE

在虚拟机里面设置默认路由
ip route replace default via 192.168.4.254

模拟 docker 端口绑定转发
iptables -t nat -I PREROUTING -d 192.168.4.10 -p tcp --dport 8080 -i eth0 -j DNAT --to 172.17.0.3:80
docker  run -d -p 8080:80 nginx









