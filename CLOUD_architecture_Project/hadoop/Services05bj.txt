
rsync同步操作

• 命令用法
– rsync [选项...] 源目录 目标目录

• 同步与复制的差异
– 复制:完全拷贝源到目标
– 同步:增量拷贝,只传输变化过的数据


• rsync操作选项
– -n:测试同步过程,不做实际修改
– --delete:删除目标文件夹内多余的文档
– -a:归档模式,相当于-rlptgoD
– -v:显示详细操作信息
– -z:传输过程中启用压缩/解压

• 本地同步
– rsync [选项...] 本地目录1 本地目录2

– rsync [选项...] 本地目录1/ 本地目录2

[root@svr7 ~]# mkdir /todir
[root@svr7 ~]# rsync -a /boot /todir  //同步整个文件夹
[root@svr7 ~]# rsync -a /boot/ /todir/  //只同步目录下的数据



[root@svr7 ~]# mkdir /dir
[root@svr7 ~]# mkdir /test
[root@svr7 ~]# echo 123 > /dir/1.txt
[root@svr7 ~]# echo 123 > /dir/2.txt
[root@svr7 ~]# ls /dir/

[root@svr7 ~]# ls /test/

[root@svr7 ~]# rsync -avz /dir   /test
[root@svr7 ~]# ls /test/

[root@svr7 ~]# rsync -avz /dir/   /test
[root@svr7 ~]# ls /test/

[root@svr7 ~]# echo 123 > /dir/3.txt
[root@svr7 ~]# rsync -avz /dir/   /test
[root@svr7 ~]# ls /test/
#######################################################
[root@svr7 ~]# rsync -avz --delete  /dir/  /test/
[root@svr7 ~]# ls /dir
[root@svr7 ~]# ls /test

[root@svr7 ~]# touch /test/abc.txt
[root@svr7 ~]# ls /dir
[root@svr7 ~]# ls /test
[root@svr7 ~]# rsync -avz --delete  /dir/  /test/
[root@svr7 ~]# ls /dir
[root@svr7 ~]# ls /test

[root@svr7 ~]# touch /dir/4.txt
[root@svr7 ~]# rsync -avz --delete  /dir/  /test/
[root@svr7 ~]# ls /dir
[root@svr7 ~]# ls /test

######################################################
rsync+SSH远程同步
   
• 与远程的 SSH目录保持同步
– 下行:rsync [...]   user@host:远程目录    本地目录
– 上行:rsync [...]   本地目录    user@host:远程目录

虚拟机A:
# ls /opt
# rsync -avz --delete  /opt/   root@192.168.4.207:/opt/


虚拟机B:
# ls /opt

######################################################
实现实时同步

一  ssh无密码验证
虚拟机A:
1.生成公钥 私钥 
[root@svr7 ~]# ssh-keygen       #一路回车
[root@svr7 ~]# ls /root/.ssh/

2.传递公钥 到对方机器
[root@svr7 ~]# ssh-copy-id  root@192.168.4.207

3.验证
# rsync -avz --delete /opt/  root@192.168.4.207:/opt/
 

二 部署inotify-tools工具软件,监控目录内容变化

真机的操作:
# scp /root/桌面/tools.tar.gz       root@192.168.4.7:/root/

虚拟机A:

1.安装gcc与make开发工具
2.tar解包
# mkdir /nsd
# tar -xf /root/tools.tar.gz -C /nsd
# tar -xf /nsd/tools/inotify-tools-3.13.tar.gz -C  /

3.运行./configure进行配置
[root@svr7 ~]# cd /inotify-tools-3.13/
[root@svr7 inotify-tools-3.13]# ./configure
4.执行make 编译
5.执行make  install 安装
6.验证 
[root@svr7 /]# ls /usr/local/bin/inotifywait


inotifywait监控用法

– -m,持续监控(捕获一个事件后不退出)
– -r,递归监控、包括子目录及文件
– -q,减少屏幕输出信息
– -e,指定监视的 modify、move、create、delete、attrib 等事件类别



三   书写监控的脚本

     死循环功能:持续不断做一件重复的事情

   for  i  in  {1..20}     #有次数的循环
    do
             重复的事情
    done


    while  [ 1 -eq 1 ]
    do
             重复的事情
    done



[root@svr7 /]# vim  /root/rsync.sh

 #!/bin/bash
 while inotifywait -rqq /opt 
 do
  rsync -az --delete /opt/  root@192.168.4.207:/opt/ 
 done

[root@svr7 /]# chmod +x  /root/rsync.sh

[root@svr7 /]# /root/rsync.sh

[root@svr7 /]# killall rsync.sh

######################################################





































































