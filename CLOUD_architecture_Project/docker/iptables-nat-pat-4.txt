
https://www.jianshu.com/
============================================================
TCP(Transmission Control Protocol)　传输控制协议
===================================================

			             OSI参考模型(七层框架)

          [5] 应用层        |<----------协议--------->|	        应用层     (计算机) APDU [是应用层协议数据单元]【网络服务与最终用户的一个接口】
                HTTP  FTP  TFTP  SMTP【邮件协议】  SNMP【Simple Network Management Protocol 简单网络管理协议，SNMP就是为了让别人能够获得路由器上的统计数据而约定好的数据交流的规则】  DNS
                    上层数据
6  接口      
             表示层         |-----------协议-----------|         表示层              PPDU [是表示层协议数据单元]【数据的表现形式，如加密、压缩】
5  接口
 	     会话层         |-----------协议-----------|         会话层              SPDU [是会话层协议数据单元]【建立、管理、中止会话，例如断点续传】
4  接口      
      	  [4] 传输层        <----------协议--------->         传输层     (防火墙) TPDU [是传输层协议数据单元,即 segment "数据段"]【定义传输数据的协议端口号，以及流控和差错校验】
                TCP      UDP
                TCP头部     上层数据
3  接口
       	  [3] 网络层        <----------协议--------->         网络层     (路由器)  package 数据包 【用抓包工具抓到的一条条记录就是包】【进行逻辑地址寻址，实现不同网络之间的通信】
                ICMP【ping这个工具 使用的协议】  IGMP【Internet Group Manage Protocol ： Internet组管理协议，提供internet网际多点 传送的功能,即将一个ip包拷贝给多个host，是一个尚处于实验阶段的协议】    IP   ARP【地址解析协议 Address Resolution Protocol】   RARP【Reverse Address Resolution Protocol 反向地址转换协议，允许局域网的物理机 从网关服务器的 ARP 表 或者缓存上 请求转换 其 IP 地址】
                IP头部   TCP头部     上层数据
2  接口
          [2] 数据链路层    <----------协议--------->         数据链路层 (交换机)  frame  数据帧 【数据链路层协议数据单元 以太网桢格式 】【链路层分组 称为 帧 】【建立逻辑连接、进行硬件地址寻址、差错校验等功能】
                MAC头部  IP头部   TCP头部   上层数据
1  接口   
          [1] 物理层	    <----------协议--------->	        物理层     (网卡)    bit   比特流  【建立、维护、断开物理连接】

          层            主机A                              主机B          数据单元
-------------------------------------------------------------------------------------------------------------------------------------
[root@Va4 ~]# arp  -n
Address                  HWtype  HWaddress           Flags Mask            Iface
192.168.2.16             ether   52:54:00:75:7c:f3   C                     eth2
192.168.0.13             ether   52:54:00:0e:3b:b5   C                     eth0
192.168.0.254            ether   52:54:00:df:77:2b   C                     eth0
192.168.0.12             ether   52:54:00:d2:64:8d   C                     eth0
192.168.0.11             ether   52:54:00:a3:df:0b   C                     eth0
192.168.1.15             ether   52:54:00:fd:9f:ea   C                     eth1
[root@Va4 ~]#
--------------------------------------------------------------------------------
TCP/UDP常用端口号
默认端口号　　　　　　服务　　　　　　　　　　说明

21　　　　　　　　　　FTP　　　　　　　　　　文件传输协议（英文：File Transfer Protocol，缩写：FTP）
                                                 是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式。
                                                 它属于网络传输协议的应用层。

22　　　　　　　　　　SSH　　　　　　　　　 Secure Shell（缩写为SSH），
                                                 由IETF的网络工作小组（Network Working Group）所制定；
                                      SSH为一项创建在应用层和传输层基础上的安全协议，
                                                 为计算机上的Shell（壳层）提供安全的传输和使用环境。

23　　　　　　　　　　Telnet　　　　　　　  Telnet协议是一种应用层协议，使用于互联网及局域网中，
                                                 使用虚拟终端机的形式，提供双向、以文字字符串为主的交互功能。
                                                 属于TCP/IP协议族的其中之一，
                                                 是Internet远程登录服务的标准协议和主要方式，
                                                 常用于网页服务器的远程控制，可供用户在本地主机运行远程主机上的工作。

80　　　　　　　　　　HTTP　　　　　　　　  超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）
                                                是互联网上应用最为广泛的一种网络协议。
                                                设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。

443　　　　　　　　　  HTTPS　　　　　　　超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，
                                               常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。
                                               在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来加密数据包。
                                     HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。

TCP     协议名称          端口号     套接字        作用
Telnet  专司终端模拟      23        Tcp 23      它为用户提供了在本地计算机上完成远程主机工作的能力
SMTP    简单邮件传输协议  25        Tcp 25      它帮助每台计算机在发送或中转信件时找到下一个目的地
HTTP    超文本传输协议    80        Tcp 80      超文本传输协议，是我们浏览网页、看在线视频、听在线音乐等必须遵循的规则
FTP     文件传输协议      20、21    Tcp 20      文件传输协议 FTP [ File Transfer Protocol ]使得主机间可以共享文件
                                        和Tcp21
DNS     域名系统          53        Tcp 53      因特网上作为域名和IP地址相互映射的一个分布式数据库，
                                                      能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串
HTTPS   超文本传输安全协议 443     Tcp 443     HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版
SSH     安全壳协议        22        Tcp 22	SSH  为建立在应用层和传输层基础上的安全协议
POP3    邮局协议版本3    110        Tcp 110     本协议主要用于支持使用客户端远程管理在服务器上的电子邮件
NTP     网络时间协议     123        Tcp 123     它是用来同步网络中各个计算机时间的协议
IMAP4 第四版因特网信息存取协议 143  Tcp 143     IMAP4协议与POP3协议一样也是规定个人计算机如何访问互联网上的邮件服务器进行收发邮件的协议，
                                                       但是IMAP4协议同POP3协议相比更高级
--------------------------------------------------------------------------------------
UDP         协议名称             端口号    套接字       作用
SNMP        简单网络管理协议     161       UDP 161    该协议能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况
TFTP        简单文件传输协议     69        UDP 69     TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，
                                                              提供不复杂、开销不大的文件传输服务
DNS         域名系统             53        UDP 53     因特网上作为域名和IP地址相互映射的一个分布式数据库，
                                                             能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串
BooTPS/DHCP 动态主机配置协议	67	UDP 67    主要有两个用途:给内部网络或网络服务供应商自动分配IP地址，
                                                             给用户或者内部网络管理员作为对所有计算机作中央管理的手段



A (126) 1  -126.0.0.0  [0000  0001] -[0111 1111]  私有地址A 10.0.0.1    ~ 10.255.255.254
B (64 ) 128-191.0.0.0  [1000  0000] -[1011 1111]  私有地址B 172.16.0.1  ~ 172.31.255.254
C (32 ) 192-223.0.0.0  [1100  0000] -[1101 1111]  私有地址C 192.168.0.1 ~ 192.168.255.254
D (16 ) 224-239.0.0.0  [1110  0000] -[1110 1111]  组播地址
E (15 ) 240-254.0.0.0  [1111  0000] -[1111 1110]
        1 	 1 	 1 	 1 	 1 	 1 	 1 	 1 
	0	0	0	0	0	0	0	0
 	128	64	32	16	8	4	2	1


---------------------------------------------------------------------------
==========================  TCP/IP三次握手四次断开  =================
                   ---------   源IP    >     目标 IP ---------------
=================== TCP的三次握手(建立连接）和四次挥手(关闭连接）==========

                                       Client                                   Server
                             没有任何连接状态 CLOSED |                                   | CLOSED 没有任何连接状态
                                            |                                   | LISTEN 侦听来自远方TCP端口的连接请求
发送SYN,请求建立连接(seq=100,ctl=SYN) send SYN |--------------- SYN -------------->| receive SYN
       在发送连接请求后等待匹配的连接请求 SYN_SENT |                                   | SYN_RECV 服务端收到建立连接的SYN没有收到ACK包的时候状态
                 receive SYN+ACK |<-- SYN+ACK ---| SYN+ACK send 发送SYN，ACK(seq=300,ack=101,ctl=SYN,ACK)
                                        |            | SYN-RECEIVED 在收到和发送一个连接请求后等待对连接请求的确认状态
            发送ACK(seq=101  ack=301  ctl=ACK) |-------------- ACK --------------->| receive ACK
 代表一个打开的连接，数据可以传送给用户 ESTABLISHED|                                  | ESTABLISHED 代表一个打开的连接，数据可以传送给用户
                                            | <=== TCP session established ===> |
                                                         |                                              |
      发送FIN 请求断开连接(FIN=1,ACK=1) send FIN |-------------- FIN --------------->| receive FIN
等待远程TCP的连接中断请求，或先前的连接中断请求的确认 FIN_WAIT-1 |                       | CLOSE_WAIT 等待从本地用户发来的连接中断请求
                                 receive ACK |<------------- ACK ----------------| send ACK 发送ACK(ACK=1)
               从远程TCP等待连接中断请求 FIN_WAIT-2 |                                   |
                     receive FIN |<------------- FIN ----------------| send FIN 发送FIN 请求断开连接(FIN=1,ACK=1)
等待足够的时间以确保远程TCP接收到连接中断请求的确认 TIME_WAIT |                          | LAST_ACK 等待原来发向远程TCP的连接中断请求的确认
                            发送ACK(ACK=1) send ACK |-------------- ACK --------------->| receive ACK
                                     TimeOut |                                   | CLOSED 没有任何连接状态
                               没有任何连接状态 CLOSED |                                   |

位码即tcp标志位,有6种标示:

SYN(synchronous建立联机)

ACK(acknowledgement 确认)

PSH(push传送)

FIN(finish结束)

RST(reset重置)

URG(urgent紧急)

Sequence number(顺序号码)[32位序列号 和 32 位确认号 举例,seq=100,]

Acknowledge number(确认号码)
established   已建立的; 已设立的; 已制定的; 确定的
receive 收到; 接待; 接到; 接纳;
          接收; 受理; 欢迎; 承受;
TCP(Transmission Control Protocol)　传输控制协议
                         -------   源IP    >     目标 IP -------------

16:56:19.837417 IP 192.168.0.12.40670 > Va1.http: Flags [S], seq 220172651, win 29200, options [.....]
16:56:19.837458 IP Va1.http > 192.168.0.12.40670: Flags [S.], seq 3370927378, ack 220172652, win 28960, options [...]
16:56:19.837597 IP 192.168.0.12.40670 > Va1.http: Flags [.], ack 1, win 229, options [........]


16:56:19.837646 IP 192.168.0.12.40670 > Va1.http: Flags [P.], seq 1:147, ack 1, win 229, options [.......]
Connection: Keep-Alive
16:56:19.837663 IP Va1.http > 192.168.0.12.40670: Flags [.], ack 147, win 235, options [............]
16:56:19.838398 IP Va1.http > 192.168.0.12.40670: Flags [P.], seq 1:336, ack 147, win 235, options [.....]
16:56:19.838547 IP 192.168.0.12.40670 > Va1.http: Flags [.], ack 336, win 237, options [.........]

                  Va2 192.168.0.12 Client                                   Server  Va1 192.168.0.11
                               send SYN |--------------- SYN -------------->| receive SYN
                        receive SYN+ACK |<- - - - -- SYN+ACK - - - - -- ----| SYN+ACK send 发送SYN，ACK(seq=300,ack=101,ctl=SYN,ACK)
       发送ACK(seq=101  ack=301  ctl=ACK) |-------------- ACK --------------->| receive ACK


 发送FIN 请求断开连接(FIN=1,ACK=1) send FIN |-------------- FIN --------------->| receive FIN
                            receive ACK |<------------- ACK ----------------| send ACK 发送ACK(ACK=1)
                            receive FIN |<------------- FIN ----------------| send FIN 发送FIN 请求断开连接(FIN=1,ACK=1)
                     发送ACK(ACK=1) send ACK |-------------- ACK --------------->| receive ACK


[root@Va1 ~]# tcpdump   -Ai  eth0   tcp  portrange  20-80  and    host  192.168.0.12  -c7
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes

[root@Va2 ~]# elinks  -dump  192.168.0.11
   Va1 192.168.0.11

             -------   源IP    >     目标 IP -------------

[root@Va1 ~]# tcpdump   -Ai  eth0   tcp  portrange  20-80  and    host  192.168.0.12  -c7
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
16:56:19.837417 IP 192.168.0.12.40670 > Va1.http: Flags [S], seq 220172651, win 29200, options [mss 1460,sackOK,TS val 17971401 ecr 0,nop,wscale 7], length 0
E..<..@.@..............P...k......r............
..8.........
16:56:19.837458 IP Va1.http > 192.168.0.12.40670: Flags [S.], seq 3370927378, ack 220172652, win 28960, options [mss 1460,sackOK,TS val 19184918 ecr 17971401,nop,wscale 7], length 0
E..<..@.@..T.........P....E....l..q ...........
.$....8.....
16:56:19.837597 IP 192.168.0.12.40670 > Va1.http: Flags [.], ack 1, win 229, options [nop,nop,TS val 17971401 ecr 19184918], length 0
E..4..@.@..............P...l..E............
..8..$..
16:56:19.837646 IP 192.168.0.12.40670 > Va1.http: Flags [P.], seq 1:147, ack 1, win 229, options [nop,nop,TS val 17971401 ecr 19184918], length 146: HTTP: GET / HTTP/1.1
E.....@.@..&...........P...l..E...... .....
..8..$..GET / HTTP/1.1
Host: 192.168.0.11
User-Agent: ELinks/0.12pre6 (textmode; Linux; -)
Accept: */*
Accept-Language: en
Connection: Keep-Alive


16:56:19.837663 IP Va1.http > 192.168.0.12.40670: Flags [.], ack 147, win 235, options [nop,nop,TS val 19184918 ecr 17971401], length 0
E..4..@.@..V.........P....E................
.$....8.
16:56:19.838398 IP Va1.http > 192.168.0.12.40670: Flags [P.], seq 1:336, ack 147, win 235, options [nop,nop,TS val 19184919 ecr 17971401], length 335: HTTP: HTTP/1.1 200 OK
E.....@.@............P....E................
.$....8.HTTP/1.1 200 OK
Date: Sun, 16 Dec 2018 08:56:19 GMT
Server: Apache/2.4.6 (Red Hat Enterprise Linux)
Last-Modified: Sun, 16 Dec 2018 05:12:06 GMT
ETag: "14-57d1cb49bf1f9"
Accept-Ranges: bytes
Content-Length: 20
Keep-Alive: timeout=5, max=100
Connection: Keep-Alive
Content-Type: text/html; charset=UTF-8

 Va1  192.168.0.11 

16:56:19.838547 IP 192.168.0.12.40670 > Va1.http: Flags [.], ack 336, win 237, options [nop,nop,TS val 17971402 ecr 19184919], length 0
E..4..@.@..............P......Fb...........
..8..$..
7 packets captured
7 packets received by filter
0 packets dropped by kernel

[root@Va1 ~]# 

====================  tcpdump  =======================================
=======================================================
======================   虚拟网络 命令 常用 =====================

[root@hiys ~]# virsh  net-autostart --disable  vbr
网络vbr取消标记为自动启动

[root@hiys ~]# virsh  net-destroy   vbr
网络 vbr 被删除

[root@hiys ~]# ls
autostart  default.xml  private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml  vbr.xml

[root@hiys ~]# virsh net-undefine  vbr   ##取消定义一个非活跃的网络 vbr
网络 vbr 已经被取消定义

[root@hiys ~]# ls  /etc/libvirt/qemu/networks/
autostart  default.xml  private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml

[root@room9pc25 ~]# virsh  net-dumpxml  private2

[root@hiys networks]# virsh  net-define  vbr.xml 
Network vbr defined from vbr.xml

[root@hiys networks]# virsh  net-define  vbr1.xml 
Network vbr1 defined from vbr1.xml

[root@hiys networks]# virsh  net-autostart  vbr
Network vbr marked as autostarted

[root@hiys networks]# virsh  net-autostart  vbr1
Network vbr1 marked as autostarted

[root@hiys networks]# virsh  net-start  vbr
Network vbr started

[root@hiys networks]# virsh  net-start  vbr1
Network vbr1 started

[root@hiys networks]# ifconfig vbr ;ifconfig vbr1

[root@hiys ~]# vim   Vaxip.sh
[root@hiys ~]# cat   Vaxip.sh
#!/bin/bash
x=$1
ip=$2
export LANG=en_US.UTF-8
echo  1 |passwd  --stdin  root
echo  Va${x} > /etc/hostname
echo  "LANG=\"en_US.UTF-8\"" >> /etc/sysconfig/i18n
echo  "LANG=\"en_US.UTF-8\"" >>  /etc/rc.local
chmod  a+x  /etc/rc.d/rc.local
source   /etc/rc.local

echo  "NAME=\"eth0\"
DEVICE=\"eth0\"
ONBOOT=yes
NM_CONTROLLED=\"no\"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL=\"no\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.0.${ip}\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.0.254\""  > /etc/sysconfig/network-scripts/ifcfg-eth0

echo  "NAME=\"eth1\"
DEVICE=\"eth1\"
ONBOOT=yes
NM_CONTROLLED=\"no\"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL=\"no\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.1.${ip}\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.0.254\""  > /etc/sysconfig/network-scripts/ifcfg-eth1

echo  "NAME=\"eth2\"
DEVICE=\"eth2\"
ONBOOT=yes
NM_CONTROLLED=\"no\"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL=\"no\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.2.${ip}\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.0.254\""  > /etc/sysconfig/network-scripts/ifcfg-eth2

systemctl  stop   NetworkManager
yum  -y   remove  NetworkManager-*  firewalld-*  python-firewall 
sed  -i  "7c SELINUX=disabled"  /etc/selinux/config
systemctl   restart  network

=======================
 ~]# virt-manager   手动改变网卡
 ～ 】 注意增加内存 2048 MiB
 ～ 】 注意增加 cpu  2  个

[root@hiys ~]# virsh console  Va1

[root@localhost ~]# . Vaxip.sh  1  11  ## 主机名 Va1    ip  11

[root@room9pc27 ~]# sed  -n  '16,17p;38p;65p'  /etc/ssh/sshd_config 
Port 7920
#Port 22
PermitRootLogin yes
PasswordAuthentication yes

               ## -P  7920  使用非特定的 port 去对外联机

[root@Va1 ~]# scp  -P 7920  -o  StrictHostKeyChecking=no  root@192.168.0.254:/root/local.repo.txt  /etc/yum.repos.d/local.repo

============================================================

------------------------------------------------------- 四表 五链  关系 结构 --------------------------------------
 raw表【状态跟踪 表】                                                     raw表【状态跟踪 表】
 mangle表【包标记 表】    mangle表【包标记表】 mangle表【包标记表】 mangle表【包标记表】 mangle表【包标记 表】
 nat表【地址转换 表】      nat表【地址转换 表】                         nat表【地址转换 表】    nat表【地址转换 表】
                       filter表【过滤 表】 filter表【过滤 表】 filter表【过滤 表】  
 prerouting路由前规则链  input入站规则链      forward转发规则链   output出站规则链   postrouting路由后规则链
          |                          |                         |                      |                       |
        规则                      规则                      规则                 规则                    规则
          |                          |                         |                      |                       |
        规则                      规则                      规则                 规则                    规则
          |                          |                         |                      |                       |
 ----------------------------------------------------------------------------------------------------------------------------------- 

 NETWORK 云 --> raw 表【PREROUTING链路由前】--> mangle 表 【PREROUTING链路由前】--> nat 表 【PREROUTING链路由前,可以在此做DNAT，但不要做过滤】
                                                                                                                             |
                       Routing 【Decision 决定路由，看是交给本地主机还是转发给其它主机】<- -  - - -  <- -|
                                        \|/
     |--------------------------------------------------|--------------------------------------------------------------------------------------|
     |                                                                                                  |
 mangle 表 【INPUT链入站规则,数据包是发给本地主机的                     mangle 表 【FORWARD链转发,数据包要转发给其它主机,
 这里是在路由之后，交由本地主机之前，可以做一些相应的修改 】              这是第一次路由决定之后，在最后的路由决定之前,
     |                                                                        仍可以对数据包进行某些修改】
     |  推断nat 表 【INPUT链 作用】                                                                 |
 filter表 【INPUT链入站规则，在这里我们可以                             filter表【FORWARD链转发,在这可以对所有转发的数据包进行过滤.
  对流入的所有数据包进行过滤， 无论它来自哪个网络接口】                      注意：经过这里的数据包是转发的，方向是双向的】
     |                                                                                                  |
 Local Process【交给本地主机的应用程序进行处理】                                      |
     |                                                                                                  |
 Routing 【Decision 决定，处理完毕后进行路由决定，看该往哪里发出】                      |
    \|/                                                                                                |
 raw 表【OUTPUT链出站】-->mangle 表 【OUTPUT链出站，在这可以修改数据包，但不要做过滤】      |
                                   |                                                                   |
        nat 表 【OUTPUT链出站，可以对防火墙本机发出的数据做 NAT 】                            |
                                   |                                                                   |
        filter表 【OUTPUT链出站,可以对本地出去的数据包进行过滤】                              |
                                   |                                                                   |
               Routing 【Decision 决定】 < - - - - - - - - - - - - - - - - - - - |
                                  \|/
    mangle 表 【POSTROUTING 路由后规则链,这里对经过防火墙的其它主机的数据包进行处理，还对防火墙 本机 产生的数据包进行处理
                                到这里已经做完了所有的路由决定，其它主机的数据包仍然在本地主机 】
                                   |
          nat 表 【POSTROUTING 路由后规则链，在这一般都用来做 SNAT ，不要做过滤】
                                   |
                      NETWORK 云 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
规则表先后顺序：raw表→mangle表→nat表→filter表 
规则链先后顺序： 
入站：PREROUTING → INPUT 
出站：OUTPUT → POSTROUTING 
转发：PREROUTING → FORWARD → POSTROUTING

raw 表(状态跟踪表)[一般禁用，耗CPU资源] 

    关闭raw 表上启用的连接 追踪机制 ; 内核模块: iptable_raw

    包含 2个 链 PREROUTING 链   OUTPUT 链

    只使用在 PREROUTING链 和 OUTPUT链 上,
    优先级最高， 
    可以对收到的 数据包 在 连接跟踪前 进行处理。
    一旦 用户使用了RAW表,
     在某个链上,
    RAW表处理完后,
     将跳过NAT表和 ip_conntrack处理,
     即不再做地址转换和数据包的链接跟踪处理了. 
    RAW表可以应用在
       那些不需要做nat的情况下，以提高性能。
    如大量访问的web服务器，
    可以让80端口不再让iptables做数据包的链接跟踪处理，
    以提高用户的访问速度。

[root@Va4 ~]# iptables  -t mangle  -L |awk '/Chain/{print $2}'
PREROUTING
INPUT
FORWARD
OUTPUT
POSTROUTING

mangle表 【64跳 15跳，新路由协议支持超过 15 跳 】
    【包标记 表，可以根据 标记 决定 是否 允许ip数据包通过 】 
    拆解 修改报文,并重新封装 功能; 内核模块: iptable_mangle
    包含 5个 链 PREROUTING 链  INPUT 链   FORWARD 链  OUTPUT 链   POSTROUTING 链
    进行 网址转译 工作会 改写封包 外，
    在某些特殊应用可能也必须去改写封包（TTL、TOS）
    或者是设定 MARK（将封包作记号，以进行后续的过滤），
    使用率不高

nat表{地址转换表} 
    负责 网络地址转换功能; 内核模块: iptable_nat
    包含 4个 链 PREROUTING 链   INPUT 链    OUTPUT 链   POSTROUTING 链 
   主要功能为进行一对一、一对多、多对多等网址转译工作（SNAT  DNAT），
   由于 转译 工作的特性，
   需进行 目的地 网址转译的封包，
   就不需要进行 来源 网址转译
   在防火墙运作时，每个封包只会经过这个规则表一次。
   如果我们把封包过滤的规则定义在这个数据表里，
   将会造成无法对同一包进行多次比对，
   因此这个规则表除了作网址转译外，
   不要做其它用途

filter表（数据过滤表）
    负责 封包过滤 功能,防火墙; 内核模块: iptable_filter
    包含3链 INPUT 链    FORWARD 链    OUTPUT 链 


PREROUTING 路由前规则链  属于 3个 表
  raw表【状态跟踪 表】 mangle表【包标记 表】 nat表【地址转换 表】

INPUT       入站规则链  属于 3 个 表
                    mangle表【包标记 表】 nat表【地址转换 表】   filter表【过滤 表】

FORWARD     转发规则链  属于 2 个 表
                   mangle表【包标记 表】  filter表【过滤 表】

OUTPUT      出站规则链  属于 4 个 表
  raw表【状态跟踪 表】 mangle表【包标记 表】 nat表【地址转换 表】   filter表【过滤 表】

POSTROUTING 路由后规则链  属于 2 个 表
                   mangle表【包标记 表】 nat表【地址转换 表】


所有链的初始默认规则是ACCEPT

------------------------------------------------------------------------------------------------------------------------||
                本机    HTTP   Web   服务     [ 终点/起点]
                        |                                    |
---------------------------------|---------------------------------------------------|---------------------------------|
内核空间              /|\                                  \|/
             input 入 站 规则--链              output 出站规则--链
                       /|\                                  \|/
                        是                                   |
 路由前规则--链         |                转发规则--链   链--路由后规则
 prerouting-->|目标是否是本机?|--否-->forward-->postrouting---转发至
       |                                                      |               \|/
----------|---------------------------------  本机  网卡  ----------------------|-----------------------|-----
       |---------------------------------- 本机 ---------------------------------|                |---->>转发至 其他主机


           #  iptables   [-t 表名]   命令选项  [链名]   参数[条件]    动作[-j 目标操作]
[root@proxy ~]# iptables   -t  filter  -I   INPUT  -p icmp  -j ACCEPT ;

# iptables     [-t 表名]  
  命令选项(-A 追加规则[链名]、 -D 删除规则[链名]、 -R 修改规则[链名]、 -I 插入规则[链名]、 -L 查看规则[链名] 等)  
 参数(-p 协议、-s 源地址、-d 目的地址、--sport 源端口、--dport 目的端口、-i 进入网卡、-o 出去网卡 等)  
 动作-j ( ACCEPT 接受包、DROP 丢弃包、REJECT 丢弃包并通知对方、REDIRECT 端口重定向包 ，
          RETURN 返回主链继续匹配, MASQUERADE 地址伪装, MARK 打标签,
        LOG将封包相关讯息记录在 /var/log/messages中，SNAT改写封包来源IP，DNAT改写封包目的地IP  等)

-t 参数
用来指定规则表，
内建的规则表有4个，分别是：raw, nat , mangle 和 filter，
当未指定规则表时，则一律视为是 filter。

-i :指定数据报文流入接口  input prerouting  forward
-o :指定数据报文流出接口  output postrouting  forward
-p :明确说明只放行哪种协议的报文匹配规则

pkts     被本机报文所匹配的个数
bytes   报文所有大小记起来之和
opt     额外的选项，--表示没有
target   处理机制
prot     放行哪种协议
source  源地址
destination  目标地址

命令-A,--append 【追加 一条规则到 链 的 末尾 位置】

命令-I,--insert 【插入 一条规则到 链 的开头位置】
 ~]# iptables  -I  INPUT  2  -p  icmp  -j  ACCEPT  # -I  链名  2 可以指定 插入位置的顺序【第 2 位】
范例 
iptables -I INPUT 1 --dport 80 -j ACCEPT
说明
  插入一条规则，
  原本该位置(这里是位置 1 ) 上的规则将会往后移动一个顺位
  -I  [n] ：插入为第n条规则

命令 -L, --list 【列出（某规则链中的)所有规则】
[root@Va4 ~]# iptables  --list  ## 默认显示 表filter

 ~]# iptables  -nL   ## -n 以数字形式显示地址，端口等信息
~]# iptables  -nL   --line-numbers   # ## --line-numbers 显示 规则链 中的规则序号


命令-F, --flush [删除 (某规则链中的)所有规则]

命令-D,--delete 【从某个规则链中删除一条规则，可以输入完整规则，或直接指定规则编号加以删除】
  范例
 iptables -D INPUT --dport 80 -j DROP
 iptables -D INPUT 1
  删除INPUT第二条规则：
 iptables -D INPUT 2
 -D   : 删除第n条规则

命令-P, --policy 【为指定的 规则链 预设定义默认规则 】 
    ##注意 -P  只能设置【 ACCEPT 接受包、DROP 丢弃包】，不能设置 【REJECT 丢弃包并通知对方】

命令-R, --replace
范例 iptables -R INPUT 1 -s 192.168.0.1 -j DROP
说明
  取代现行规则，规则被取代后并不会改变顺序。(1是位置)
  -R  [n] : 替换第 n 条

命令-N, --new-chain 【 定义新的规则链 】
  -N ： （内置链不能删除，如果太多，可以自定义链）
范例
  iptables -N allowed  ## 默认表 -t filter
#自定义连只能被调用才可以发挥作用
## iptables -N filter_web

命令-X, --delete-chain
-X : 删除自定义空链，如果链内有规则，则无法删除
范例 iptables -X  allowed  ## 默认表 [ -t filter ]
说明 删除某个规则链。

命令-E,--rename-chain
范例 iptables -E allowed disallowed  ## 默认表 [ -t filter ]
说明 修改某自订规则链的名称

-Z ：计算器清零
# iptables -Z

REJECT拦阻该封包，并传送封包通知对方，
可以传送的封包有几个选择：ICMP port-unreachable、ICMP echo-reply 
或是 tcp-reset（这个封包会要求对方关闭联机），
进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。
例如：
iptables -A FORWARD -p TCP --dport 22 -j REJECT --reject-with tcp-reset

REDIRECT 【redirect】将封包重新导向到另一个端口（PNAT），
进行完此处理动作后，将会继续比对其它规则。
这个功能可以用来实作通透式proxy 或用来保护 web 服务器。
例如：
iptables -t nat-A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080

//目标操作：
// ACCEPT：允许通过/放行
// DROP：直接丢弃，不给出任何回应
// REJECT：拒绝通过，必要时会给出提示
// LOG：记录日志，然后传给下一条规则
#LOG匹配即停止的唯一例外，记录日志，然后传给下一条规则
[root@proxy ~]# iptables -t filter -I INPUT -p icmp -j LOG ;
[root@proxy ~]# > /var/log/messages

LOG将封包相关讯息记录在 /var/log/messages 中，
进行完此处理动作后，将会继续比对其规则。
例如：
iptables -A INPUT -p tcp -j LOG --log-prefix "INPUT packets"


仅允许来自172.27.8.0/22的用户连接ssh服务
iptables -I INPUT -s 172.27.8.0/22 -p tcp --dport 22 -j ACCEPT 
iptables -A INPUT -p tcp --dport 22 -j REJECT

不允许任何用户访问本机3306端口
iptables -I INPUT -p tcp --dport 3306 -j REJECT 
iptables -I INPUT -p udp --dport 3306 -j REJECT

拒绝其他用户通过网卡eth1访问本机http服务
iptables -I INPUT -i eth1 -p tcp --dport 80 -j REJECT

禁止用户访问www.baidu.com
iptables -I FORWARD -d www.baidu.com -j DROP

禁止172.27.8.22的用户上网
iptables -I FORWARD -s 172.27.8.22 -j DROP

流量均衡：
将访问流量分流至内网三台不同主机：
iptables -A PREROUTING -i eth1 -p tcp --dport 80 -m state --state NEW -m nth --counter 0 --every 3 --packet 0 -j DNAT -to-destination 172.27.8.10
iptables -A PREROUTING -i eth1 -p tcp --dport 80 -m state --state NEW -m nth --counter 0 --every 3 --packet 0 -j DNAT -to-destination 172.27.8.20
iptables -A PREROUTING -i eth1 -p tcp --dport 80 -m state --state NEW -m nth --counter 0 --every 3 --packet 0 -j DNAT -to-destination 172.27.8.30

参数-p, --protocol(指定协议)
范例 
  iptables -A INPUT  -p  tcp(指定协议)    
  iptables -A INPUT  -p  all   所有协议，
  iptables -A INPUT  -p  !tcp 去除tcp外的所有协议。
说明 比对通讯协议类型是否相符，
可以使用 ! 运算子进行反向比对，
例如：-p ! tcp ，意思是指除 tcp 以外的其它类型，
包含udp、icmp ...等。
如果要比对所有类型，则可以使用 all 关键词，
例如：-p all。

参数-s, --src, --source(指定源地址，指定源端口--sport)
例如：
   iptables -A INPUT -s 192.168.1.1
说明 用来比对封包的来源 IP，可以比对单机或网络，
比对网络时用数字来表示屏蔽，
例如：
   iptables -A INPUT -s 192.168.0.0/24，
比对 IP 时可以使用 ! 运算子进行反向比对，
例如：
    iptables -A INPUT -s ! 192.168.0.0/24。

参数-d, --dst, --destination(指定目的地址，指定目的端口--dport)
例如：
    iptables -A INPUT -d 192.168.1.1
说明 用来比对封包的目的地 IP，设定方式同上。

参数-i, --in-interface(指定入口网卡)    
      iptables -A INPUT  -i  eth+   所有网卡
例如： iptables -A INPUT  -i  eth0
说明 用来比对封包是从哪片网卡进入，
     可以使用通配字符 + 来做大范围比对，
例如：
  iptables -A INPUT  -i eth+ 表示所有的 ethernet 网卡，
   也以使用 ! 运算子进行反向比对，
例如：iptables -A INPUT  -i ! eth0。


参数-o, --out-interface(指定出口网卡)
例如： iptables -A  FORWARD  -o  eth0
说明 用来比对封包要从哪片网卡送出，设定方式同上。

参数--sport, --source-port(源端口)
例如： iptables -A INPUT -p tcp --sport 22
说明 用来比对封包的来源端口号，
     可以比对单一埠，
      或是一个范围，
例如：--sport 22:80，表示从 22 到 80 端口之间都算是符合件，
如果要比对
      不连续的多个埠，
      则必须使用--multiport 参数
比对埠号时，可以使用 ! 运算子进行反向比对。

参数--dport, --destination-port(目的端口)
例如： iptables -A INPUT -p tcp --dport 22
说明 用来比对封包的目的端口号，设定方式同上。

多端口规则匹配
使用参数-m multiport 可以指定15个以内的非连续端口，比如21-22,80
-m mulitport  
   --src-ports
   --dst-ports
   --ports

参数-m multiport --source-port
例如： iptables -A INPUT -p tcp -m multiport --source-port 22,53,80,110
说明 用来比对不连续的多个来源埠号，
一次最多可以比对 15 个埠，可以使用 !运算子进行反向比对。

参数-m multiport --destination-port
例如： iptables -A INPUT -p tcp -m multiport --destination-port 22,53,80,110
说明 用来比对不连续的多个目的地埠号，设定方式同上。
#对多端口进行匹配，只要匹配以下端口，则全部放行
[root@test3~]# iptables -A INPUT  -s 10.0.10.0/24 -d10.0.10.62 -p tcp 
 -m state --state NEW  -m multiport  --destination-port  21,22,80 -j ACCEPT

REDIRECT 【redirect】将封包重新导向到另一个端口（PNAT），
进行完此处理动作后，将会继续比对其它规则。
这个功能可以用来实作通透式proxy 或用来保护 web 服务器。
例如：
iptables  -t  nat  -A  PREROUTING -p tcp --dport 80 -j  REDIRECT --to-ports 8080

 ~]# iptables  -t  nat  -A  PREROUTING  -p tcp  --dport 80 -j  REDIRECT --help |wc  -l
87
 ~]# iptables  -t  nat  -A  PREROUTING  -p tcp  --dport  80 -j  REDIRECT  --help  |tail  -18

REDIRECT target options:
 --to-ports <port>[-<port>]
				Port (range) to map to.
 [--random]

tcp match options:
[!] --tcp-flags mask comp	match when TCP flags & mask == comp
				(Flags: SYN ACK FIN RST URG PSH ALL NONE)
[!] --syn			match when only SYN flag set
				(equivalent to --tcp-flags SYN,RST,ACK,FIN SYN)
[!] --source-port port[:port]
 --sport ...
				match source port(s)
[!] --destination-port port[:port]
 --dport ...
				match destination port(s)


参数-m multiport --port
例如： iptables -A INPUT -p tcp -m multiport --port 22,53,80,110
说明 这个参数比较特殊，用来比对来源埠号和目的埠号相同的封包，设定方式同上。
注意：在本范例中，如果来源端口号为 80目的地埠号为 110，
这种封包并不算符合条件。

多IP匹配,指定匹配的IP地址范围：
-m  iprange
   --src-range
   --dst-range

指定匹配的连续ip段
~]# iptables -A INPUT -s  -m iprange --src-range 10.0.10.100-10.0.10.200


参数--tcp-flags(只过滤TCP中的一些包，比如SYN包，ACK包，FIN包，RST包等等)
例如： iptables -p tcp --tcp-flags SYN,FIN,ACK SYN
说明  比对 TCP 封包的状态旗号，参数分为两个部分，
第一个部分列举出想比对的旗号，
第二部分则列举前述旗号中哪些有被设，
未被列举的旗号必须是空的。
TCP 状态旗号包括：SYN（同步）、ACK（应答）、FIN（结束）、RST（重设）、URG（紧急）PSH（强迫推送） 
等均可使用于参数中，除此之外还可以使用关键词 ALL 和NONE 进行比对。
比对旗号时，可以使用 ! 运算子行反向比对。

参数--syn例如： iptables -p tcp --syn
说明 用来比对是否为要求联机之 TCP 封包，
与 iptables -p tcp --tcp-flags SYN,FIN,ACK SYN 的作用完全相同，
如果使用 !运算子，可用来比对非要求联机封包。
tcp标志位:   syn、syn+ack、ack、 fin、urg、psh、rst ；

参数--icmp-type
例如： iptables -A INPUT -p icmp --icmp-type 8
  ## 注意 请求包 类型 数字8 代表 echo-request
  ## 注意 应答包 类型 数字0 代表 echo-reply

说明 用来比对 ICMP 的类型编号，可以使用代码或数字编号来进行比对。

# iptables -p icmp --help 来查看有哪些代码可用

~]# iptables   -t  filter  -A  INPUT   -p icmp  --help |grep -A40 -n 'icmp match'
71:icmp match options:
72-[!] --icmp-type typename	match icmp type  # 匹配类型
73-[!] --icmp-type type[/code]	(or numeric type or type/code)
74-Valid ICMP Types:
75-any
76-echo-reply (pong) # 回应【应答包】
77-destination-unreachable
..................
94-redirect
。。。。。。。。。。。。。。。。。
99-echo-request (ping)  # 请求【放行ping数据包 】

指定速率匹配
  默认
  为 每秒 匹配 3个 报文，基于令牌桶算法
-m  limit
   --limit             #NUMBER，表示允许收集多少个空闲令牌
   --limit-burst          #RATE，允许放行多少个报文

参数-m limit --limit
例如： iptables -A INPUT -m limit --limit 3/hour

说明 用来比对某段时间内封包的平均流量，
上面的例子是用来比对：每小时平均流量是否超过一次 3 个封包。 
除了每小时平均次外，
也可以每秒钟、每分钟或每天平均一次，默认值为每小时平均一次，
参数如后： /second、 /minute、/day。 
除了进行封数量的比对外，
设定这个参数也会在条件达成时，暂停封包的比对动作，
以避免因骇客使用洪水攻击法，
导致服务被阻断。

参数--limit-burst
范例 iptables -A INPUT -m limit --limit-burst 5
说明 用来比对瞬间大量封包的数量，
上面的例子是用来比对一次同时涌入的封包是否超过 5 个（这是默认值），
超过此上限的封将被直接丢弃。
使用效果同上。

比如：ssh一分钟之内只能建立20个链接，平均5秒一个，而一次性只能放行2个空闲令牌

   --limit 20/min
   --limit-burst  2

只有在大量空闲令牌存储的情况下，才可有limit-burst控制

例：控制NEW状态的请求
[root@test3~]# iptables -A INPUT -s 10.0.10.0/24 -d 10.0.10.62 
  -m  state --state NEW 
  -m  limit --limit 12/min   --limit-burst 2 -j ACCEPT

例2：每次只允许2个ping包进来
[root@test3~]# iptables -F

## 注意请求包类型 数字8 代表echo-request [数字8]
## 注意应答包类型 数字0 代表 echo-reply [数字0]

 ~]# iptables -A INPUT -s 10.0.10.0/24 -d 10.0.10.62 
  -p icmp --icmp-type 8  -m limit --limit 20/min --limit-burst 5 -j ACCEPT

新建立一终端，在其终端ping 10.0.10.62 可以看到效果
       
--------------------------------------------------

##设置Va3的应答包[ 数字0 ] echo-reply 
   被 允许进 --icmp-type echo-reply -s 192.168.0.13 -j ACCEPT 

[root@Va4 ~]# iptables -t  filter -A  INPUT 
   -p icmp --icmp-type  echo-reply  -s 192.168.0.13 -j ACCEPT

[root@Va4 ~]# iptables -t  filter -nL INPUT  
                ## 注意 应答包类型  [数字0] 代表 echo-reply
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     icmp --  192.168.0.13         0.0.0.0/0            icmptype 0

[root@Va4 ~]# 
[root@Va3 ~]# ping  -c2  192.168.0.14
PING 192.168.0.14 (192.168.0.14) 56(84) bytes of data.
64 bytes from 192.168.0.14: icmp_seq=1 ttl=64 time=0.502 ms
64 bytes from 192.168.0.14: icmp_seq=2 ttl=64 time=0.563 ms

--- 192.168.0.14 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.502/0.532/0.563/0.038 ms
[root@Va3 ~]# 

   ##设置 Va3的请求包 [数字8] 被拒绝echo-request -s 192.168.0.13 -j REJECT

[root@Va4 ~]# iptables  -t filter -A INPUT   
   -p icmp --icmp-type  echo-request  -s 192.168.0.13 -j  REJECT

[root@Va4 ~]# iptables  -t filter -nL INPUT ##注意请求包类型 数字8 代表echo-request
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     icmp --  192.168.0.13         0.0.0.0/0            icmptype 0
REJECT     icmp --  192.168.0.13         0.0.0.0/0            icmptype 8 reject-with icmp-port-unreachable

[root@Va4 ~]# iptables  -t  filter  -L  INPUT
Chain INPUT (policy ACCEPT)
target     prot opt source          destination         
ACCEPT     icmp --  192.168.0.13    anywhere   icmp echo-reply #echo-reply这里可以用数字 0 表示
REJECT     icmp --  192.168.0.13    anywhere   icmp echo-request reject-with icmp-port-unreachable

  ##现在Va3 不能ping通 主机Va4【原因Va3的请求包被拒绝echo-request -s 192.168.0.13 -j REJECT 】
[root@Va3 ~]# ping  -c2  192.168.0.14    

 ##但Va4主机 能够ping通 Va3【原因Va3的应答包被 允许进 --icmp-type echo-reply -s 192.168.0.13 -j  ACCEPT】
[root@Va4 ~]# ping  -c2  192.168.0.13

------------ #应答包 echo-reply 用数字 0 表示 ; 请求包类型 数字8 代表echo-request

[root@Va4 ~]# iptables  -t  filter  -nL  INPUT --line-numbersChain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     icmp --  192.168.0.13         0.0.0.0/0            icmptype 0
2    REJECT     icmp --  192.168.0.13         0.0.0.0/0            icmptype 8 reject-with icmp-port-unreachable

## 修改规则 -R 设置Va3的[数字8]请求包
   echo-request -s 192.168.0.13 -j  ACCEPT 允许 进入 Va4 的防火墙

[root@Va4 ~]# iptables -t filter -R INPUT 2  -p icmp
    --icmp-type  echo-request -s 192.168.0.13 -j  ACCEPT  

[root@Va4 ~]# iptables  -t  filter  -nL  INPUT --line-numbersChain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     icmp --  192.168.0.13         0.0.0.0/0            icmptype 0
2    ACCEPT     icmp --  192.168.0.13         0.0.0.0/0            icmptype 8

[root@Va3 ~]# ping  -c2  192.168.0.14  ## 现在 请求包echo-request 被Va4 允许进，所以通了






参数-m owner --uid-owner
范例 iptables -A OUTPUT -m owner --uid-owner 500
说明 用来比对来自本机的封包，是否为某特定使用者所产生的，这样可以避免服务器使用
root 或其它身分将敏感数据传送出，可以降低系统被骇的损失。
可惜这个功能无法比对出来自其它主机的封包。

参数-m owner --gid-owner
范例 iptables -A OUTPUT -m owner --gid-owner 0
说明 用来比对来自本机的封包，是否为某特定使用者群组所产生的，使用时机同上。
参数-m owner --pid-owner
范例 iptables -A OUTPUT -m owner --pid-owner 78
说明 用来比对来自本机的封包，是否为某特定行程所产生的，使用时机同上。

参数-m owner --sid-owner
范例 iptables -A OUTPUT -m owner --sid-owner 100
说明 用来比对来自本机的封包，是否为某特定联机（Session ID）的响应封包，
使用时机同上。


参数-m state --state
范例 iptables -A INPUT -m state --state RELATED,ESTABLISHED
说明 用来比对联机状态，

联机状态共有四种：INVALID、ESTABLISHED、NEW 和 RELATED。

使用-m来指定其状态并赋予匹配规则，语法如下
-m  state  --state 状态
   NEW
   ESTABLISHED
   RELATED          
   INVALID
NEW：
NEW状态的数据包说明
   这个数据包是收到的第一个数据包。
   比如收到一个SYN数据包，它是连接的第一个数据包，
    就会匹配NEW状态。
   第一个包也可能不是SYN包，但它仍会被认为是NEW状态。
NEW 表示该封包想要起始一个联机（重设联机或将联机重导向）。


ESTABLISHED：
    只要发送并接到应答，
    一个数据连接就从NEW变为ESTABLISHED,
    而且该状态会继续匹配这个连接后继数据包。
ESTABLISHED 表示该封包属于某个已经建立的联机。


RELATED：
  当一个连接和某个已处于ESTABLISHED状态的连接有关系时，
  就被认为是RELATED，
  也就是说，一个连接想要是RELATED的，
  首先要有个ESTABLISHED的连接，
  这个ESTABLISHED连接再产生一个主连接之外的连接，
  这个新的连接就是RELATED。
 relate 
  （把…） 联系起来;  使…有联系; 建立或展示联系; 涉及; 有联系; 符合; 发生共鸣;

RELATED 【relate 】表示该封包是属于某个已经建立的联机，所建立的新联机。
例如：FTP-DATA 联机必定是源自某个 FTP 联机。


INVALID：
INVALID状态 说明数据包不能被识别属于哪个连接或没有任何状态。
INVALID 表示该封包的联机编号（Session ID）无法辨识或编号不正确。


例：
对本机22端口做状态监测：

进来的请求状态为new，
而出去的状态则为ESTABLISHED，
如果自动连接别人 状态肯定为NEW，
如果正常去响应别人那么状态肯定是ESTABLISHED

[root@test3~]# iptables -I INPUT -s 10.0.10.0/24 -d 10.0.10.62 -p tcp --dport 22 
       -m state --state NEW,ESTABLISHED -j ACCEPT

出口的响应都必须是ESTABLISHED

[root@test3~]# iptables -A OUTPUT -s 10.0.10.62 -d 10.0.10.0/24 -p tcp --dport 22 
       -m state --state ESTABLISHED -j ACCEPT


masquerade 
n.	伪装; 化装舞会; 掩饰;
vi.	伪装; 假扮; 乔装; 冒充;

MASQUERADE 【masquerade 】改写封包来源 IP 为防火墙 NIC IP，
可以指定 port 对应的范围，进行完此处理动作后，
直接跳往下一个规则（mangleostrouting）。

这个功能与 SNAT 略有不同，
当进行 IP 伪装时，不需指定要伪装成哪个 IP，
IP 会从网卡直接读，
当使用拨接连线时，
IP 通常是由 ISP 公司的 DHCP 服务器指派的，
这个时候 MASQUERADE 特别有用。
例如：iptables -t nat-A POSTROUTING -p TCP 
          -j MASQUERADE --to-ports 1024-31000


SNAT改写封包来源IP 为某特定 IP 或 IP 范围，
可以指定 port 对应的范围，进行完此处理动作后，
将直接跳往下一个规则（mangleostrouting）。
例如：
iptables -t nat -A POSTROUTING -p tcp -o eth0
    -j SNAT --to-source 194.236.50.155-194.236.50.160:1024-32000

DNAT改写封包目的地IP 为某特定 IP 或 IP 范围，
可以指定 port 对应的范围，进行完此处理动作后，
将会直接跳往下一个规则（filter:input 或 filter:forward）。
例如：
iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 
        -j DNAT --to-destination 192.168.1.1-192.168.1.10:80-100

.拓展模块
1.按来源MAC地址匹配
# iptables -t filter -A FORWARD -m --mac-source 00:02:b2:03:a5:f6 -j DROP
拒绝转发来自该MAC地址的数据包

2.按多端口或连续端口匹配
20:表示20以后的所有端口
20:100表示20到100的端口
:20表示20之前的所有端口
 -m  multiport [--ports, --sports,--dports]

例子：
# iptables -A INPUT -p tcp -m multiport --dports 21,20,25,53,80 -j ACCEPT 【多端口匹配】
# iptables -A INPUT -p tcp --dport 20: -j ACCEPT
# iptables -A INPUT -p tcp --sport 20:80 -j ACCEPT
# iptables -A INPUT -p tcp --sport :80 -j ACCEPT

3.还可以按数据包速率和状态匹配
-m limit --limit匹配速率 如： -m limit --limit 50/s -j ACCEPT
-m state --state 状态 如： -m state --state INVALID,RELATED -j ACCEPT

4.还可以限制链接数 -m  connlimit  --connlimit-above n 限制为多少个
例如：
iptables -I FORWARD -p tcp -m connlimit --connlimit-above 9 -j DROP 
 //表示限制链接数最大为9个

多IP匹配,指定匹配的IP地址范围：
-miprange
   --src-range
   --dst-range

指定匹配的连续ip段
[root@test3~]# iptables -A INPUT -s  -m iprange --src-range 10.0.10.100-10.0.10.200


使用上述操作，规则仅当前有效，
如需重启依然有效，
执行service iptables save 
将规则写入/etc/sysconfig/iptables中 

[root@Va4 ~]# service  iptables  status |grep  -io active
Redirecting to /bin/systemctl status iptables.service
Active
active
[root@Va4 ~]# service  iptables  save

[root@Va4 ~]# head  -3  /etc/sysconfig/iptables
# Generated by iptables-save v1.4.21 on Tue Dec 18 16:43:31 2018
*raw
:PREROUTING ACCEPT [258:18392]
=============================

对linux而言tcp/ip协议栈是在内核当中，
意味着报文的处理是在内核中处理的，
也就是说防火墙必须在工作在内核中，
防火墙必须在内核中完成tcp/ip报文所流进的位置，
用规则去检查，才真正能工作起来。

iptables用来衡量tcp/ip报文的属性：
     源ip、目标ip、源端口、目标端口；

tcp标志位:  
   syn、syn+ack、ack、 fin、urg、psh、rst ；
TCP 状态旗号包括：
  SYN（同步）、ACK（应答）、FIN（结束）、RST（重设）、URG（紧急）PSH（强迫推送） 

2.应用网关

众多代理服务器都是应用网关，
比如squid（使用acl限制应用层）varish这一类代理服务等。

3，入侵检测系统（IDS）：
·网络入侵检测系统  NIDS
·主机入侵检测系统  HIDS

对于IDS常用的检测服务有：snort等

4.入侵防御系统（IPS），比如蜜罐

部署一套入侵检测系统是非常麻烦的，因为必须检测网络任意一个位置

对于IPS常用的检测服务有： tripwire 等

iptables基本概念

对linux来说，
是能够实现主机防火墙的功能组件，
如果部署在网络边缘，
那么可以扮演网络防火墙的角色，而且是纯软件的

网络数据走向：
请求报文à 网关 à 路由 à 应用程序（等待用户请求）à 内核处理 à 路由 à 发送报文

iptables规则功能

表:
filter主要和主机自身有关，主要负责防火墙功能 
      过滤本机流入流出的数据包, 是默认使用的表;

input   :负责过滤所有目标地址是本机地址的数据包，就是过滤进入主机的数据包;

forward  :负责转发流经主机但不进入本机的数据包，和NAT关系很大;

output   :负责处理源地址的数据包，就是对本机发出的数据包;

NAT表：
负责网络地址转换，即 来源ip地址， 目标IP地址 和 端口 的 转换，
  一般用于 共享上网 或 特殊端口的 转换服务
snat    :源地址转换
dnat    :标地址转换
pnat    :标端口转换

mangle 表【包标记 表，可以根据 标记 决定 是否 允许ip数据包通过 】
将报文拆开来并修改报文标志位，最后封装起来
tcp标志位:   syn、syn+ack、ack、 fin、urg、psh、rst ；

5个检查点（内置链）
·PREROUTING
·INPUT
·FORWORD
·OUTPUT
·POSTROUTING  
  
netfilter主要工作在tcp/ip协议栈上的，
 主要集中在tcp报文首部和udp报文首部

iptables 不是真正的防火墙,
用户通过这个iptables代理,把安全设定执行到对应的"安全框架"中,
这个"安全框架" netfilter  才是真正的 防火墙
netfilter  才是 防火墙 真正的 "安全框架"(framework),
netfilter 位于内核空间
netfilter/iptables(简称 iptables)
iptables  是 内核提供的功能,不是真正的服务
Netfilter 是Linux操作系统核心层内部的一个数据包处理模块

NAT英文全称是“Network Address Translation”
一种把内部私有网络地址（IP地址）翻译成合法公有网络IP地址的技术
内核中的关卡
input关卡和output关卡
在 iptables 中称为 "链"

[root@Va4 ~]# sysctl   -a  |grep netfilter |head  -20 |tail  -5
....................
net.netfilter.nf_conntrack_generic_timeout = 600
net.netfilter.nf_conntrack_helper = 1
net.netfilter.nf_conntrack_icmp_timeout = 30
net.netfilter.nf_conntrack_log_invalid = 0
net.netfilter.nf_conntrack_max = 65536

规则的属性定义：

1.网络层协议
主要集中在ip协议报文上

2.传输层协议属性：
主要集中在
tcp
udp

icmp  icmp其并不是真正意义传输层的，而是工作在网络层和传输层之间的一种特殊的协议

3.ip报文的属性：
IP报文的属性为: 源地址.目标地址

4.iptables规则匹配
iptables如何查看表和链

大写字母选项：可以实现某种功能，比如添加删除清空规则链；
小写字母选项：用来匹配及其他；

-L ：list 列表
    -n :数字格式显示ip和端口；
    --line-numbers: 显示 规则链 中的规则序号
    -x ： 显示精确值，不要做单位换算；

-t :  指定表
     -t{fillter|nat|mangle|raw}

-v ：  显示详细信息 
-v  -vvv  -vvvv ..可以显示更详细的信息

4个表的优先级由高到低的顺序为:raw-->mangle-->nat-->filter 


Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1 
Va4  192.168.2.14 --- 外网 2  

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

-------------------------------------------- Va1 ------------------------------------
## ifconfig  eth1 down;ifconfig eth2 down;route  del default gw 192.168.0.254;route add default gw  192.168.0.14;ifconfig |awk '/inet /{print $2}';route  -n


[root@Va1 ~]# ip  -o  address
........................
[root@Va1 ~]# ip  route  show
default via 192.168.0.254 dev eth0 
..................
[root@Va1 ~]# rpm  -q  tree
tree-1.6.0-10.el7.x86_64

[root@Va1 ~]# lsblk
NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sr0            11:0    1 1024M  0 rom  
vda           252:0    0   20G  0 disk 
├─vda1        252:1    0    1G  0 part /boot
└─vda2        252:2    0   19G  0 part 
  ├─rhel-root 253:0    0   17G  0 lvm  /
  └─rhel-swap 253:1    0    2G  0 lvm  [SWAP]

[root@Va1 ~]# ifconfig  eth1  down  ## 临时性关闭指定的网卡 eth1
[root@Va1 ~]# ifconfig  eth2  down  ## 临时性关闭指定的网卡 eth2

[root@Va1 ~]# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
[root@Va1 ~]# route  add  default  gw  192.168.0.14   ## 临时性添加新网关{添加多个网关也是此命令}

[root@Va1 ~]# ip  route  show
default via 192.168.0.14 dev eth0 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.11 

[root@Va1 ~]# ifconfig |awk '/inet /{print $2}';route  -n
192.168.0.11
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.14    0.0.0.0         UG    0      0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.0.14   ## ping 通成功

...................................

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.1.14  ## ping 通成功

..................................

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.2.14   ## ping 通成功

.............................

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.1.15  ## ping 不通
...................
--- 192.168.1.15 ping statistics ---
5 packets transmitted, 0 received, 100% packet loss, time 830ms

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.2.16  ## ping 不通
.....................
--- 192.168.2.16 ping statistics ---
5 packets transmitted, 0 received, 100% packet loss, time 830ms

[root@Va1 ~]# yum  -y install  elinks  httpd |tail -3;rpm  -q  elinks  httpd
.....................

[root@Va1 ~]# echo "<h1> Va1   192.168.0.11 </h1>" > /var/www/html/index.html

[root@Va1 ~]# systemctl  start httpd && systemctl  enable  httpd
..................
[root@Va1 ~]# elinks  -dump  192.168.0.11
                                Va1 192.168.0.11
[root@Va1 ~]#  cat  /etc/yum.repos.d/local.repo 
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.0.254/rhel7
enabled=1
gpgcheck=0

 










Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

-------------------------------------------- Va2 ------------------------------------

[root@Va2 ~]# route -n
..................

# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
# route  add  default  gw  192.168.0.14   ## 临时性添加新网关{添加多个网关也是此命令}

[root@Va2 ~]# ifconfig   eth1  down ## 临时性关闭指定的网卡 eth1
[root@Va2 ~]# ifconfig   eth2  down  ## 临时性关闭指定的网卡 eth2

[root@Va2 ~]# route  del  default  gw  192.168.0.254
[root@Va2 ~]# route  add  default  gw  192.168.0.14

[root@Va2 ~]# ip  route  show
default via 192.168.0.14 dev eth0 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.12 

[root@Va2 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.0.12
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.14    0.0.0.0         UG    0      0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@Va2 ~]# yum  -y install  elinks  httpd |tail -3;rpm  -q  elinks  httpd
  mailcap.noarch 0:2.1.41-2.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.x86_64

[root@Va2 ~]# echo "<h1> Va2   192.168.0.12 </h1>" > /var/www/html/index.html

[root@Va2 ~]# systemctl  start httpd && systemctl  enable  httpd
Created symlink ..................
[root@Va2 ~]# elinks  -dump  192.168.0.12
                                Va2 192.168.0.12
[root@Va2 ~]#  cat  /etc/yum.repos.d/local.repo 
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.0.254/rhel7
enabled=1
gpgcheck=0
[root@Va2 ~]# 














Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

-------------------------------------------- Va3 ------------------------------------

# ifconfig  eth1  down  ## 临时性关闭指定的网卡 eth1
# ifconfig  eth2  down  ## 临时性关闭指定的网卡 eth2
# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
# route  add  default  gw  192.168.0.14   ## 临时性添加新网关{添加多个网关也是此命令}

[root@Va3 ~]# ifconfig  eth1  down
[root@Va3 ~]# ifconfig   eth2  down
[root@Va3 ~]# route  del default  gw  192.168.0.254
[root@Va3 ~]# route  add  default  gw  192.168.0.14
[root@Va3 ~]# ip  route  show
default via 192.168.0.14 dev eth0 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.13 

[root@Va3 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.0.13
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.14    0.0.0.0         UG    0      0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@Va3 ~]# yum  -y install  elinks  httpd |tail -3;rpm  -q  elinks  httpd
....................
[root@Va3 ~]# echo "<h1> Va3   192.168.0.13 </h1>" > /var/www/html/index.html

[root@Va3 ~]# systemctl  start httpd && systemctl  enable  httpd
.....................
[root@Va3 ~]# elinks  -dump  192.168.0.13
                                Va3 192.168.0.13

[root@Va3 ~]#  cat  /etc/yum.repos.d/local.repo 
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.0.254/rhel7
enabled=1
gpgcheck=0
















Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

-------------------------------------------- Va4 ------------------------------------


[root@Va4 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.0.14
192.168.1.14
192.168.2.14
127.0.0.1
192.168.122.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    0      0        0 eth0
............................

[root@Va4 ~]# /usr/sbin/sysctl  -p

[root@Va4 ~]# sysctl   -p


[root@Va4 ~]# cat  /etc/sysctl.conf    ## 永久性 开启 IP 转发 配置文件
........................

[root@Va4 ~]# sysctl   -a  |grep  netfilter  |tail -3
..................

[root@Va4 ~]# cat  /proc/sys/net/ipv4/ip_forward   ## 临时性 开启 IP 转发
1

[root@Va4 ~]# vim   /etc/sysctl.conf     ## 永久性 开启 IP 转发 路由功能 

[root@Va4 ~]# tail  -2  /etc/sysctl.conf

# For more information, see sysctl.conf(5) and sysctl.d(5).
net.ipv4.ip_forward=1

[root@Va4 ~]# sysctl   -p  # 从指定的文件加载系统参数，如不指定即从/etc/sysctl.conf中加载

net.ipv4.ip_forward = 1

[root@Va4 ~]# cat  /proc/sys/net/ipv4/ip_forward
1
[root@Va4 ~]# sysctl  -w  net.ipv4.ip_forward=0   ## 临时性 开启 IP 转发
net.ipv4.ip_forward = 0

[root@Va4 ~]# cat  /proc/sys/net/ipv4/ip_forward
0
[root@Va4 ~]# sysctl   -p  ## 重新加载 开启 IP 转发 路由功能  默认配置文件/etc/sysctl.conf
net.ipv4.ip_forward = 1

[root@Va4 ~]# cat  /proc/sys/net/ipv4/ip_forward
1

[root@Va4 ~]# yum clean  all > /dev/null &&  yum repolist |tail  -3
源标识                   源名称                                            状态
rhel7                    rhel-server-7.4-x86_64-dvd.iso                    4,986
repolist: 4,986
[root@Va4 ~]# cat  /etc/yum.repos.d/local.repo 
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.0.254/rhel7
enabled=1
gpgcheck=0


[root@Va4 ~]# yum  -y install  elinks  httpd |tail -3;rpm  -q  elinks  httpd
  mailcap.noarch 0:2.1.41-2.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.x86_64

[root@Va4 ~]# echo "<h1> NAT-PAT-Va4  192.168.0.14 </h1>" > /var/www/html/index.html

[root@Va4 ~]# systemctl  start httpd && systemctl  enable  httpd

[root@Va4 ~]# elinks  -dump  192.168.0.14
                            NAT-PAT-Va4 192.168.0.14


[root@Va4 ~]# systemctl is-active  firewalld
unknown
[root@Va4 ~]# systemctl is-active  NetworkManager
inactive

[root@Va4 ~]# yum  -y install  iptables-services  ## 能够永久保存规则的包
已安装:
  iptables-services.x86_64 0:1.4.21-18.0.1.el7.centos                                

完毕！

[root@Va4 ~]# rpm  -qa |grep  iptables
iptables-services-1.4.21-18.0.1.el7.centos.x86_64
iptables-1.4.21-18.0.1.el7.centos.x86_64

[root@Va4 ~]# lsmod |grep iptable
iptable_raw            12678  0 
iptable_mangle         12695  1 
iptable_nat            12875  1 
nf_nat_ipv4            14115  1 iptable_nat
iptable_filter         12810  1 
ip_tables              27115  4 iptable_filter,iptable_mangle,iptable_nat,iptable_raw


[root@Va4 ~]# service  iptables   start  &&  chkconfig   iptables  on

[root@Va4 ~]# service    iptables  status  |grep  -io  Active
Redirecting to /bin/systemctl status iptables.service
Active
active

============================================================
 
# iptables -t nat -A POSTROUTING -p tcp  -o  eth0
   -j SNAT--to-source 194.236.50.155-194.236.50.160:1024-32000

# iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80
   -j DNAT --to-destination 192.168.1.1-192.168.1.10:80-100

[root@Va4 ~]# iptables  -t mangle  -L |awk '/Chain/{print $2}'
PREROUTING
INPUT
FORWARD
OUTPUT
POSTROUTING

PREROUTING 路由前规则链  属于 3个 表
  raw表【状态跟踪 表】 mangle表【包标记 表】 nat表【地址转换 表】

INPUT       入站规则链  属于 3 个 表
                    mangle表【包标记 表】 nat表【地址转换 表】   filter表【过滤 表】

FORWARD     转发规则链  属于 2 个 表
                   mangle表【包标记 表】  filter表【过滤 表】

OUTPUT      出站规则链  属于 4 个 表
  raw表【状态跟踪 表】 mangle表【包标记 表】 nat表【地址转换 表】   filter表【过滤 表】

POSTROUTING 路由后规则链  属于 2 个 表
                   mangle表【包标记 表】 nat表【地址转换 表】


 参数(-p 协议、-s 源地址、-d 目的地址、--sport 源端口、--dport 目的端口、-i 进入网卡、-o 出去网卡 等)  

   源ip地址                     目标地址
   client     ------->    server 入
 随机地址 【端口】              固定地址【端口 22】--dport

   目标地址                      源ip地址
   client     <-------    server   出
 随机地址 【端口】              固定地址【端口 22】--sport


[root@Va4 ~]# iptables  -t  raw   -L |awk '/Chain/{print $2}'
PREROUTING
OUTPUT
[root@Va4 ~]# iptables  -t mangle  -L |awk '/Chain/{print $2}'
PREROUTING
INPUT
FORWARD
OUTPUT
POSTROUTING
[root@Va4 ~]# iptables  -t  nat   -L |awk '/Chain/{print $2}'
PREROUTING
INPUT
OUTPUT
POSTROUTING
[root@Va4 ~]# iptables  -t   filter   -L |awk '/Chain/{print $2}'
INPUT
FORWARD
OUTPUT

             #  iptables   [-t 表名]   命令选项  [链名]   参数[条件]    动作[-j 目标操作]
[root@proxy ~]# iptables   -t  filter  -I   INPUT  -p icmp  -j ACCEPT ;

# iptables -t nat -A POSTROUTING -p tcp  -o  eth0
  -j SNAT --to-source 194.236.50.155-194.236.50.160:1024-32000

# iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 
  -j DNAT --to-destination 192.168.1.1-192.168.1.10:80-100



[root@proxy ~]# iptables  -A  INPUT  -p tcp   \
> -m  multiport --dports  20:22,25,80,110,143,16501:16800  -j  ACCEPT
//一次性开启20,21,22,25,80,110,143,16501到16800所有的端口

-----------------------  拒绝 Va5 访问 多个 tcp 协议 端口 --------------

[root@Va4 ~]# iptables  -t  filter  -A  INPUT   \
> -p tcp  -m  multiport  --dports  22:80 \
> -m  mac  --mac-source  52:54:00:fd:9f:ea  -j  REJECT

[root@Va4 ~]# iptables  -t  filter  -nL  INPUT  --line-numbers

Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            icmptype 8 MAC 52:54:00:FD:9F:EA
2    REJECT     tcp  --  0.0.0.0/0            0.0.0.0/0            multiport dports 22:80 MAC 52:54:00:FD:9F:EA reject-with icmp-port-unreachable

 [root@Va5 ~]# ssh  -o StrictHostKeyChecking=no -l root  192.168.1.14  "echo Va5555 > Va5.txt"
ssh: connect to host 192.168.1.14 port 22: Connection refused
[root@Va5 ~]# elinks  -dump  192.168.1.14
ELinks: 拒绝连接

------- -R 修改规则 同意 Va5 访问 多个 tcp 协议 端口 --------------

[root@Va4 ~]# iptables  -t  filter  -R  INPUT  2 \
> -p  tcp  -m  multiport  --dports  22:80 \
> -m  mac  --mac-source   52:54:00:fd:9f:ea  -j  ACCEPT

[root@Va4 ~]# iptables  -t  filter  -nL  INPUT  --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            icmptype 8 MAC 52:54:00:FD:9F:EA
2    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            multiport dports 22:80 MAC 52:54:00:FD:9F:EA

多IP匹配,指定匹配的IP地址范围：
-m  iprange
   --src-range
   --dst-range

指定匹配的连续ip段
~]# iptables -A INPUT -s  -m iprange --src-range 10.0.10.100-10.0.10.200

限制多个目标IP的范围，参数是--dst-range,用法与--src-range一致。

2）禁止从 192.168.4.0/24 网段其他的主机登录
@proxy ~]# iptables -A INPUT -p tcp --dport 22  -s 192.168.4.0/24  -j  DROP


[root@Va4 ~]# iptables   -F
      
[root@Va4 ~]# iptables  -t  filter  -nL  
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

------------------- 拒绝 0.11-0.13 网段的 icmp 协议 ping --------------
[root@Va4 ~]# iptables  -t  filter  -A INPUT  \
> -p  icmp  -m  iprange  --src-range  \
> 192.168.0.11-192.168.0.13  -j  REJECT

[root@Va4 ~]# iptables  -t  filter  -nL  INPUT 
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            source IP range 192.168.0.11-192.168.0.13 reject-with icmp-port-unreachable

------------- 注意 -A 与 -I 的 区别 允许 应答包echo-reply[数字0] 进入Va4 的防火墙--------------

[root@Va4 ~]# iptables  -t  filter  -A INPUT  -p  icmp  \
> -m iprange  --src-range  192.168.0.11-192.168.0.13  \
> --icmp-type   echo-reply  -j  ACCEPT

[root@Va4 ~]# iptables  -t  filter  -nL  INPUT  --line-numbers

Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            source IP range 192.168.0.11-192.168.0.13 reject-with icmp-port-unreachable
2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            source IP range 192.168.0.11-192.168.0.13 icmptype 0

[root@Va4 ~]# ping  -c2  192.168.0.11  ## 结果不通
PING 192.168.0.11 (192.168.0.11) 56(84) bytes of data.

--- 192.168.0.11 ping statistics ---
2 packets transmitted, 0 received, 100% packet loss, time 999ms

----- 注意 改变规则顺序编号 允许 应答包echo-reply[数字0] 进入Va4 的防火墙-------

[root@Va4 ~]# iptables  -t  filter  -D  INPUT  2

[root@Va4 ~]# iptables  -t  filter  -I  INPUT  1 \
> -p  icmp  -m iprange  --src-range  192.168.0.11-192.168.0.13 \
>   --icmp-type   echo-reply  -j  ACCEPT

[root@Va4 ~]# iptables  -t  filter  -nL  INPUT  --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            source IP range 192.168.0.11-192.168.0.13 icmptype 0
2    REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            source IP range 192.168.0.11-192.168.0.13 reject-with icmp-port-unreachable

--- ## Va4 可以ping 通0.11-13,但11-13不能ping通Va4

[root@Va4 ~]# ping  -c2  192.168.0.11 
PING 192.168.0.11 (192.168.0.11) 56(84) bytes of data.
64 bytes from 192.168.0.11: icmp_seq=1 ttl=64 time=0.503 ms
64 bytes from 192.168.0.11: icmp_seq=2 ttl=64 time=0.512 ms

--- 192.168.0.11 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.503/0.507/0.512/0.022 ms
[root@Va4 ~]# 

---## 修改规则 -R 设置Va1,Va2,Va3 的 请求包echo-request[数字8]
    -m iprange  --src-range  192.168.0.11-192.168.0.13
     允许 进入 Va4 的防火墙

[root@Va4 ~]# iptables  -t  filter  -R  INPUT  2  \
> -p  icmp  -m iprange  --src-range  192.168.0.11-192.168.0.13 \
>   --icmp-type   echo-request  -j  ACCEPT

[root@Va4 ~]# iptables  -t  filter  -nL  INPUT  --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            source IP range 192.168.0.11-192.168.0.13 icmptype 0
2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            source IP range 192.168.0.11-192.168.0.13 icmptype 8

[root@Va4 ~]# sysctl   -a |grep ip_forward
net.ipv4.ip_forward = 1
net.ipv4.ip_forward_use_pmtu = 0
............
[root@Va4 ~]# tail  -1 /etc/sysctl.conf 
net.ipv4.ip_forward=1

[root@Va4 ~]# sysctl  -p
net.ipv4.ip_forward = 1
[root@Va4 ~]# cat  /proc/sys/net/ipv4/ip_forward
1
[root@Va4 ~]# iptables  -F
  

-------------- --------- raw  表 -----------------------------

[root@Va4 ~]# iptables -t  raw   -nL
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

------------------------- mangle 表 -----------------------

[root@Va4 ~]# iptables -t  mangle   -nL
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         
CHECKSUM   udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:68 CHECKSUM fill

----------------------- nat  表 ---------------------------

[root@Va4 ~]# iptables -t  nat    -nL
Chain PREROUTING (policy ACCEPT)

target[处理机制] prot[放行哪种协议] opt[额外的选项，--表示没有] source[源地址] destination[目标地址]

target     prot opt source               destination         

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         
RETURN     all  --  192.168.122.0/24     224.0.0.0/24        
RETURN     all  --  192.168.122.0/24     255.255.255.255     
MASQUERADE  tcp  --  192.168.122.0/24    !192.168.122.0/24     masq ports: 1024-65535
MASQUERADE  udp  --  192.168.122.0/24    !192.168.122.0/24     masq ports: 1024-65535
MASQUERADE  all  --  192.168.122.0/24    !192.168.122.0/24    
[root@Va4 ~]# 
       ---------------- filter 表 -------------------------

[root@Va4 ~]# iptables -t  filter  -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination       


[root@Va4 ~]# iptables -t  raw    -F
[root@Va4 ~]# iptables -t  mangle -F
[root@Va4 ~]# iptables -t  nat    -F
[root@Va4 ~]# iptables -t  filter -F

----------------------- raw  表 ---------------------------

[root@Va4 ~]# iptables -t  raw   -L
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

----------------------- mangle  表 ---------------------------

[root@Va4 ~]# iptables -t  mangle   -L
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         

----------------------- nat  表 ---------------------------

[root@Va4 ~]# iptables -t  nat    -L
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         

----------------------- filter  表 ---------------------------

[root@Va4 ~]# iptables  -t  filter    -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
[root@Va4 ~]# 


[root@Va4 ~]# iptables  -t  filter  -A  FORWARD \
> -p tcp  --dport  80  -j  ACCEPT

[root@Va4 ~]# iptables  -t  filter  -nL FORWARD
Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80

[root@Va4 ~]# iptables  -t  filter  -F  FORWARD

[root@Va4 ~]# iptables  -t  filter  -L  FORWARD
Chain FORWARD (policy ACCEPT)
target     prot opt source               destination  


--------------------------------------- 注意Va4 的网关 0.254 ------------------------------
[root@Va4 ~]# ip route  show
default via 192.168.0.254 dev eth0 
169.254.0.0/16 dev eth0 scope link metric 1002 
169.254.0.0/16 dev eth1 scope link metric 1003 
169.254.0.0/16 dev eth2 scope link metric 1004 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.14 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.14 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.14 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 

-------------------------------------------- 注意Va5 的网关 1.254 -----------------------------------
[root@Va5 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.1.254   0.0.0.0         UG    0      0        0 eth1
169.254.0.0     0.0.0.0         255.255.0.0     U     1003   0        0 eth1
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1
192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0

[root@Va5 ~]# route  del  default  gw  192.168.1.254

[root@Va5 ~]# route  add   default  gw  192.168.0.254
SIOCADDRT: 网络不可达

[root@Va5 ~]# route  add   default  gw  192.168.1.14

--------------------------------------- 注意Va5 的网关 1.14 ---------------------------------

[root@Va5 ~]# ip  route  show
default via 192.168.1.14 dev eth1 
169.254.0.0/16 dev eth1 scope link metric 1003 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.15 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 

------------------------------------- 注意Va6 的网关 2.254-----------------------------

[root@Va6 ~]# ip  route  show
default via 192.168.2.254 dev eth2 
169.254.0.0/16 dev eth2 scope link metric 1004 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.16 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1  

---- ## 0.11 和 1.15 有一个共同的路由器Va4 相通,在一个直连网络 -----------

[root@Va1 ~]# elinks  -dump  192.168.1.15 
                            NAT-PAT-Va5 192.168.1.15

--------------## Va6 ip网关是2.254,和Va1-Va3 不在同一个直连网络 --------

[root@Va1 ~]# elinks  -dump  192.168.2.16 ##网络 不通
^C
-------------------------------- 注意Va1 的网关 0.14-----------------------

[root@Va1 ~]# ip  route  show
default via 192.168.0.14 dev eth0 
169.254.0.0/16 dev eth0 scope link metric 1002 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.11 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 
-----------------------------------------------------------------------------

[root@Va4 ~]# sysctl   -p  #确保Va4 主机开启了路由转发功能
net.ipv4.ip_forward = 1
[root@Va4 ~]# cat /proc/sys/net/ipv4/ip_forward
1
 ----------  实现IP地址的伪装（SNAT源地址转换） --------------------

[root@Va4 ~]# iptables -t nat  -A  POSTROUTING  \
> -s  192.168.0.0/24  -p tcp  --dport  80   \
> -j SNAT  --to-source   192.168.2.14

[root@Va4 ~]# iptables -t nat  -nL  POSTROUTING
Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         
SNAT       tcp  --  192.168.0.0/24       0.0.0.0/0            tcp dpt:80 to:192.168.2.14

------------------------------------ 注意Va5 的网关 1.14  改成了 1.254 ------------------------------

[root@Va5 ~]# route   del  default  gw  192.168.1.14

[root@Va5 ~]# route   add   default  gw  192.168.1.254

[root@Va5 ~]# ip  route  show
default via 192.168.1.254 dev eth1 
169.254.0.0/16 dev eth1 scope link metric 1003 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.15 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 

  --------------------------------- 注意Va6 的网关 2.254---------------------------

[root@Va6 ~]# ip  route  show
default via 192.168.2.254 dev eth2 
169.254.0.0/16 dev eth2 scope link metric 1004 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.16 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 

----- ##ping 通的原因是 0.11 的地址伪装转成了2.14,所以通 2.16 同一网段

[root@Va1 ~]# elinks  -dump  192.168.2.16
                            NAT-PAT-Va6 192.168.2.16

----------------## 不通的原因是 0.11 的地址伪装转成了2.14,所以不通 1.15 不同网络 -----

[root@Va1 ~]# elinks  -dump  192.168.1.15 
^C
 --- 通过日志会发现，客户端0.11 是先伪装为了192.168.2.14 之后再访问的Va6主机 web服务器
[root@Va6 ~]# tail   -3  /var/log/httpd/access_log 

192.168.2.14 - - [19/Dec/2018:20:07:56 +0800] "GET / HTTP/1.1" 200 37 "-" "ELinks/0.12pre6 (textmode; Linux; -)"
192.168.2.14 - - [19/Dec/2018:20:08:12 +0800] "GET / HTTP/1.1" 200 37 "-" "ELinks/0.12pre6 (textmode; Linux; -)"
192.168.2.14 - - [19/Dec/2018:20:20:35 +0800] "GET / HTTP/1.1" 200 37 "-" "ELinks/0.12pre6 (textmode; Linux; -)"


masquerade 
n.	伪装; 化装舞会; 掩饰;
vi.	伪装; 假扮; 乔装; 冒充;

MASQUERADE 【masquerade 】改写封包来源 IP 为防火墙 NIC IP，
可以指定 port 对应的范围，进行完此处理动作后，
直接跳往下一个规则（mangleostrouting）。

这个功能与 SNAT 略有不同，
当进行 IP 伪装时，不需指定要伪装成哪个 IP，
IP 会从网卡直接读，
当使用拨接连线时，
IP 通常是由 ISP 公司的 DHCP 服务器指派的，
这个时候 MASQUERADE 特别有用。
例如：iptables -t nat-A POSTROUTING -p tcp
          -j MASQUERADE --to-ports 1024-31000

--# 对于 内网的网关主机Va4的 外网IP [比如eth1 --1.14 ,eth2 --2.14 ]
       不固定的情况 可以执行 下面的地址 伪装， 动态伪装IP 

[root@Va4 ~]# iptables -t nat  -R  POSTROUTING  1  \
>  -s  192.168.0.0/24  -p tcp  --dport  80   -j  MASQUERADE 

[root@Va4 ~]# iptables -t nat  -nL  POSTROUTING  --line-numbers
Chain POSTROUTING (policy ACCEPT)
num  target     prot opt source               destination         
1    MASQUERADE  tcp  --  192.168.0.0/24       0.0.0.0/0            tcp dpt:80

--- ## ping 通的原因是 0.11 的地址 动态伪装转成了1.14,所以通1.15 同一网段

[root@Va1 ~]# elinks  -dump  192.168.1.15
                            NAT-PAT-Va5 192.168.1.15

[root@Va5 ~]# tail  -1  /var/log/httpd/access_log 
192.168.1.14 - - [19/Dec/2018:20:36:45 +0800] "GET / HTTP/1.1" 200 37 "-" "ELinks/0.12pre6 (textmode; Linux; -)"


-- ## ping 通的原因是 0.11 的地址 动态伪装转成了2.14,所以通2.16 同一网段

[root@Va1 ~]# elinks  -dump  192.168.2.16
                            NAT-PAT-Va6 192.168.2.16
 
[root@Va6 ~]# tail   -1  /var/log/httpd/access_log 
192.168.2.14 - - [19/Dec/2018:20:36:48 +0800] "GET / HTTP/1.1" 200 37 "-" "ELinks/0.12pre6 (textmode; Linux; -)"

---- 注意 Va5 是1.15 , 和Va6 的2.16 不是同一网段,且Va5的网关是[192.168.1.254],
       Va5的网关 不是Va4[192.168.1.14], Va4的网关是[192.168.0.254]

[root@Va4 ~]# ip route  show
default via 192.168.0.254 dev eth0 
..................
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.14 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.14 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.14 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 

[root@Va5 ~]#  elinks  -dump  192.168.2.16  ## Va5 数据不经过Va4主机
ELinks: 拒绝连接

-------## 对于 内网的网关主机Va4的 外网IP [比如eth0 --0.14 , eth1 --1.14 ,eth2 --2.14 ]
       不固定的情况 可以执行 下面的地址 伪装， 动态伪装IP 

[root@Va4 ~]# iptables  -t  nat  -A  POSTROUTING \
> -s  192.168.1.0/24   -p  tcp  --dport  80  -j  MASQUERADE

[root@Va4 ~]# iptables  -t  nat  -nL  POSTROUTING  --line-numbers
Chain POSTROUTING (policy ACCEPT)
num  target     prot opt source               destination         
1    MASQUERADE  tcp  --  192.168.0.0/24       0.0.0.0/0            tcp dpt:80
2    MASQUERADE  tcp  --  192.168.1.0/24       0.0.0.0/0            tcp dpt:80

-------- ##  结果还是不通[原因 1.15的网关不是Va4[192.168.1.14]] 不经过 Va4 ---------

[root@Va5 ~]#  elinks  -dump  192.168.2.16  
ELinks: 拒绝连接
 
---------  实现IP地址的伪装（SNAT源地址转换） --------------------
[root@Va4 ~]# iptables -t nat  -R  POSTROUTING 2  \
>   -s  192.168.1.0/24  -p tcp  --dport  80  \
>   -j  SNAT  --to-source   192.168.2.14

[root@Va4 ~]# iptables  -t  nat  -nL  POSTROUTING  --line-numbers
Chain POSTROUTING (policy ACCEPT)
num  target     prot opt source               destination         
1    MASQUERADE  tcp  --  192.168.0.0/24       0.0.0.0/0            tcp dpt:80
2    SNAT       tcp  --  192.168.1.0/24       0.0.0.0/0            tcp dpt:80 to:192.168.2.14

--# 把 Va5 的网关改成 Va4 的eth1地址 1.14, 数据开始经过Va4主机,
---##          Va4的nat表中的路由后规则链开始起作用了

[root@Va5 ~]# route  del  default  gw  192.168.1.254

[root@Va5 ~]# route   add  default   gw  192.168.1.14  ##网关改成 Va4 的eth1地址 1.14

[root@Va5 ~]# ip  route  show
default via 192.168.1.14 dev eth1 
169.254.0.0/16 dev eth1 scope link metric 1003 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.15 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 

[root@Va5 ~]#  elinks  -dump  192.168.2.16   ## ping 成功
                            NAT-PAT-Va6 192.168.2.16
[root@Va6 ~]# tail   -1  /var/log/httpd/access_log 
192.168.2.14 - - [19/Dec/2018:21:16:21 +0800] "GET / HTTP/1.1" 200 37 "-" "ELinks/0.12pre6 (textmode; Linux; -)"



# iptables     [-t 表名]  
  命令选项(-A 追加规则[链名]、 -D 删除规则[链名]、 -R 修改规则[链名]、 -I 插入规则[链名]、 -L 查看规则[链名] 等)  
 参数(-p 协议、-s 源地址、-d 目的地址、--sport 源端口、--dport 目的端口、-i 进入网卡、-o 出去网卡 等)  
 动作-j ( ACCEPT 接受包、DROP 丢弃包、REJECT 丢弃包并通知对方、REDIRECT 端口重定向包 ，
          RETURN 返回主链继续匹配, MASQUERADE 地址伪装, MARK 打标签,
        LOG将封包相关讯息记录在 /var/log/messages中，SNAT改写封包来源IP，DNAT改写封包目的地IP  等)


masquerade 
n.	伪装; 化装舞会; 掩饰;
vi.	伪装; 假扮; 乔装; 冒充;

MASQUERADE 【masquerade 】改写封包来源 IP 为防火墙 NIC IP，
可以指定 port 对应的范围，进行完此处理动作后，
直接跳往下一个规则（mangleostrouting）。

这个功能与 SNAT 略有不同，
当进行 IP 伪装时，不需指定要伪装成哪个 IP，
IP 会从网卡直接读，
当使用拨接连线时，
IP 通常是由 ISP 公司的 DHCP 服务器指派的，
这个时候 MASQUERADE 特别有用。
例如：iptables -t nat-A POSTROUTING -p tcp
          -j MASQUERADE --to-ports 1024-31000


SNAT改写封包来源IP 为某特定 IP 或 IP 范围，
可以指定 port 对应的范围，进行完此处理动作后，
将直接跳往下一个规则（mangleostrouting）。
例如：
iptables -t nat -A POSTROUTING -p tcp -o eth0
    -j SNAT --to-source 194.236.50.155-194.236.50.160:1024-32000

DNAT改写封包目的地IP 为某特定 IP 或 IP 范围，
可以指定 port 对应的范围，进行完此处理动作后，
将会直接跳往下一个规则（filter:input 或 filter:forward）。
例如：
iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 
        -j DNAT --to-destination 192.168.1.1-192.168.1.10:80-100

# iptables -t nat -A POSTROUTING -p tcp  -o  eth0
  -j SNAT --to-source 194.236.50.155-194.236.50.160:1024-32000

# iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 
  -j DNAT --to-destination 192.168.1.1-192.168.1.10:80-100

 ----------  实现IP地址的伪装（SNAT源地址转换） --------------------

[root@Va4 ~]# iptables -t nat  -A  POSTROUTING  \
> -s  192.168.0.0/24  -p tcp  --dport  80   \
> -j SNAT  --to-source   192.168.2.14


2.DNAT目标地址转换对于目标地址转换，
  数据流向是从外向内的，外面的是客户端，
  里面的是服务器端
  通过目标地址转换，
我们可以让外面的ip通过
我们对外的外网ip来
访问我们服务器不同的服务器，
而我们的服务却放在内网服务器的不同的服务器上。
目标地址转换
：iptables -t nat -A PREROUTING -d 192.168.10.18 -p tcp --dport 80 -j DNAT --to-destination 172.16.100.2
目标地址转换要做在到达网卡之前进行转换,所以要做在PREROUTING这个位置上


DNAT：只能用在PREROUTING、OUTPUT和自定义的链上
--to-destination [ipaddr[-ipaddr]][:port[-port]] 轮询访问
--random 随机访问
--persistent 固定访问
做DNAT只开放有限协议的有限端口，这是与SNAT不同的地方，
对于服务器来讲要隐藏所有的东西，
仅留一个需要开放给互联网访问的端口，
而且SNAT和DNAT不建议在同一台主机使用。

REDIRECT 【redirect】将封包重新导向到另一个端口（PNAT），
进行完此处理动作后，将会继续比对其它规则。
这个功能可以用来实作通透式proxy 或用来保护 web 服务器。
例如：
iptables  -t  nat  -A  PREROUTING -p tcp --dport 80 -j  REDIRECT --to-ports 8080

 ~]# iptables  -t  nat  -A  PREROUTING  -p tcp  --dport 80 -j  REDIRECT --help |wc  -l
87
 ~]# iptables  -t  nat  -A  PREROUTING  -p tcp  --dport  80 -j  REDIRECT  --help  |tail  -18

REDIRECT target options:
 --to-ports <port>[-<port>]
				Port (range) to map to.
 [--random]

tcp match options:
[!] --tcp-flags mask comp	match when TCP flags & mask == comp
				(Flags: SYN ACK FIN RST URG PSH ALL NONE)
[!] --syn			match when only SYN flag set
				(equivalent to --tcp-flags SYN,RST,ACK,FIN SYN)
[!] --source-port port[:port]
 --sport ...
				match source port(s)
[!] --destination-port port[:port]
 --dport ...
				match destination port(s)

[root@localhost ~]# iptables -A PREROUTING -t nat -d 192.168.10.11 -p tcp --dport 80 -j REDIRECT --to-ports 8080
#把来自80的访问映射到8080

# iptables -t raw -F ; iptables -t mangle -F; iptables -t  nat -F ; iptables -t filter -F

[root@Va4 ~]# iptables -t raw -L ; iptables -t mangle -L; iptables -t  nat -L ; iptables -t filter -L
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
[root@Va4 ~]# 

DNAT改写封包目的地IP 为某特定 IP 或 IP 范围，
可以指定 port 对应的范围，进行完此处理动作后，
将会直接跳往下一个规则（filter:input 或 filter:forward）。
例如：
iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 
        -j DNAT --to-destination 192.168.1.1-192.168.1.10:80-100


[root@Va4 ~]# iptables  -t  nat  -A PREROUTING -p tcp  -d 192.168.0.0/24   --dport  80 -j DNAT  --to-destination  192.168.0.11-192.168.0.13:9091-9093
------------------------------------#把来自 9091-9093 的访问映射到 80 -------------------
[root@Va4 ~]# iptables  -t nat  -I PREROUTING 1 -p  tcp -d 192.168.0.11  --dport  9091  -j  REDIRECT  --to-ports  80
[root@Va4 ~]# iptables  -t nat  -I PREROUTING 2 -p  tcp -d 192.168.0.12  --dport  9092  -j  REDIRECT  --to-ports  80
[root@Va4 ~]# iptables  -t nat  -I PREROUTING 3 -p  tcp -d 192.168.0.13  --dport  9093  -j  REDIRECT  --to-ports  80

[root@Va4 ~]# iptables  -t  nat  -R  PREROUTING 4  -p tcp  -d  192.168.1.14   --dport  80 -j DNAT  --to-destination  192.168.0.11-192.168.0.13:9091-9093

[root@Va4 ~]# iptables  -t nat  -nL PREROUTING --line-numbers
Chain PREROUTING (policy ACCEPT)
num  target     prot opt source               destination         
1    REDIRECT   tcp  --  0.0.0.0/0            192.168.0.11         tcp dpt:9091 redir ports 80
2    REDIRECT   tcp  --  0.0.0.0/0            192.168.0.12         tcp dpt:9092 redir ports 80
3    REDIRECT   tcp  --  0.0.0.0/0            192.168.0.13         tcp dpt:9093 redir ports 80
4    DNAT       tcp  --  0.0.0.0/0            192.168.1.14         tcp dpt:80 to:192.168.0.11-192.168.0.13:9091-9093

[root@Va4 ~]# iptables  -t  nat  -R PREROUTING 4  -p  tcp  -d   192.168.1.14   --dport  80 -j DNAT  --to-destination  192.168.0.11:80

[root@Va4 ~]# iptables  -t nat  -nL PREROUTING --line-numbers
Chain PREROUTING (policy ACCEPT)
num  target     prot opt source               destination         
1    REDIRECT   tcp  --  0.0.0.0/0            192.168.0.11         tcp dpt:9091 redir ports 80
2    REDIRECT   tcp  --  0.0.0.0/0            192.168.0.12         tcp dpt:9092 redir ports 80
3    REDIRECT   tcp  --  0.0.0.0/0            192.168.0.13         tcp dpt:9093 redir ports 80
4    DNAT       tcp  --  0.0.0.0/0            192.168.1.14         tcp dpt:80 to:192.168.0.11:80

[root@Va6 ~]# elinks  -dump  192.168.2.14
                            NAT-PAT-Va4 192.168.0.14

[root@Va5 ~]# elinks  -dump  192.168.1.14
                                Va1 192.168.0.11

[root@Va4 ~]# elinks  -dump  192.168.0.14
                            NAT-PAT-Va4 192.168.0.14
[root@Va4 ~]# elinks  -dump  192.168.1.14
                            NAT-PAT-Va4 192.168.0.14

[root@Va4 ~]# iptables  -t  nat  -A PREROUTING   -p  tcp  -d   192.168.2.14   --dport  81  -j DNAT  --to-destination  192.168.0.12:80

[root@Va6 ~]# elinks  -dump  192.168.2.14:81
                                Va2 192.168.0.12

[root@Va4 ~]# iptables  -t  nat  -A PREROUTING   -p  tcp  -d   192.168.1.14   --dport  83  -j DNAT  --to-destination  192.168.0.13:80

[root@Va5 ~]# elinks  -dump  192.168.1.14
                                Va1 192.168.0.11

[root@Va5 ~]# elinks  -dump  192.168.1.14:83
                                Va3 192.168.0.13

[root@Va4 ~]# iptables  -t nat  -nL PREROUTING --line-numbers
Chain PREROUTING (policy ACCEPT)
num  target     prot opt source               destination         
1    REDIRECT   tcp  --  0.0.0.0/0            192.168.0.11         tcp dpt:9091 redir ports 80
2    REDIRECT   tcp  --  0.0.0.0/0            192.168.0.12         tcp dpt:9092 redir ports 80
3    REDIRECT   tcp  --  0.0.0.0/0            192.168.0.13         tcp dpt:9093 redir ports 80
4    DNAT       tcp  --  0.0.0.0/0            192.168.1.14         tcp dpt:80 to:192.168.0.11:80
5    DNAT       tcp  --  0.0.0.0/0            192.168.2.14         tcp dpt:81 to:192.168.0.12:80
6    DNAT       tcp  --  0.0.0.0/0            192.168.1.14         tcp dpt:83 to:192.168.0.13:80
[root@Va4 ~]# 
[root@Va4 ~]# iptables  -t nat  -F  PREROUTING 
[root@Va4 ~]# iptables  -t nat  -nL PREROUTING --line-numbers
Chain PREROUTING (policy ACCEPT)
num  target     prot opt source               destination         
[root@Va4 ~]# iptables  -t  nat  -A PREROUTING   -p  tcp   -d   192.168.1.14,192.168.2.14   --dport  80  -j DNAT  --to-destination   192.168.0.11-192.168.0.13:80

[root@Va4 ~]# iptables  -t nat  -nL PREROUTING --line-numbersChain PREROUTING (policy ACCEPT)
num  target     prot opt source               destination         
1    DNAT       tcp  --  0.0.0.0/0            192.168.1.14         tcp dpt:80 to:192.168.0.11-192.168.0.13:80
2    DNAT       tcp  --  0.0.0.0/0            192.168.2.14         tcp dpt:80 to:192.168.0.11-192.168.0.13:80

[root@Va4 ~]# reboot
Connection to 192.168.0.14 closed by remote host.
Connection to 192.168.0.14 closed.
[root@room9pc01 ~]# ssh  -X  192.168.0.14











Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

------------------------- Va5 -----------------------------
ifconfig  eth0 down;ifconfig eth2 down;route  del default gw 192.168.0.254;route add default gw  192.168.1.254;ifconfig |awk '/inet /{print $2}';route  -n

# ifconfig  eth0  down  ## 临时性关闭指定的网卡 eth0
# ifconfig  eth2  down  ## 临时性关闭指定的网卡 eth2
# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
# route  add  default  gw  192.168.1.254   ## 临时性添加新网关{添加多个网关也是此命令}

[root@hiys ~]# ssh  -X  192.168.1.15
Warning: Permanently added '192.168.1.15' (ECDSA) to the list of known hosts.
root@192.168.1.15's password: 1
.......................
[root@Va5 ~]# ifconfig  |awk '/inet /{print  $2}'
192.168.0.15
192.168.1.15
192.168.2.15
127.0.0.1
[root@Va5 ~]# ip  route  show
default via 192.168.0.254 dev eth0 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.15 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.15 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.15 

[root@Va5 ~]# ifconfig  eth0  down
[root@Va5 ~]# ifconfig  eth2  down
[root@Va5 ~]# route  del  default  gw   192.168.0.254
SIOCDELRT: 没有那个进程
[root@Va5 ~]# echo  $?
7
[root@Va5 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1

[root@Va5 ~]# route  add   default  gw   192.168.1.254

[root@Va5 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.1.15
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.1.254   0.0.0.0         UG    0      0        0 eth1
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1

[root@Va5 ~]# ip  route  show

default via 192.168.1.254 dev eth1 

169.254.0.0/16 dev eth1 scope link metric 1003 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.15 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 

[root@Va5 ~]# vim  /etc/yum.repos.d/local.repo 
[root@Va5 ~]# cat  /etc/yum.repos.d/local.repo

[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.1.254/rhel7
enabled=1
gpgcheck=0

[root@Va5 ~]# ls  /etc/yum.repos.d/
local.repo  redhat.repo

[root@Va5 ~]# yum  clean  all >/dev/null &&  yum repolist  |tail  -3
源标识                   源名称                                            状态
rhel7                    rhel-server-7.4-x86_64-dvd.iso                    4,986
repolist: 4,986

[root@Va5 ~]# yum  -y install  elinks  httpd |tail -3;rpm  -q  elinks  httpd
  mailcap.noarch 0:2.1.41-2.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.x86_64

[root@Va5 ~]# echo "<h1> NAT-PAT-Va5  192.168.1.15 </h1>" > /var/www/html/index.html

[root@Va5 ~]# systemctl  start httpd && systemctl  enable  httpd
Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.

[root@Va5 ~]# elinks  -dump  192.168.1.15
                            NAT-PAT-Va5 192.168.1.15

[root@Va5 ~]# yum  -y  install   iptables-services |tail  -3
  iptables-services.x86_64 0:1.4.21-18.el7                                      

完毕！
[root@Va5 ~]# rpm  -qa |grep  iptables
iptables-1.4.21-18.el7.x86_64
iptables-services-1.4.21-18.el7.x86_64

[root@Va5 ~]# service  iptables  start  && chkconfig   iptables  on

Redirecting to /bin/systemctl start iptables.service
注意：正在将请求转发到“systemctl enable iptables.service”。
Created symlink from /etc/systemd/system/basic.target.wants/iptables.service to /usr/lib/systemd/system/iptables.service.

[root@Va5 ~]# iptables  -t  filter -F
[root@Va5 ~]# iptables  -t  filter -F ;iptables  -t  filter  -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination    














Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

-------------------------------------------- Va6 ------------------------------------
#ifconfig  eth0 down;ifconfig eth1 down;route  del default gw 192.168.0.254;route add default gw  192.168.2.254;ifconfig |awk '/inet /{print $2}';route  -n

# ifconfig  eth0  down  ## 临时性关闭指定的网卡 eth0
# ifconfig  eth1  down  ## 临时性关闭指定的网卡 eth1
# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
# route  add  default  gw  192.168.2.254   ## 临时性添加新网关{添加多个网关也是此命令}

[root@hiys ~]# ssh  -X  192.168.2.16
Warning:..............
root@192.168.2.16's password: 1
......................
[root@Va6 ~]# ifconfig  |awk '/inet /{print  $2}'
192.168.0.16
192.168.1.16
192.168.2.16
127.0.0.1
[root@Va6 ~]# ifconfig  eth0   down
[root@Va6 ~]# ifconfig   eth1   down

[root@Va6 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 eth2

[root@Va6 ~]# ip  route  show
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.16 

[root@Va6 ~]# route  add  default  gw   192.168.2.254

[root@Va6 ~]# ip  route  show
default via 192.168.2.254 dev eth2 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.16 

[root@Va6 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.2.16
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.2.254   0.0.0.0         UG    0      0        0 eth2
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 eth2

[root@Va6 ~]# vim  /etc/yum.repos.d/local.repo 
[root@Va6 ~]# cat   /etc/yum.repos.d/local.repo

[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.2.254/rhel7
enabled=1
gpgcheck=0

[root@Va6 ~]# ls   /etc/yum.repos.d/
local.repo  redhat.repo
[root@Va6 ~]#  yum  clean  all >/dev/null &&  yum repolist  |tail  -3
源标识                   源名称                                            状态
rhel7                    rhel-server-7.4-x86_64-dvd.iso                    4,986
repolist: 4,986

[root@Va6 ~]# yum  -y install  elinks  httpd |tail -3;rpm  -q  elinks  httpd
  httpd-tools.x86_64 0:2.4.6-67.el7.centos     mailcap.noarch 0:2.1.41-2.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.centos.x86_64

[root@Va6 ~]# echo "<h1> NAT-PAT-Va6  192.168.2.16 </h1>" > /var/www/html/index.html

[root@Va6 ~]# systemctl start  httpd  &&  systemctl  enable  httpd
Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.

[root@Va6 ~]# elinks  -dump  192.168.2.16
                            NAT-PAT-Va6 192.168.2.16

[root@Va6 ~]# yum  -y  install   iptables-services |tail  -3
  iptables-services.x86_64 0:1.4.21-18.el7                                      

完毕！
[root@Va6 ~]# rpm  -qa  |grep iptables
iptables-1.4.21-18.el7.x86_64
iptables-services-1.4.21-18.el7.x86_64

[root@Va6 ~]# service  iptables  start  && chkconfig   iptables  on

Redirecting to /bin/systemctl start iptables.service
注意：正在将请求转发到“systemctl enable iptables.service”。
Created symlink from /etc/systemd/system/basic.target.wants/iptables.service to /usr/lib/systemd/system/iptables.service.

[root@Va6 ~]# systemctl is-active  firewalld
unknown
[root@Va6 ~]# iptables  -t  filter -F ;iptables  -t  filter  -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination   







 
 




==========================  TCP/IP三次握手四次断开  =================
=================== TCP的三次握手(建立连接）和四次挥手(关闭连接）==========

                                       Client                                   Server
                             没有任何连接状态 CLOSED |                                   | CLOSED 没有任何连接状态
                                            |                                   | LISTEN 侦听来自远方TCP端口的连接请求
发送SYN,请求建立连接(seq=100,ctl=SYN) send SYN |--------------- SYN -------------->| receive SYN
       在发送连接请求后等待匹配的连接请求 SYN_SENT |                                   | SYN_RECV 服务端收到建立连接的SYN没有收到ACK包的时候状态
                 receive SYN+ACK |<-- SYN+ACK ---| SYN+ACK send 发送SYN，ACK(seq=300,ack=101,ctl=SYN,ACK)
                                        |            | SYN-RECEIVED 在收到和发送一个连接请求后等待对连接请求的确认状态
            发送ACK(seq=101  ack=301  ctl=ACK) |-------------- ACK --------------->| receive ACK
 代表一个打开的连接，数据可以传送给用户 ESTABLISHED|                                  | ESTABLISHED 代表一个打开的连接，数据可以传送给用户
                                            | <=== TCP session established ===> |
                                                         |                                              |
      发送FIN 请求断开连接(FIN=1,ACK=1) send FIN |-------------- FIN --------------->| receive FIN
等待远程TCP的连接中断请求，或先前的连接中断请求的确认 FIN_WAIT-1 |                       | CLOSE_WAIT 等待从本地用户发来的连接中断请求
                                 receive ACK |<------------- ACK ----------------| send ACK 发送ACK(ACK=1)
               从远程TCP等待连接中断请求 FIN_WAIT-2 |                                   |
                     receive FIN |<------------- FIN ----------------| send FIN 发送FIN 请求断开连接(FIN=1,ACK=1)
等待足够的时间以确保远程TCP接收到连接中断请求的确认 TIME_WAIT |                          | LAST_ACK 等待原来发向远程TCP的连接中断请求的确认
                            发送ACK(ACK=1) send ACK |-------------- ACK --------------->| receive ACK
                                     TimeOut |                                   | CLOSED 没有任何连接状态
                               没有任何连接状态 CLOSED |                                   |

位码即tcp标志位,有6种标示:

SYN(synchronous建立联机)

ACK(acknowledgement 确认)

PSH(push传送)

FIN(finish结束)

RST(reset重置)

URG(urgent紧急)

Sequence number(顺序号码)[32位序列号 和 32 位确认号 举例,seq=100,]

Acknowledge number(确认号码)
established   已建立的; 已设立的; 已制定的; 确定的
receive 收到; 接待; 接到; 接纳;
          接收; 受理; 欢迎; 承受;
TCP(Transmission Control Protocol)　传输控制协议
-----------------------------------------------------------------------------------------------------
============================================================
注意事项
1.       没有指定规则表则默认指filter表。
2.       不指定规则链则指表内所有的规则链。
3.       在规则链中匹配规则时会依次检查，匹配即停止（LOG规则除外），若没有匹配项则按链的默认状态处理。

nat表{地址转换表}
filter表（数据过滤表）
【raw表（状态跟踪表） 一般禁用，耗CPU资源】
mangle表（包标记表）【64跳 15跳，新路由协议支持超过 15 跳 】

 NETWORK 云 --> raw 表【PREROUTING链路由前】--> mangle 表 【PREROUTING链路由前】--> nat 表 【PREROUTING链路由前,可以在此做DNAT，但不要做过滤】
                                                                                                                                      |
                       Routing 【Decision 决定路由，看是交给本地主机还是转发给其它主机】<- -  - - - - - - - <- -|
                                        \|/
     |--------------------------------------------------|--------------------------------------------------------------------------------------|
     |                                                                                                  |
 mangle 表 【INPUT链入站规则,数据包是发给本地主机的                         mangle 表 【FORWARD链转发,数据包要转发给其它主机,
 这里是在路由之后，交由本地主机之前，可以做一些相应的修改 】                  这是第一次路由决定之后，在最后的路由决定之前,仍可以对数据包进行某些修改】
     |  推断nat 表 【INPUT链 作用】                                                                  |
 filter表 【INPUT链入站规则，在这里我们可以                                filter表 【FORWARD链转发,在这可以对所有转发的数据包进行过滤.
  对流入的所有数据包进行过滤， 无论它来自哪个网络接口】                       注意：经过这里的数据包是转发的，方向是双向的】
     |                                                                                                  |
 Local Process【交给本地主机的应用程序进行处理】                                      |
     |                                                                                                  |
 Routing 【Decision 决定，处理完毕后进行路由决定，看该往哪里发出】                      |
    \|/                                                                                                |
 raw 表【OUTPUT链出站】-->mangle 表 【OUTPUT链出站，在这可以修改数据包，但不要做过滤】      |
                                   |                                                                   |
        nat 表 【OUTPUT链出站，可以对防火墙本机发出的数据做 NAT 】                            |
                                   |                                                                   |
        filter表 【OUTPUT链出站,可以对本地出去的数据包进行过滤】                              |
                                   |                                                                   |
               Routing 【Decision 决定】 < - - - - - - - - - - - - - - - - - - - |
                                  \|/
    mangle 表 【POSTROUTING 路由后规则链,这里对经过防火墙的其它主机的数据包进行处理，还对防火墙 本机 产生的数据包进行处理
                                到这里已经做完了所有的路由决定，其它主机的数据包仍然在本地主机 】
                                   |
          nat 表 【POSTROUTING 路由后规则链，在这一般都用来做 SNAT ，不要做过滤】
                                   |
                      NETWORK 云 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
规则表先后顺序：raw表→mangle表→nat表→filter表 
规则链先后顺序： 
入站：PREROUTING → INPUT 
出站：OUTPUT → POSTROUTING 
转发：PREROUTING → FORWARD → POSTROUTING

raw 表 包含 2个 链 PREROUTING 链   OUTPUT 链
mangle表 包含 5个 链 PREROUTING 链  INPUT 链   FORWARD 链  OUTPUT 链   POSTROUTING 链
nat 表 包含 4个 链 PREROUTING 链   INPUT 链    OUTPUT 链   POSTROUTING 链 
filter表包含3链 INPUT 链    FORWARD 链    OUTPUT 链 

------------------------------------------------------------------------------------------------------------------------||
                本机    HTTP   Web   服务     [ 终点/起点]
                        |                                    |
---------------------------------|---------------------------------------------------|---------------------------------|
内核空间              /|\                                  \|/
             input 入 站 规则--链              output 出站规则--链
                       /|\                                  \|/
                        是                                   |
 路由前规则--链         |                转发规则--链   链--路由后规则
 prerouting-->|目标是否是本机?|--否-->forward-->postrouting---转发至
       |                                                      |               \|/
----------|---------------------------------  本机  网卡  ----------------------|-----------------------|-----
       |---------------------------------- 本机 ---------------------------------|                |---->>转发至 其他主机

------------------------------------------------------- 四表 五链  关系 结构 --------------------------------------
 raw表【状态跟踪 表】                                                     raw表【状态跟踪 表】
 mangle表【包标记 表】    mangle表【包标记表】 mangle表【包标记表】 mangle表【包标记表】 mangle表【包标记 表】
 nat表【地址转换 表】      nat表【地址转换 表】                         nat表【地址转换 表】    nat表【地址转换 表】
                       filter表【过滤 表】 filter表【过滤 表】 filter表【过滤 表】  
 prerouting路由前规则链  input入站规则链      forward转发规则链   output出站规则链   postrouting路由后规则链
          |                          |                         |                      |                       |
        规则                      规则                      规则                 规则                    规则
          |                          |                         |                      |                       |
        规则                      规则                      规则                 规则                    规则
          |                          |                         |                      |                       |
 ----------------------------------------------------------------------------------------------------------------------------------- 

             #  iptables   [-t 表名]   命令选项  [链名]   参数[条件]    动作[-j 目标操作]
[root@proxy ~]# iptables   -t  filter  -I   INPUT  -p icmp  -j ACCEPT ;

# iptables     [-t 表名]  
  命令选项(-A 追加规则[链名]、 -D 删除规则[链名]、 -R 修改规则[链名]、 -I 插入规则[链名]、 -L 查看规则[链名] 等)  
 参数(-p 协议、-s 源地址、-d 目的地址、--sport 源端口、--dport 目的端口、-i 进入网卡、-o 出去网卡 等)  
 动作-j ( ACCEPT 接受包、DROP 丢弃包、REJECT 丢弃包并通知对方、REDIRECT 端口重定向包 ，
          RETURN 返回主链继续匹配, MASQUERADE 地址伪装, MARK 打标签,
        LOG将封包相关讯息记录在 /var/log/messages中，SNAT改写封包来源IP，DNAT改写封包目的地IP  等)

# iptables -t nat -A POSTROUTING -p tcp-o eth0 -j SNAT--to-source194.236.50.155-194.236.50.160:1024-32000

# iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 -j DNAT--to-destination 192.168.1.1-192.168.1.10:80-100

命令-A,--append 【追加 一条规则到 链 的 末尾 位置】
命令-I,--insert 【插入 一条规则到 链 的开头位置】
 ~]# iptables  -I  INPUT  2  -p  icmp  -j  ACCEPT  # -I  链名  2 可以指定 插入位置的顺序【第 2 位】

命令-L, --list 【列出（某规则链中的)所有规则】
 ~]# iptables  -nL   ## -n 以数字形式显示地址，端口等信息
~]# iptables  -nL   --line-numbers    ## --line-numbers 显示 规则链 中的规则序号

命令-F, --flush [删除 (某规则链中的)所有规则]
命令-D,--delete 【从某个规则链中删除一条规则，可以输入完整规则，或直接指定规则编号加以删除】
命令-P, --policy 【为指定的 规则链 预设定义默认规则 】 
    ##注意 -P  只能设置【 ACCEPT 接受包、DROP 丢弃包】，不能设置 【REJECT 丢弃包并通知对方】
命令-N, --new-chain 【 定义新的规则链 】

LOG将封包相关讯息记录在 /var/log/messages 中，
详细位置请查阅 /etc/syslog.conf 组态档，
进行完此处理动作后，将会继续比对其规则。
例如：
iptables -A INPUT -p tcp -j LOG --log-prefix "INPUT packets"

SNAT改写封包来源IP 为某特定 IP 或 IP 范围，
可以指定 port 对应的范围，进行完此处理动作后，
将直接跳往下一个规则（mangleostrouting）。

例如：
iptables -t nat -A POSTROUTING -p tcp-o eth0 
 -j SNAT--to-source194.236.50.155-194.236.50.160:1024-32000
DNAT改写封包目的地IP 为某特定 IP 或 IP 范围，
可以指定 port 对应的范围，进行完此处理动作后，
将会直接跳往下一个规炼（filter:input 或 filter:forward）。

例如：
iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80
    -j DNAT --to-destination 192.168.1.1-192.168.1.10:80-100









