
root@Va1 myansible]# ansible  app1  -m  command   -a  'uptime' ## 查看系统平均负载
Va3 | SUCCESS | rc=0 >>
 17:31:46 up  3:59,      2 users,  load average: 0.00, 0.01, 0.02
 当前时间    系统已运行的时间 当前在线用户    平均负载：最近1分钟、5分钟、15分钟 系统的负载
Va2 | SUCCESS | rc=0 >>
 17:31:45 up  3:59,     2 users,    load average: 0.00, 0.01, 0.05
当前时间    系统已运行的时间 当前在线用户    平均负载：最近1分钟、5分钟、15分钟 系统的负载
平均负载量：0.00, 0.01, 0.05 最后一个信息是系统的平均负载量
可以换算成百分比0%，1%，5%
[root@Va1 myansible]# 

[root@Va1 myansible]# cat  /proc/loadavg   ##最直接查看系统平均负载命令
0.00 0.01 0.05 2/150 13822

除了前3个数字表示平均进程数量外，
后面的1个分数的分母表示系统进程总数，分子表示正在运行的进程数；
最后一个数字表示最近运行的进程ID

每个CPU内核当前活动进程数不大于3，则系统运行表现良好！
当然这里说的是每个cpu内核，也就是如果你的主机是四核cpu的话，
那么只要uptime最后输出的一串字符数值小于12即表示系统负载不是很严重.当
然如果达到20，那就表示当前系统负载非常严重，
估计打开执行web脚本非常缓慢.

uptime 参数 -V(大写)   查询版本
[root@Va1 myansible]# ansible  app1  -m  command   -a  'uptime  -V'
Va2 | SUCCESS | rc=0 >>
uptime from procps-ng 3.3.10

Va3 | SUCCESS | rc=0 >>
uptime from procps-ng 3.3.10

[root@Va1 myansible]# ansible  主机或分组列表 -m  模块名称 -a 模块的参数
ansible 主机或组 -m 模块名 -a ‘模块参数’ 
参数	说明
-a	‘Arguments’, —args=’Arguments’ 命令行参数
-m	NAME, —module-name=NAME 执行模块的名字，默认使用 command 模块，
        所以如果是只执行单一命令可以不用 -m参数

-i PATH,	—inventory=PATH 指定库存主机文件的路径,默认为/etc/ansible/hosts.
-M MODULE_PATH,	—module-path=MODULE_PATH 要执行的模块的路径，默认为/usr/share/ansible/
-o —one-line	压缩输出，摘要输出.尝试一切都在一行上输出。
-e EXTRA_VARS,	—extra-vars=EXTRA_VARS 额外的变量设置为键=值或YAML / JSON
-v	—verbose 详细信息
-f	—forks=NUM 并行任务数。NUM被指定为一个整数,默认是5。 
   #ansible testhosts -a “/sbin/reboot” -f 10 重启testhosts组的所有机器，每次重启10台

-l	—list 显示所支持的所有模块

[root@Va1 ~]# sed  -n  '44,$p'  /etc/ansible/hosts
[web]
Va2
Va4

[db]
Va3
Va5

[other]
Va6  ansible_ssh_user="root"  ansible_ssh_pass=1

[webdb]
Va[2:5]

[app:children]
web
db

[app:vars]
ansible_ssh_user=root
ansible_ssh_pass=1

[root@Va1 ~]# vim  /etc/ansible/hosts 
[root@Va1 ~]# sed   -n  '44,$p'   /etc/ansible/hosts
[web]
Va2
Va4

[db]
Va3
Va5

[other]
Va6

[app:children]
web
db
[root@Va1 ~]# ls  /etc/ansible/
ansible.cfg  hosts  roles

[root@Va1 ~]# grep  -Pvn  '^(#|$)'   /etc/ansible/ansible.cfg 
10:[defaults]
14:inventory      = /etc/ansible/hosts
58:roles_path    = /etc/ansible/roles:/usr/share/ansible/roles
61:host_key_checking = False
309:[inventory]
322:[privilege_escalation]
328:[paramiko_connection]
352:[ssh_connection]
404:[persistent_connection]
425:[accelerate]
440:[selinux]
449:[colors]
465:[diff]

/*********************************************
SSH 为 Secure Shell 的缩写，
SSH 为建立在应用层基础上的安全协议。
SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议

ssh-keygen -t rsa -b 4096 -C "邮箱"
-t 表示密钥的类型 ，-b表示密钥的长度，-C 用于识别这个密钥的注释 

这条命令的目的是为了让本地机器ssh登录远程机器上的GitHub账户无需输入密码

ssh-keygen -b 2048 -t rsa                    
#这里的-b 2048 是密钥加密的长度，最好设大点

key文件会保存在/root/.ssh目录下
这时候.ssh目下会多出几个文件

id_rsa   私钥文件
id_rsa.pub  公钥文件,这个文件里的内容要放到其它主机里面去。

-t rsa：t是type的缩写

-t即指定密钥的类型，密钥的类型有两种，一种是RSA，一种是DSA：
        RSA：RSA加密算法是一种非对称加密算法，是由三个麻省理工的牛人弄出来的，
RSA是他们三个人姓的开头首字母组合。
        DSA：Digital Signature Algorithm (DSA)是Schnorr和ElGamal签名算法的变种。
为了让两个linux机器之间使用ssh不需要用户名和密码。
所以采用了数字签名RSA或者DSA来完成这个操作。

ssh-keygen默认使用rsa密钥，所以不加-t rsa也行，
如果你想生成dsa密钥，就需要加参数-t dsa。

-b 4096：b是bit的缩写

-b 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。
  命令中的4096指的是RSA密钥长度为4096位。

DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)

-N new_passphrase 
提供一个新的密语。 
-P passphrase 
提供(旧)密语。 
-p 要求改变某私钥文件的密语而不重建私钥。程序将提示输入私钥文件名、原来的密语、以及两次输入新密语。 

[root@Va1 ~]# cd  /root/.ssh/
[root@Va1 .ssh]# ls
known_hosts
[root@Va1 .ssh]# >  known_hosts
[root@Va1 .ssh]# ssh-keygen  -t  rsa  -b  2048  -N  ''  ##注意-N 空格''
# ssh-keygen  -t 指定密钥的类型  -b 指定密钥长度  -N new_passphrase提供一个新的密码

Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:  直接回车
SHA256:NYoUP+BUbr1hKG3l1DsJU9bfIBXm1zEPEjqvYI+7Zfs root@Va1
The key's randomart image is:
+---[RSA 2048]----+
|      +.. oo=+=+ |
|     o * *ooo+o.=|
|      + O Xo +.o=|
|     . = = *+  .o|
|      . S . ..   |
|       . + .     |
|        . =      |
|         + .     |
|        o...E    |
+----[SHA256]-----+
[root@Va1 .ssh]# ls
id_rsa  id_rsa.pub  known_host

id_rsa   私钥文件
id_rsa.pub  公钥文件,这个文件里的内容要放到其它主机里面去

http://blog.51cto.com/453412/2087430
批量部署密钥  ansible-doc -l | grep auth  //查看安全模块

ansible all -m authorized_key -a "user=root exclusive=true manage_dir=true key='$(< /root/.ssh/id_rsa.pub)'" -k -v
//把生成的公钥推送到所有的主机，  exclusive=true文件强制覆盖掉

[root@Va1 .ssh]#  sed  -n  '44,$p'  /etc/ansible/hosts
[web]
Va2
Va4

[db]
Va3
Va5

[other]
Va6

[app:children]
web
db
[root@Va1 .ssh]# ls  /etc/ansible/
ansible.cfg  hosts  roles

[root@Va1 .ssh]# ls
id_rsa  id_rsa.pub  known_hosts

[root@Va1 .ssh]# key=$(< id_rsa.pub );echo  $key

ssh-rsa AAAAB3N...../91qyP0p4Mxn28Yz7WAGc6QQdcndkQxpy90S8DN6zhgrSTArZSHL92Gl1p//HMdiuJYWDxtFIhX root@Va1

[root@Va1 .ssh]# cat  id_rsa.pub 
ssh-rsa AAAAB3NzaC1y........98c/91qyP0p4Mxn28Yz7WAGc6QQdcndkQxpy90S8DN6zhgrSTArZSHL92Gl1p//HMdiuJYWDxtFIhX root@Va1

[root@Va1 .ssh]# cat  known_hosts 
[root@Va1 .ssh]# ll known_hosts
-rw-r--r--. 1 root root 0 1月   7 17:05 known_hosts
[root@Va1 .ssh]# 

[root@Va1 ~]# ansible  主机或分组列表 -m  模块名称 -a 模块的参数
ansible 主机或组 -m 模块名 -a ‘模块参数’ 
参数	说明
-a	‘Arguments’, —args=’Arguments’ 命令行参数
-m	NAME, —module-name=NAME 执行模块的名字，默认使用 command 模块，
        所以如果是只执行单一命令可以不用 -m参数

-i PATH,	—inventory=PATH 指定库存主机文件的路径,默认为/etc/ansible/hosts.
-M MODULE_PATH,	—module-path=MODULE_PATH 要执行的模块的路径，默认为/usr/share/ansible/
-o —one-line	压缩输出，摘要输出.尝试一切都在一行上输出。
-e EXTRA_VARS,	—extra-vars=EXTRA_VARS 额外的变量设置为键=值或YAML / JSON
-v	—verbose 详细信息
-f	—forks=NUM 并行任务数。NUM被指定为一个整数,默认是5。 
   #ansible testhosts -a “/sbin/reboot” -f 10 重启testhosts组的所有机器，每次重启10台

-l	—list 显示所支持的所有模块

http://blog.51cto.com/453412/2087430
批量部署密钥  ansible-doc -l | grep auth  //查看安全模块

ansible all -m authorized_key -a "user=root exclusive=true manage_dir=true key='$(< /root/.ssh/id_rsa.pub)'" -k -v
//把生成的公钥推送到所有的主机，  exclusive=true文件强制覆盖掉

批量部署证书文件
• 每次交亏输入密码比较麻烦
• 密码写入配置文件安全性很差
• 不同主机不同密码,配置文件要上天
• 使用 key 方式认证,是一个不错的选择
• 给所有主机部署公钥

ansible all     ##所有主机
user=root     ##远程连接的用户
exclusive=true    ###强行写入【覆盖原有公钥文件内容】
manage_dir=true   ###没有目录就自动创建目录
key= 密钥
[root@Va1 .ssh]# ansible all  -m  authorized_key  -a  "user=root  exclusive=true  \
manage_dir=true  key='$(< /root/.ssh/id_rsa.pub)'"  -k  ##批量部署密钥（公钥匙）

SSH password: 1 ##输入所有root用户的ssh连接密码（注意所有主机密码必须相同，否则不能正确执行）
exclusive	英[ɪkˈsklu:sɪv]
美[ɪkˈsklusɪv]
adj.	专用的; 高级的; 排外的; 单独的;
n.	独家新闻; 专有物;

authorize	英[ˈɔ:θəraɪz]
美[ˈɔθəˌraɪz]
vt.	授权，批准，委托;

[root@Va1 .ssh]# ansible-doc  -l  |grep  authorized
authorized_key       Adds or removes an SSH authorized key 

[root@Va1 .ssh]# ansible all  -m  authorized_key  -a  "user=root  exclusive=true  \
manage_dir=true  key='$(< /root/.ssh/id_rsa.pub)'"  -k  ##批量部署密钥（公钥匙）

SSH password: 1 ##输入所有root用户的ssh连接密码（注意所有主机密码必须相同，否则不能正确执行）

Va4 | SUCCESS => {
    "changed": true, 
    "comment": null, 
    "exclusive": true, 
    "key": "ssh-rsa AAAAB3NzaC...........0S8DN6zhgrSTArZSHL92Gl1p//HMdiuJYWDxtFIhX root@Va1", 
    "key_options": null, 
    "keyfile": "/root/.ssh/authorized_keys", 
    "manage_dir": true, 
    "path": null, 
    "state": "present", 
    "unique": false, 
    "user": "root", 
    "validate_certs": true
}
Va2 | SUCCESS => {
    "changed": true, 
.....................
Va3 | SUCCESS => {
 ...........................
}
Va5 | SUCCESS => {
    "changed": true, 
.....................
}
Va6 | SUCCESS => {
..................
    "validate_certs": true
}
[root@Va1 .ssh]# cd
[root@Va1 ~]# ll  /root/.ssh/id_rsa
-rw------- 1 root root 1679 1月   7 17:20 /root/.ssh/id_rsa
[root@Va1 ~]# ll   /root/.ssh/id_rsa.pub 
-rw-r--r-- 1 root root 390 1月   7 17:20 /root/.ssh/id_rsa.pub

[root@Va6 ~]# ls  /root/.ssh/  ##注意 目录/root/.ssh/是ansible 自动创建的
authorized_keys

 ###注意文件authorized_keys内容和id_rsa.pub文件内容一致相同，是ansible自动传递生成的

[root@Va6 ~]# ll /root/.ssh/authorized_keys 
-rw------- 1 root root 390 1月   7 18:12 /root/.ssh/authorized_keys

[root@Va7 ~]# ls  /root/.ssh/  ##注意Va7 不在主机列表里，所以没有自动创建目录.ssh/
ls: 无法访问/root/.ssh/: 没有那个文件或目录

[root@Va1 ~]# ssh  Va6  hostname  ##验证 批量部署密钥（公钥匙）成功
Va6
[root@Va1 ~]# ssh  Va2  hostname
Va2
[root@Va1 ~]# ssh  -l  root Va3  hostname
Va3

[root@Va1 ~]# ansible-doc  -l  |wc  -l
1378

[root@Va1 ~]# ansible-doc  -l  |grep -A1  authorize
authorized_key                            Adds or removes an SSH authorized key       
avi_actiongroupconfig                     Module for setup of ActionGroupConfig Avi RE..

[root@Va1 ~]# ansible-doc  -l  |grep  "^ping "  ##查看ping模块帮助
ping                                      Try to connect to host, verify a usable pyth...

[root@Va1 ~]# ansible-doc   ping  |grep  -A2  "EXAMPLES:" ##查看ping模块帮助
EXAMPLES:
# Test we can logon to 'webservers' and execute python with json lib.
# ansible webservers -m ping

[root@Va1 ~]# pstree  -p  |head  -2
systemd(1)-+-ModemManager(674)-+-{ModemManager}(733)
           |                   `-{ModemManager}(736)
[root@Va1 ~]# pstree  -p  |grep sshd
           |-sshd(1396)---bash(1398)-+-grep(5282)
           |-sshd(1632)
[root@Va1 ~]# echo  $$
1398
[root@Va1 ~]# man  bash

受限的shell(RESTRICTED SHELL)
       如果 bash 以 rbash 名称启动，或者启动时使用了 -r  选项，那么它成为受限的  shell。
       受限的  shell 一般用来建立一个比标准的 shell 受到更多控制的环境。 它的行为与 bash
       一致，除了下列行为是不允许的 (disallowed) 或不会运行的 (not performed)。

       ·      使用 cd 来改变路径；
       ·      设置或取消 SHELL, PATH, ENV, 或 BASH_ENV 变量的值；
       ·      指定的命令名中包含 / ；
       ·      指定包含 / 的文件名作为传递给内建命令 .  的参数；
       ·      指定包含斜杠 (slash) 的文件名作为 -p 选项的参数，传递给 hash 内建命令；
       ·      启动时从 shell 环境中导入 (import) 函数定义；
       ·      启动时解释 shell 环境中 SHELLOPTS 的值；
       ·      使用 >, >|, <>, >&, &>, 和 >> 等重定向操作符重定向输出；

       ·      使用 exec 内建命令来以另一个命令替换 shell；
       ·      使用 enable 内建命令的 -f 和 -d 选项来增加和删除内建命令；
       ·      使用 enable 内建命令来允许和禁止 shell 内建命令；
       ·      指定 command 内建命令的 -p 选项；
       ·      使用 set +r 或 set +o restricted 来关闭受限模式。

       这些限制在所有启动文件读取之后才会生效。

       当一个  shell  脚本作为一个命令执行时  (参见上面的  命令执行(COMMAND   EXECUTION)
       章节)， rbash 关闭为执行脚本而孵化 (spawn) 的 shell 的所有限制。

[root@Va1 ~]# which  ls
alias ls='ls --color=auto'
	/usr/bin/ls
[root@Va1 ~]# ll  /usr/bin/ls  ##ls 是外部命令
-rwxr-xr-x. 1 root root 117656 6月  30 2016 /usr/bin/ls

[root@Va1 ~]# /usr/bin/ls   -l  /usr/bin/ls
-rwxr-xr-x. 1 root root 117656 6月  30 2016 /usr/bin/ls

shell内置命令和外部命令的区别

　　内部命令实际上是shell程序的一部分，
其中包含的是一些比较简单的linux系统命令，
这些命令由shell程序识别并在shell程序内部完成运行，
通常在linux系统加载运行时shell就被加载并驻留在系统内存中。
内部命令是写在bash源码里面的，
其执行速度比外部命令快，
因为解析内部命令shell不需要创建子进程。
比如：exit，history，cd，echo等。


　　外部命令是linux系统中的实用程序部分，
因为实用程序的功能通常都比较强大，
所以其包含的程序量也会很大，
在系统加载时并不随系统一起被加载到内存中，
而是在需要时才将其调用内存。
通常外部命令的实体并不包含在shell中，
但是其命令执行过程是由shell程序控制的。
shell程序 管理 外部命令 执行的 路径查找、加载存放，并控制命令的执行。
外部命令是在bash之外额外安装的，
通常放在/bin，/usr/bin，/sbin，/usr/sbin......等等。
可通过“echo $PATH”命令查看外部命令的存储路径，
比如：ls、vi等。

　　用type命令可以分辨内部命令与外部命令：
[root@Va1 ~]# type  ls
ls 是 `ls --color=auto' 的别名
[root@Va1 ~]# type  cd
cd 是 shell 内嵌

[root@Va1 ~]# type  vim
vim 已被哈希 (/usr/bin/vim)

[root@Va1 ~]# type  vi
vi 是 /usr/bin/vi

[root@Va1 ~]# which type
/usr/bin/which: no type in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)
[root@Va1 ~]# type  type
type 是 shell 内嵌

内部命令和外部命令最大的区别之处就是性能。
内部命令由于构建在shell中而不必创建多余的进程，
要比外部命令执行快得多。
因此和执行更大的脚本道理一样，
执行包含很多外部命令的脚本会损害脚本的性能

[root@Va1 ~]# type set
set 是 shell 内嵌
[root@Va1 ~]# echo  $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin

[root@Va1 ~]# type  enable
enable 是 shell 内嵌

[root@Va1 ~]# type  history   ##内部命令
history 是 shell 内嵌

[root@Va1 ~]# type echo  ##内部命令
echo 是 shell 内嵌

[root@Va1 ~]# ansible   Va3  -m  command  -a  'uptime'   ##外部命令可以用command模块执行
Va3 | SUCCESS | rc=0 >>
 19:23:27 up  5:10,    2 users,     load average: 0.00, 0.01, 0.05
当前时间    系统已运行的时间 当前在线用户    平均负载：最近1分钟、5分钟、15分钟 系统的负载
平均负载量：0.00, 0.01, 0.05 最后一个信息是系统的平均负载量
可以换算成百分比0%，1%，5%

[root@Va1 ~]# type  uptime
uptime 是 /usr/bin/uptime

[root@Va1 ~]# which  uptime 
/usr/bin/uptime

[root@Va1 ~]# which   history
/usr/bin/which: no history in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)

[root@Va1 ~]# ansible   Va3  -m  command  -a  'history'  ##内部命令不能用ansible的command模块执行
Va3 | FAILED | rc=2 >>
[Errno 2] 没有那个文件或目录

[root@Va1 ~]# history 
    1  systemctl set-default multi-user.target 
    2  systemctl stop firewalld.service 
    3  systemctl disable firewalld.service 
。。。。。。。。。。。。。。。
[root@Va1 ~]#  sed  -n  '44,$p'  /etc/ansible/hosts
[web]
Va2
Va4

[db]
Va3
Va5

[other]
Va6

[app:children]
web
db
[root@Va1 ~]# ls  /etc/ansible/
ansible.cfg  hosts  roles

[root@Va1 ~]# type  id  ##外部命令
id 是 /usr/bin/id
[root@Va1 ~]# id
uid=0(root) gid=0(root) 组=0(root)
[root@Va1 ~]# ansible  other  -m  command  -a  'id'
Va6 | SUCCESS | rc=0 >>
uid=0(root) gid=0(root) 组=0(root)
                                              ##内部命令不能用ansible的command模块执行
[root@Va1 ~]# ansible  other   -a  'id' ##外部命令可以用默认的command模块执行
Va6 | SUCCESS | rc=0 >>
uid=0(root) gid=0(root) 组=0(root)

[root@Va1 ~]# type  ps
ps 是 /usr/bin/ps
[root@Va1 ~]# which  ps
/usr/bin/ps
[root@Va1 ~]# ps  -ef  |grep sshd
root      1396     1  0 14:19 ?        00:00:01 sshd: root@pts/0
root      1632     1  0 14:36 ?        00:00:00 /usr/sbin/sshd -D
root      5875  1398  0 19:40 pts/0    00:00:00 grep --color=auto sshd

         ##ansible的command模块 不支持 管道 " | "
      ##ansible的command模块  不支持 使用 >, >|, <>, >&, &>, 和 >> 等重定向操作符重定向输出；

[root@Va1 ~]# ansible  other  -m  command  -a  'ps -ef |grep sshd'
Va6 | FAILED | rc=1 >>
error: garbage option

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).non-zero return code

   ##ansible的 shell 模块  支持 使用 >, >|, <>, >&, &>, 和 >> 等重定向操作符重定向输出；

[root@Va1 ~]# ansible  other  -m  shell  -a  'ps -ef |grep sshd'
Va6 | SUCCESS | rc=0 >>
root      1405     1  0 14:26 ?        00:00:00 sshd: root@pts/0
root      1560     1  0 14:37 ?        00:00:00 /usr/sbin/sshd -D
root      5897  1560  0 19:41 ?        00:00:00 sshd: root@pts/1
root      6002  5997  0 19:41 pts/1    00:00:00 /bin/sh -c ps -ef |grep sshd
root      6004  6002  0 19:41 pts/1    00:00:00 grep sshd

[root@Va2 ~]# ls  /mnt/

[root@Va1 ~]# ansible  Va2  -m  shell  -a  "chdir=/mnt  echo hello >test.txt"
Va2 | SUCCESS | rc=0 >>

[root@Va2 ~]# ls  /mnt/
test.txt
[root@Va2 ~]# cat  /mnt/test.txt  ##注意内容hello
hello
    ##ansible的 shell 模块  支持 使用 >, >|, <>, >&, &>, 和 >> 等重定向操作符重定向输出；

[root@Va1 ~]# ansible  Va2  -m  shell  -a  "chdir=/mnt  pwd  >test.txt"
Va2 | SUCCESS | rc=0 >>

[root@Va2 ~]# cat  /mnt/test.txt   ##注意内容hello 变成了重定向输出的 /mnt
/mnt
         ##ansible 的  raw 模块不支持 chdir ,creates, removes，但适用性广泛

[root@Va1 ~]# ansible  Va2  -m  raw  -a  "chdir=/mnt  pwd"
Va2 | SUCCESS | rc=0 >>
/root
Shared connection to va2 closed.

       ##ansible 的 默认 command 模块 支持 chdir 【 建议少用 】
##ansible 的  raw 模块不支持 chdir ,creates, removes，但适用性广泛

[root@Va1 ~]# ansible  Va2  -m  command  -a  "chdir=/mnt  pwd"
Va2 | SUCCESS | rc=0 >>
/mnt
     ##ansible 的  shell模块 支持 chdir ，万能
       ##ansible 的 默认 command 模块 支持 chdir 【 建议少用 】
##ansible 的  raw 模块不支持 chdir ,creates, removes，但适用性广泛

[root@Va1 ~]# ansible  Va2  -m  shell  -a  "chdir=/mnt  pwd"
Va2 | SUCCESS | rc=0 >>
/mnt

[root@Va1 myansible]# ansible  主机或分组列表 -m  模块名称 -a 模块的参数
ansible 主机或组 -m 模块名 -a ‘模块参数’ 
参数	说明
-a	‘Arguments’, —args=’Arguments’ 命令行参数
-m	NAME, —module-name=NAME 执行模块的名字，默认使用 command 模块，
        所以如果是只执行单一命令可以不用 -m参数

-i PATH,	—inventory=PATH 指定库存主机文件的路径,默认为/etc/ansible/hosts.
-M MODULE_PATH,	—module-path=MODULE_PATH 要执行的模块的路径，默认为/usr/share/ansible/
-o —one-line	压缩输出，摘要输出.尝试一切都在一行上输出。
-e EXTRA_VARS,	—extra-vars=EXTRA_VARS 额外的变量设置为键=值或YAML / JSON
-v	—verbose 详细信息
-f	—forks=NUM 并行任务数。NUM被指定为一个整数,默认是5。 
   #ansible testhosts -a “/sbin/reboot” -f 10 重启testhosts组的所有机器，每次重启10台

-l	—list 显示所支持的所有模块


[root@Va1 ~]# ansible  web  -m  shell  -a  "useradd lily &&  echo 1|passwd  --stdin  lily"
Va4 | SUCCESS | rc=0 >>
更改用户 lily 的密码 。
passwd：所有的身份验证令牌已经成功更新。

Va2 | SUCCESS | rc=0 >>
更改用户 lily 的密码 。
passwd：所有的身份验证令牌已经成功更新。

[root@Va1 ~]# ansible   web  -m  shell -a  "id  lily"
Va2 | SUCCESS | rc=0 >>
uid=1001(lily) gid=1001(lily) 组=1001(lily)

Va4 | SUCCESS | rc=0 >>
uid=1001(lily) gid=1001(lily) 组=1001(lily)

[root@Va1 ~]# vim  user.sh
[root@Va1 ~]# cat user.sh
#!/bin/bash
if  $(id lily &> /dev/null);then  ##注意是错误信息  &> 重定向到空洞
  echo lily;
fi
if ! $(id  zhang3);then
   useradd  zhang3 &&  echo 1 |passwd  --stdin  zhang3
fi
[root@Va1 ~]# chmod  755   user.sh

script模块
功能：在远程主机上执行主控端的脚本，相当于scp+shell组合。

[root@Va1 ~]# ansible  web  -m  script  -a  "user.sh"
Va4 | SUCCESS => {
    "changed": true, 
    "rc": 0, 
    "stderr": "Shared connection to va4 closed.\r\n", 
    "stdout": "lily\r\nid: zhang3: no such user\r\n更改用户 zhang3 的密码 。\r\npasswd：所有的身份验证令牌已经成功更新。\r\n", 
    "stdout_lines": [
        "lily",  ##注意echo的结果
        "id: zhang3: no such user", 
        "更改用户 zhang3 的密码 。", 
        "passwd：所有的身份验证令牌已经成功更新。"
    ]
}
Va2 | SUCCESS => {
    "changed": true, 
    "rc": 0, 
    "stderr": "Shared connection to va2 closed.\r\n", 
    "stdout": "lily\r\nid: zhang3: no such user\r\n更改用户 zhang3 的密码 。\r\npasswd：所有的身份验证令牌已经成功更新。\r\n", 
    "stdout_lines": [
        "lily",  ##注意echo的结果
        "id: zhang3: no such user", 
        "更改用户 zhang3 的密码 。", 
        "passwd：所有的身份验证令牌已经成功更新。"
    ]
}
[root@Va1 ~]# 

     ##ansible 的  shell模块 支持 chdir ，万能
       ##ansible 的 默认 command 模块 支持 chdir 【 建议少用 】
##ansible 的  raw 模块不支持 chdir ,creates, removes，但适用性广泛

command ：作为ansible的默认模块，可以允许远程主机范围内的所有shell命令。

注意： 在command的命令中含有
像`$ HOME'这样的变量和像``<“'，`”>“， `“”“”，“”;“”和“”＆“'
将无法正常工作（如果需要这些功能，请使用[shell]模块）

script模块
功能：在远程主机上执行主控端的脚本，相当于scp+shell组合。

 shell模块
功能：执行远程主机的shell脚本文件

copy模块
• copy 模块
– 复制文件到进程主机
– src:要复制到进程主机的文件在本地的地址,
可以是绝对路径,也可以是相对路径。
如果路径是一个目彔,它将递归复制。
   在这种情况下,
如果路径使用"/"来结尾,
则只复制目录里的内容,
如果没有使用"/"来结尾,
则包含目彔在内的整个内容
   全部复制,类似于rsync

– dest:必选项。
进程主机的绝对路径,如果源文件是一个目彔,那么该路径也必须是个目彔
• copy 模块
– backup:在覆盖之前将原文件备份,备份文件包含时间信息。
有两个选项:yes|no
– force:
如果目标主机包含该文件,但内容不同,
如果设置为yes,则强制覆盖,
如果为no,
   则只有当目标主机的目标位置不存在该文件时,才复制。
默认为yes
– 复制文件
功能： 实现主控端向目标主机copy文件。

[root@localhost ~]# ansible all -m copy -a "src=/home/test.sh dest=/tmp/ owner=root group=root mode=0755"    
#src 主控端文件位置
#dest 被控端目标位置
#owner 文件复制过去后的所有者
#group 文件复制过去后的所属组
#mode  文件的权限设定，执行a+x这种方式
 
[root@Va1 ~]# vim   /etc/resolv.conf 
[root@Va1 ~]# cat  /etc/resolv.conf
nameserver  192.168.0.254
nameserver  192.168.1.254
search  vbr
search localdomain
                                          ##实现主控端 向 目标主机copy文件
[root@Va1 ~]# ansible all -m  copy  -a  "src=/etc/resolv.conf  dest=/etc/"
Va4 | SUCCESS => {
............
[root@Va1 ~]# ansible all -m  command  -a  "cat  /etc/resolv.conf"
Va4 | SUCCESS | rc=0 >>
.......
[root@Va1 ~]# ansible all -m  command  -a  "ls  -l /etc/resolv.conf"
Va6 | SUCCESS | rc=0 >>
-rw-rw-r-- 1 root root 83 1月   8 17:23 /etc/resolv.conf
......................

[root@Va1 ~]# ansible  web  -m  copy  -a       \  ##实现主控端 向 目标主机copy文件
>  "src=/root/user.sh  dest=/mnt/  owner=lily  group=zhang3  mode=0775"

Va2 | SUCCESS => {
    "changed": true, 
    "checksum": "9122c80ea3b3a04a22af359311d4b26a517f416e", 
    "dest": "/mnt/user.sh", 
    "gid": 1002, 
    "group": "zhang3", 
    "md5sum": "f0e61d3718825ead5c9af0f8cacb4a1f", 
    "mode": "0775", 
    "owner": "lily", 
    "size": 143, 
    "src": "/root/.ansible/tmp/ansible-tmp-1546865021.47-9073449857219/source", 
    "state": "file", 
    "uid": 1001
}
Va4 | SUCCESS => {
    "changed": true, 
    "checksum": "9122c80ea3b3a04a22af359311d4b26a517f416e", 
    "dest": "/mnt/user.sh", 
    "gid": 1002, 
    "group": "zhang3", 
    "md5sum": "f0e61d3718825ead5c9af0f8cacb4a1f", 
    "mode": "0775", 
    "owner": "lily", 
    "size": 143, 
    "src": "/root/.ansible/tmp/ansible-tmp-1546865021.48-243970319494936/source", 
    "state": "file", 
    "uid": 1001
}

[root@Va1 ~]# type  ll
ll 是 `ls -l --color=auto' 的别名
[root@Va1 ~]# ansible  web  -m  command  -a  "ll  /mnt/user.sh"
Va2 | FAILED | rc=2 >>
[Errno 2] 没有那个文件或目录

Va4 | FAILED | rc=2 >>
[Errno 2] 没有那个文件或目录

[root@Va1 ~]# ansible  web  -m  command  -a  "ls  -l  /mnt/user.sh"
Va4 | SUCCESS | rc=0 >>
-rwxrwxr-x 1 lily zhang3 143 1月   7 20:43 /mnt/user.sh

Va2 | SUCCESS | rc=0 >>
-rwxrwxr-x 1 lily zhang3 143 1月   7 20:43 /mnt/user.sh


[root@Va1 ~]# ansible  web  -m  shell  -a  "ls  -l  /mnt/user.sh"
Va2 | SUCCESS | rc=0 >>
-rwxrwxr-x 1 lily zhang3 143 1月   7 20:43 /mnt/user.sh

Va4 | SUCCESS | rc=0 >>
-rwxrwxr-x 1 lily zhang3 143 1月   7 20:43 /mnt/user.sh

• copy 模块
– 复制文件到进程主机
– src:要复制到进程主机的文件在本地的地址,
可以是绝对路径,也可以是相对路径。
如果路径是一个目彔,它将递归复制。
   在这种情况下,
如果路径是一个目彔,它将递归复制。如果路径使用"/"来结尾,则只复制目录里的内容,
如果路径是一个目彔,它将递归复制。如果没有使用"/"来结尾,则包含目彔在内的整个内容
   全部复制,类似于rsync

– dest:必选项。
进程主机的绝对路径,如果源文件是一个目彔,那么该路径也必须是个目彔

– 复制目录

ansible t1 -m copy -a 'src=urdir dest=/root/'

[root@Va1 ~]# mkdir  -p  /test/test2/test3/test4.txt   ##注意 test4.txt是一个目录
[root@Va1 ~]# ls   /test/
test2                  ##如果路径是一个目彔,它将递归复制。如果没有使用"/"来结尾,则包含目彔在内的整个内容
[root@Va1 ~]# ansible  Va2  -m  copy  -a "src=/test/test2  dest=/mnt/  owner=lily  group=zhang3  mode=0775"
Va2 | SUCCESS => {
    "changed": true, 
    "dest": "/mnt/", 
    "src": "/test/test2"
}
[root@Va1 ~]# ansible  Va2  -m  command -a "ls -l  /mnt/"
Va2 | SUCCESS | rc=0 >>
总用量 8
drwxr-xr-x 3 lily zhang3  19 1月   7 21:26 test2
-rw-r--r-- 1 root root     5 1月   7 19:55 test.txt
-rwxrwxr-x 1 lily zhang3 143 1月   7 20:43 user.sh

[root@Va2 ~]# ll   /mnt/    ##注意结果 包含目录 test2 『src=/test/test2 没有使用"/"来结尾』
总用量 8
drwxr-xr-x 3 lily zhang3  19 1月   7 21:26 test2
-rw-r--r-- 1 root root     5 1月   7 19:55 test.txt
-rwxrwxr-x 1 lily zhang3 143 1月   7 20:43 user.sh

   ##   如果路径是一个目彔,它将递归复制。如果路径使用"/"来结尾,则只复制目录里的内容,

[root@Va1 ~]# ansible  Va4  -m  copy  -a "src=/test/test2/  dest=/mnt/  owner=lily  group=lily  mode=0711"
Va4 | SUCCESS => {
    "changed": true, 
    "dest": "/mnt/", 
    "src": "/test/test2/"
}
[root@Va1 ~]# ansible  Va4  -m  command -a "ls -l  /mnt/"Va4 | SUCCESS | rc=0 >>
总用量 4
drwxr-xr-x 3 lily lily    23 1月   7 21:29 test3
-rwxrwxr-x 1 lily zhang3 143 1月   7 20:43 user.sh

[root@Va4 ~]# ll  /mnt/  ##注意结果不包含目录 test2  『src=/test/test2/使用"/"来结尾』
总用量 4
drwxr-xr-x 3 lily lily    23 1月   7 21:29 test3
-rwxrwxr-x 1 lily zhang3 143 1月   7 20:43 user.sh
[root@Va4 ~]# ls   /mnt/test3/
test4.txt
[root@Va4 ~]# ll  /mnt/test3/
总用量 0
drwxr-xr-x 2 lily lily 6 1月   7 21:29 test4.txt
[root@Va4 ~]# ll  /mnt/test3/test4.txt/  ##注意 test4.txt是一个目录
总用量 0
[root@Va4 ~]# ls  -ld  /mnt/test3/test4.txt/   ##注意 test4.txt是一个目录
drwxr-xr-x 2 lily lily 6 1月   7 21:29 /mnt/test3/test4.txt/

[root@Va1 ~]# ansible  all  -m  shell  -a  "shutdown  -h  now"  ##结果所有主机列表中的主机都关机了
Va2 | UNREACHABLE! => {
    "changed": false, 
    "msg": "Failed to connect to the host via ssh: Shared connection to va2 closed.\r\n", 
    "unreachable": true
}
Va6 | UNREACHABLE! => {
    "changed": false, 
    "msg": "Failed to connect to the host via ssh: Shared connection to va6 closed.\r\n", 
    "unreachable": true
}
Va3 | UNREACHABLE! => {
    "changed": false, 
    "msg": "Failed to connect to the host via ssh: Shared connection to va3 closed.\r\n", 
    "unreachable": true
}
Va5 | UNREACHABLE! => {
    "changed": false, 
    "msg": "Failed to connect to the host via ssh: Shared connection to va5 closed.\r\n", 
    "unreachable": true
}
Va4 | UNREACHABLE! => {
    "changed": false, 
    "msg": "Failed to connect to the host via ssh: Shared connection to va4 closed.\r\n", 
    "unreachable": true
}
[root@Va1 ~]# 
===============================================

[root@room9pc01 ~]# ssh  -Xo  StrictHostKeyChecking=no  192.168.0.11
..............
[root@Va1 ~]# ansible
ansible               ansible-doc           ansible-playbook-2
ansible-2             ansible-doc-2         ansible-playbook-2.7
ansible-2.7           ansible-doc-2.7       ansible-pull
ansible-config        ansible-galaxy        ansible-pull-2
ansible-connection    ansible-galaxy-2      ansible-pull-2.7
ansible-console       ansible-galaxy-2.7    ansible-vault
ansible-console-2     ansible-inventory     ansible-vault-2
ansible-console-2.7   ansible-playbook      ansible-vault-2.7

ansible all     ##所有主机
user=root     ##远程连接的用户
exclusive=true    ###强行写入【覆盖原有公钥文件内容】
manage_dir=true   ###没有目录就自动创建目录
key= 密钥
[root@Va1 .ssh]# ansible all  -m  authorized_key  -a  "user=root  exclusive=true  \
manage_dir=true  key='$(< /root/.ssh/id_rsa.pub)'"  -k  ##批量部署密钥（公钥匙）
................................

[root@Va1 ~]# sed  -n  '44,$p'  /etc/ansible/hosts
[web]
Va2
Va4

[db]
Va3
Va5

[other]
Va6

[app:children]
web
db
[root@Va1 ~]# ls  /etc/ansible/
ansible.cfg  hosts  roles

[root@Va1 ~]# grep  -Pvn  "^(#|$)"  /etc/ansible/ansible.cfg 
10:[defaults]
14:inventory      = /etc/ansible/hosts
58:roles_path    = /etc/ansible/roles:/usr/share/ansible/roles
61:host_key_checking = False
309:[inventory]
322:[privilege_escalation]
328:[paramiko_connection]
352:[ssh_connection]
404:[persistent_connection]
425:[accelerate]
440:[selinux]
449:[colors]
465:[diff]

ls –help

ls -a 列出文件下所有的文件，包括以“.“开头的隐藏文件（linux下文件隐藏文件是以.开头的，如果存在..代表存在着父目录）。
ls -l 列出文件的详细信息，如创建者，创建时间，文件的读写权限列表等等。
ls -F 在每一个文件的末尾加上一个字符说明该文件的类型。
   ”@”表示符号链接、”|”表示FIFOS、”/”表示目录、”=”表示套接字。
[root@Va1 ~]# ls -F  /test/
test2/

ls -s 在每个文件的后面打印出文件的大小。 size(大小)
ls -t 按时间进行文件的排序 Time(时间)
ls -A 列出除了”.”和”..”以外的文件。
ls -R 将目录下所有的子目录的文件都列出来，相当于我们编程中的“递归”实现
ls -L 列出文件的链接名。Link（链接）
ls -S 以文件的大小进行排序
--------------------- 
[root@Va1 ~]# mkdir  -p  /test/test2/test3/ #递归创建子文件夹
[root@Va1 ~]# ls  -R  /test/  #递归查看所有子文件夹
/test/:
test2

/test/test2:
test3

/test/test2/test3:
 
[root@Va1 ~]# ls -F  /test/
test2/

[root@Va1 ~]# yum  provides  tree
...........
tree-1.6.0-10.el7.x86_64 : File system tree viewer
源    ：CentOS7-1708
[root@Va1 ~]# yum  -y  install  tree  |tail  -1
完毕！
[root@Va1 ~]# echo -e "test  test  test\n test2  test2 \n test3xxx" > /test/test2/test3/test3.txt
[root@Va1 ~]# echo -e "test  test  test\n test2  test2 222xxx" > /test/test2/test2.txt

[root@Va1 ~]# ls   -RF   /test/
/test/:
test2/

/test/test2:
test2.txt  test3/

/test/test2/test3:
test3.txt

## tree  -F  文件夹名 
 ## -F 在执行文件，目录，Socket，符号连接，管道名称名称，
         各自加上”*”,”/”,”=”,”@”,”|”号。

[root@Va1 ~]# tree  -F   /test/
/test/
└── test2/
    ├── test2.txt
    └── test3/
        └── test3.txt

2 directories, 2 files

[root@Va1 ~]# ansible   app   -m  shell  -a  "userdel  -r  lily"
............
[root@Va1 ~]# ansible   app   -m  shell  -a  "useradd lily &&  echo 1 |passwd  --stdin  lily"
..........
对一个属主为root的可执行文件，如果设置了SUID位，
则其他所有普通用户都将可以以root身份运行该文件，获取相应的系统资源。
setuid的作用是让执行该命令的用户以该命令拥有者的权限去执行
它的标志为：s，会出现在x的地方，例：-rwsr-xr-x  

Chmod命令中的特殊权限位含义：

1、S_ISUID 04000 文件的 (set user-id on execution)位

2、S_ISGID 02000 文件的 (set group-id on execution)位

3、S_ISVTX 01000 文件的sticky 位

上面的都是8进制数。

SUID：置于 u 的 x 位，原位置有执行权限x，就置为 s，没有x则变成 S .
chmod u+s  xxx # 设置setuid权限
chmod 4551 file // 权限： r-sr-x—x
 S_ISUID 04000 文件的 (set user-id on execution)位


SGID：置于 g 的 x 位，原位置有执行权限x，就置为 s，没有x则变成 S 
chmod g+s  xxx # 设置setgid权限
chmod 2551 file // 权限： r-xr-s--x
 S_ISGID 02000 文件的 (set group-id on execution)位

stick  bit(粘滞位)
它是针对目录来说的，如果该目录设置了stick  bit(粘滞位)，
则该目录下的文件除了该文件的创建者和root用户可以删除和修改/tmp目录下的stuff，
别的用户均不能动别人的文件(夹)

STICKY：粘滞位，置于 o 的 x 位，原位置有执行权限，就置为 t ，否则为T .
chmod o+t  xxx # 设置stick bit权限，针对目录
chmod 1551 file // 权限： r-xr-x--t
 S_ISVTX 01000 文件的sticky 位

         
[root@Va1 ~]# cat  /test/test2/test2.txt
test  test  test
 test2  test2 222xxx

[root@Va1 ~]# cat  /test/test2/test3/test3.txt
test  test  test
 test2  test2 
 test3xxx
                  
    ##   如果路径是一个目彔,它将递归复制。如果路径使用"/"来结尾,则只复制目录里的内容,不包含目录 test2 

[root@Va1 ~]# ansible  app  -m  copy  -a   \  ##  ##实现主控端 向 目标主机copy文件(夹)
>      "src=/test/test2/  dest=/mnt/  owner=lily  group=root  mode=4755"

Va5 | SUCCESS => {
    "changed": true, 
    "dest": "/mnt/", 
    "src": "/test/test2/"
}
...............

[root@Va1 ~]# ansible  app  -m command  -a  "ls  -RF   /mnt"
Va2 | SUCCESS | rc=0 >>
/mnt:            ##注意结果不包含目录 test2  『src=/test/test2/使用"/"来结尾』
test2.txt*
test3/

/mnt/test3:
test3.txt*

Va3 | SUCCESS | rc=0 >>
............
Va4 | SUCCESS | rc=0 >>
...............
Va5 | SUCCESS | rc=0 >>
..............

[root@Va1 ~]# ansible  app  -m command  -a  "ls  -l   /mnt/test3"
Va5 | SUCCESS | rc=0 >>
总用量 4
-rwsr-xr-x 1 lily root 42 1月   8 14:19 test3.txt
..............

[root@Va1 ~]# ansible  app  -m command  -a  "ls  -l   /mnt/"
Va2 | SUCCESS | rc=0 >>
总用量 4
-rwsr-xr-x 1 lily root 38 1月   8 14:19 test2.txt
drwxr-xr-x 2 lily root 23 1月   8 14:19 test3
..........

[root@Va2 ~]# cat   /mnt/test3/test3.txt 
test  test  test
 test2  test2 
 test3xxx
[root@Va2 ~]# ls  -l  /mnt/test3/test3.txt
-rwsr-xr-x 1 lily root 42 1月   8 14:19 /mnt/test3/test3.txt

[root@Va1 ~]# ls  /mnt/
                            如果regexp不匹配文件中的任何一行，则将line所指定的行插入到文件的末尾
[root@Va1 ~]# ansible  Va2  -m  lineinfile  -a  'path="/mnt/test3/test3.txt" regexp="^test2$" line="Va1-ansible"'
Va2 | SUCCESS => {
    "backup": "", 
    "changed": true, 
    "msg": "line added"
}
[root@Va1 ~]# ansible Va2  -m  command  -a  "cat  /mnt/test3/test3.txt"
Va2 | SUCCESS | rc=0 >>
test  test  test
 test2  test2 
 test3xxx
Va1-ansible

[root@Va2 ~]# cat   /mnt/test3/test3.txt 
test  test  test
 test2  test2 
 test3xxx
Va1-ansible
                                           如果regexp不匹配文件中的任何一行，则将line所指定的行插入到文件的末尾

[root@Va1 ~]# ansible  Va2  -m  lineinfile  -a  'path="/mnt/test3/test3.txt" regexp="^abcd$" line="Va1-add"'
Va2 | SUCCESS => {
    "backup": "", 
    "changed": true, 
    "msg": "line added"
}
[root@Va2 ~]# cat   /mnt/test3/test3.txt 
test  test  test
 test2  test2 
 test3xxx
Va1-ansible
Va1-add

backrefs (非必选项)	 默认值 no	yes/no  如果打开这个标记，backrefs会改变模块的一些操作：
insertbefore和insertafter参数会被忽略。
当regexp不匹配文件中的任何行时，文件不会做任何修改，
否则 使用扩展的line参数 替换 最后一个匹配正则表达式的行

line	(非必选项) 要插入或者替换的行。
如果设置了backrefs参数，那么line中可以包含位置分组或命名分组，lineinfile模块会使用regexp捕获的分组填充它们

mode  (非必选项) 设置文件权限，模式实际上是八进制数字（如0644），少了前面的零可能会有意想不到的结果。
从版本1.8开始，可以将模式指定为符号模式（例如u+rwx或u=rw,g=r,o=r）

state	(非必选项) 默认值present  present/absent  用于设置 新增或替换一行，还是删除行

present
目前的;现在的;出席的;[语法学]现在时的

absent
缺席的，不在场的;缺少的，缺乏的;不在意的，茫然的
缺席，不参加;不在

regexp (非必选项) 用于搜索文件中的每一行的正则表达式。
对于state=present，这个正则表达式所匹配的行中的最后一行会被替换；

对于state=absent，会删除所有匹配的行

       ## 对于state=absent，会删除所有匹配的行 ## 将 文件/mnt/test3/test3.txt 中所有匹配 ^Va1-*  的行删除

[root@Va1 ~]# ansible  Va2  -m  lineinfile  -a  "path=/mnt/test3/test3.txt  regexp='^Va1-*' state=absent"

Va2 | SUCCESS => {
    "backup": "", 
    "changed": true, 
    "found": 2, 
    "msg": "2 line(s) removed"
}
[root@Va1 ~]# ansible Va2  -m  command  -a  "cat  /mnt/test3/test3.txt"Va2 | SUCCESS | rc=0 >>
test  test  test
 test2  test2 
 test3xxx

[root@Va2 ~]# cat   /mnt/test3/test3.txt 
test  test  test
 test2  test2 
 test3xxx
[root@Va2 ~]# ll  /mnt/test3/test3.txt
-rwxr-xr-x 1 lily root 42 1月   8 15:24 /mnt/test3/test3.txt

                                ## 替换行并设置文件权限
[root@Va1 ~]# ansible  Va2  -m  lineinfile  -a  'path="/mnt/test3/test3.txt" regexp="test2" line="Va1-add"  owner=root   group=lily  mode=2611'
Va2 | SUCCESS => {
    "backup": "", 
    "changed": true, 
    "msg": "line replaced and ownership, perms or SE linux context changed"
}
[root@Va1 ~]# ansible Va2  -m  command  -a  "cat  /mnt/test3/test3.txt"
Va2 | SUCCESS | rc=0 >>
test  test  test
Va1-add
 test3xxx

[root@Va2 ~]# ll  /mnt/test3/test3.txt
-rwxr-xr-x 1 lily root 42 1月   8 15:24 /mnt/test3/test3.txt
[root@Va2 ~]# ll  /mnt/test3/test3.txt
-rw---s--x 1 root lily 35 1月   8 15:38 /mnt/test3/test3.txt

• lineinfile | replace 模块

– 类似 sed 的一种行编辑替换模块
– path 目的文件
– regexp 正则表达式
RegExp
n.正则表达式；表达式对象
regular expression 正则表达式

– line 替换后的结果
ansible t1 -m lineinfile -a 'path="/etc/selinux/config"　regexp="^SELINUX=" line="SELINUX=disabled"'
– 替换指定字符
ansible t1 -m replace -a 'path="/etc/selinux/config"　regexp="^(SELINUX=).*" replace="\1disabled"'

[root@Va2 ~]# cat   /mnt/test3/test3.txt
test  test  test
Va1-add
 test3xxx   
===========================      ## 替换指定字符
[root@Va1 ~]# ansible  Va2  -m  replace  -a   \
>  'path=/mnt/test3/test3.txt  regexp="^(test).*"   replace="\1ansible"'

Va2 | SUCCESS => {
    "changed": true, 
    "msg": "1 replacements made"
}
[root@Va2 ~]# cat   /mnt/test3/test3.txt ##注意testansible
testansible
Va1-add
 test3xxx
      ## (`present' or `installed', `latest')
       ##       安装               安装       升级最新版安装latest

 (`absent' or `removed') a package.
                        删除软件包

[root@Va1 ~]# ansible-doc  yum |grep  -6  "\- state"  ##查看yum模块信息
- skip_broken
        Resolve depsolve problems by removing packages that are causing
        problems from the trans‐ action.
        (Choices: yes, no)[Default: no]
        version_added: 2.3

- state
        Whether to install (`present' or `installed', `latest'), or remove
        (`absent' or `removed') a package.
                        删除软件包
        (Choices: present, installed, latest, absent, removed)[Default:
        present]

- update_cache
[root@Va1 ~]# ansible-doc  yum |grep  -A5  "\- state"
- state
        Whether to install (`present' or `installed', `latest'), or remove
        (`absent' or `removed') a package.
        (Choices: present, installed, latest, absent, removed)[Default:
        present]
                        ## # 安装多个软件包 注意逗号,
[root@Va1 ~]# ansible  db  -m  yum  -a  "name='lrzsz,lftp' state=installed" # 安装多个软件包
Va3 | SUCCESS => {
    "changed": true, 
    "msg": "", 
    "rc": 0, 
    "results": [
        "lrzsz-0.12.20-36.el7.x86_64 providing lrzsz is already installed", 
        "............ Installing : lftp-4.4.8-8.el7_3.2.x86_64   ......\n\nInstalled:\n  lftp.x86_64 0:4.4.8-8.el7_3.2    \n\nComplete!\n"   ]
}
Va5 | SUCCESS => {
    "changed": true, 
    "msg": "", 
    "rc": 0, 
    "results": [
        "lrzsz-0.12.20-36.el7.x86_64 providing lrzsz is already installed", 
....................
    ]
}
[root@Va1 ~]# 
• yum模块

– 使用yum包管理器来管理软件包
– config_file:yum的配置文件
– disable_gpg_check:关闭gpg_check
– disablerepo:禁用某个源
– enablerepo:启用某个源
– name:要进行操作的软件包的名字,也可以传递一个url或者一个本地的rpm包的路径
– state:状态(present,absent,latest)

 yum模块示例
– 删除软件包
ansible web1 -m yum -a 'name="lrzsz" state=absent'
– 删除多个软件包
ansible web1 -m yum -a 'name="lrzsz,lftp" state=absent'
– 安装软件包
ansible web1 -m yum -a 'name="lrzsz"'
– 安装多个软件包
ansible web1 -m yum -a 'name="lrzsz,lftp"'

直接yum -y install lrzsz 程序会自动安装好，
该软件只是用于小文件
下载则 sz [找到 要下载的文件] ## sz  test.txt 下载test.txt到本地
上传，则rz 浏览找到 本机要上传的文件

[root@Va1 ~]# ansible  db  -m  yum  -a  "name='lftp'  state=removed"  # 删除软件包
Va3 | SUCCESS => {
...........
Va5 | SUCCESS => {
    "changed": true, 
    "msg": "", 
    "rc": 0, 
    "results": [.......... 正在删除    : lftp-4.4.8-8.el7_3.2.x86_64      1/1 \n  验证中      : lftp-4.4.8-8.el7_3.2.x86_64   1/1 \n\n删除:\n  lftp.x86_64 0:4.4.8-8.el7_3.2      \n\n完毕！\n"  ]
}
[root@Va1 ~]# 

• service模块

– name:必选项,服务名称
– enabled:是否开机自启动 yes|no
– sleep:如果执行了restarted,在则stop和start间沉睡几秒钟
– state:对当前服务执行启动,停止、重启、重新加载等操作(started,stopped,restarted,reloaded)
ansible t1 -m service -a 'name="sshd" enabled="yes"　state="started"'

[root@Va1 ~]# ansible-doc   service |grep  -EA5   "\- state|- enabled"
- enabled
        Whether the service should start on boot. *At least one of state and
        enabled are required.*
        (Choices: yes, no)[Default: (null)]

= name
--
- state
........
[root@Va1 ~]# ansible-doc   service |grep  -A7   "\- state"
- state
        `started'/`stopped' are idempotent actions that will not run
        commands unless necessary.  `restarted' will always bounce the
        service.  `reloaded' will always reload. *At least one of state and
        enabled are required.* Note that reloaded will start the service if
        it is not already started, even if your chosen init system wouldn't
        normally.
        (Choices: started, stopped, restarted, reloaded)[Default: (null)]



[root@Va1 ~]# ansible  Va2  -m shell -a  "netstat   -npult |grep chronyd"
Va2 | SUCCESS | rc=0 >>
udp        0      0 127.0.0.1:323           0.0.0.0:*                           687/chronyd         
udp6       0      0 ::1:323                 :::*                                687/chronyd         

[root@Va1 ~]# ansible  Va2  -m  service  -a  "name=chronyd  state=stopped  enabled=no"
Va2 | SUCCESS => {
    "changed": true, 
    "enabled": false, 
    "name": "chronyd", 
    "state": "stopped", 
    "status": {
...............
[root@Va1 ~]# ansible  Va2  -m shell -a  "netstat   -npult |grep chronyd"
Va2 | FAILED | rc=1 >>
non-zero return code

[root@Va1 ~]# ansible  Va2  -m shell -a  "systemctl  is-enabled  chronyd"
Va2 | FAILED | rc=1 >>
disablednon-zero return code

[root@Va1 ~]# ansible  Va2  -m shell -a  "systemctl  is-active  chronyd"
Va2 | FAILED | rc=3 >>
unknownnon-zero return code

[root@Va1 ~]# ansible  Va2  -m  service  -a  "name=chronyd  state=started  enabled=yes"
Va2 | SUCCESS => {
    "changed": true, 
    "enabled": true, 
    "name": "chronyd", 
    "state": "started", 
    "status": {
............
[root@Va1 ~]# ansible  Va2  -m shell -a  "systemctl  is-active  chronyd"
Va2 | SUCCESS | rc=0 >>
active

[root@Va1 ~]# ansible  Va2  -m shell -a  "systemctl  is-enabled  chronyd"
Va2 | SUCCESS | rc=0 >>
enabled

[root@Va1 ~]# ansible  Va2  -m  setup  |grep  "\"ansible_os_family\""
        "ansible_os_family": "RedHat", 

[root@Va1 ~]# ansible  Va2  -m  setup  |grep -A1  "\"ansible_cmdline\""
        "ansible_cmdline": {
            "BOOT_IMAGE": "/vmlinuz-3.10.0-693.el7.x86_64",  ##内核版本

[root@Va1 ~]# ansible  Va2  -m  setup  |grep -A1 "\"ansible_device_links\""
        "ansible_device_links": {
            "ids": {

[root@Va1 ~]# ansible  Va2  -m  setup  |grep  -A6  "\"ansible_dns"
        "ansible_dns": {
            "nameservers": [
                "192.168.0.254", 
                "192.168.1.254"
            ], 
            "search": [
                "localdomain"

[root@Va1 ~]# ansible  Va2  -m  setup  |grep  -A7  "\"ansible_processor\":"
        "ansible_processor": [
            "0", 
            "GenuineIntel", 
            "Intel Core Processor (Skylake)", 
            "1", 
            "GenuineIntel", 
            "Intel Core Processor (Skylake)"
        ], 

[root@Va1 ~]# ansible  Va2  -m  setup  |grep  -A3  "\"mtu\""  |head   -4
            "mtu": 1500, 
            "netmask": "255.255.255.0", 
            "network": "192.168.0.0", 
            "type": "ether"


setup模块

– 主要用亍获取主机信息,在playbooks里经常会用到的
一个参数gather_facts就不该模块相关。setup模块下经常使用的一个参数是filter参数
– filter 可以过滤到我们需要的信息

ansible t1 -m setup -a 'filter=ansible_distribution'

[root@Va1 ~]# ansible  Va2  -m  setup  -a  'filter="ansible_os_family"'
Va2 | SUCCESS => {
    "ansible_facts": {
        "ansible_os_family": "RedHat"
    }, 
    "changed": false
}

#### 安装Apache服务设置开机自启

[root@Va1 ~]# ansible  other  -m yum  -a  'name="httpd,elinks"  state=installed'
Va6 | SUCCESS => {
    "changed": true, 
    "msg": "", 
    "rc": 0, 
    "results": [
...............
[root@Va1 ~]# ansible  Va6  -m  service  -a  'name=httpd  enabled=yes  state=started'
Va6 | SUCCESS => {
    "changed": true, 
    "enabled": true, 
    "name": "httpd", 
    "state": "started", 
    "status": {
.....................................
[root@Va1 ~]# ansible  Va6  -m  shell  -a  "netstat  -npult |grep  httpd"
Va6 | SUCCESS | rc=0 >>
tcp6       0      0 :::80                   :::*                    LISTEN      5040/httpd          

[root@Va1 ~]# ansible  Va6  -m  shell  -a  \
>     "cat  /etc/httpd/conf/httpd.conf |grep -A2 -n  '^Listen'"

Va6 | SUCCESS | rc=0 >>
42:Listen 80
43-
44-#
[root@Va1 ~]# ansible  Va6  -m  shell  -a   'echo  "Va6  httpd apache" > /var/www/html/index.html'
Va6 | SUCCESS | rc=0 >>


[root@Va1 ~]# ansible  Va6  -m  shell  -a   'elinks  -dump  127.0.0.1'
Va6 | SUCCESS | rc=0 >>
   Va6 httpd apache

[root@Va6 ~]# ls  /var/www/html/
index.html
[root@Va6 ~]# elinks  -dump  127.0.0.1
   Va6 httpd apache

state	(非必选项) 默认值present用于设置 新增或替换一行 

state=absent   删除行
                  
   ## ##设置/etc/httpd/conf/httpd.conf 替换Listen 80 一行  修改端口号为8080

[root@Va1 ~]# ansible  other  -m  lineinfile  -a  \
> 'path=/etc/httpd/conf/httpd.conf  regexp="^Listen" line="Listen 8080"  state=present'  

Va6 | SUCCESS => {
    "backup": "", 
    "changed": true, 
    "msg": "line replaced"
}

[root@Va6 ~]# cat  /etc/httpd/conf/httpd.conf |grep  "^Listen"
Listen 8080

[root@Va1 ~]# ansible  Va6  -m  shell  -a   'systemctl  restart  httpd'
Va6 | SUCCESS | rc=0 >>

[root@Va1 ~]# ansible  Va6  -m  shell  -a   'elinks  -dump  127.0.0.1:8080'
Va6 | SUCCESS | rc=0 >>
   Va6 httpd apache

[root@Va1 ~]# 

Apache的主配置文件：/etc/httpd/conf/httpd.conf
默认站点主目录：/var/www/html/
Apache服务器的配置信息全部存储在主配置文件/etc/httpd/conf/httpd.conf中

Virtual Hosts---虚拟主机，虚拟主机不能与Main Server主服务器共存，
当启用了虚拟主机之后，Main Server就不能使用了

[root@Va6 ~]# grep  -ni  "^serverroot"  /etc/httpd/conf/httpd.conf 
31:ServerRoot "/etc/httpd"
用于指定Apache的运行目录，
服务启动之后自动将目录改变为当前目录，
在后面使用到的所有相对路径都是相对这个目录下

0.0.0.0/8可以表示本网络中的所有主机，
0.0.0.0/8也可表示本网络上的某个特定主机,
0.0.0.0/32可以用作本机的源地址，

综合起来可以说0.0.0.0表示整个网络
严格说来，0.0.0.0已经不是一个真正意义上的IP地址了。
它表示的是这样一个集合：
所有不清楚的主机和目的网络。

网络中0.0.0.0的IP地址表示整个网络，即网络中的所有主机

在路由器配置中可用0.0.0.0/0表示默认路由，
作用是帮助路由器发送路由表中无法查询的包。
如果设置了全零网络的路由，
路由表中无法查询的包
都将送到全零网络的路由中去

[root@Va6 ~]# grep -A2  -n  "case $ACMD" /usr/sbin/apachectl  ##apache的主要执行文件
110:case $ACMD in
111-start|stop|restart|status)
112-    /usr/bin/systemctl $ACMD httpd.service

[root@Va6 ~]# grep  -ni  "#servername"  /etc/httpd/conf/httpd.conf 
95:#ServerName www.example.com:80

[root@Va6 ~]# which  apachectl 
/usr/sbin/apachectl

修改ServerName配置，执行apachectl -t命令不报错

[root@Va6 ~]# apachectl   -t  ## 1）没有修改之前有报错

AH00558: httpd: Could not reliably determine the server's fully qualified domain name,
 using 192.168.0.16. Set the 'ServerName' directive globally to suppress this message
Syntax OK
ah00558:httpd:无法使用192.168.0.16可靠地确定服务器的完全限定域名。
全局设置“servername”指令以禁止显示此消息
语法好
[root@Va6 ~]# cat  /etc/httpd/conf/httpd.conf |grep  "^Listen"
Listen 8080

[root@Va6 ~]# grep  -niA1  "#servername"   /etc/httpd/conf/httpd.conf
95:#ServerName www.example.com:80
96-

修改ServerName配置，执行apachectl -t命令不报错

[root@Va6 ~]# apachectl   -t  ## 1）没有修改之前有报错

                               #### 替换指定字符^#(ServerName).*  修改ServerName配置 
[root@Va1 ~]# ansible  other  -m  replace  -a 'path=/etc/httpd/conf/httpd.conf  regexp="^#(ServerName).*"   replace="\1  www.Va6.com"' 

Va6 | SUCCESS => {
    "changed": true, 
    "msg": "1 replacements made"
}

[root@Va6 ~]# grep  -niA1  "^servername"   /etc/httpd/conf/httpd.conf
95:ServerName  www.Va6.com
96-

[root@Va1 ~]# ansible  Va6  -m  command -a  'grep  "^ServerName"  /etc/httpd/conf/httpd.conf'

Va6 | SUCCESS | rc=0 >>
ServerName  www.Va6.com

[root@Va1 ~]# ansible  Va6  -m  shell  -a   'systemctl  restart  httpd'

Va6 | SUCCESS | rc=0 >>


 ## 在某一行前面插入一行：
ansible all -m lineinfile -a "dest=/root/test.txt  insertbefore='aa(.*)' line='eeee'"

在某一行后面插入一行，insertafter

[root@Va6 ~]# head  -4  /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.0.11  Va1
192.168.1.11  Va1
                                     ### 在某一行后面插入一行，insertafter
[root@Va1 ~]# ansible  Va6  -m  lineinfile  -a  "dest=/etc/hosts insertafter='^(192.168.0.11).*' line='192.168.0.16  www.Va6.com'"

Va6 | SUCCESS => {
    "backup": "", 
    "changed": true, 
    "msg": "line added"
}
[root@Va6 ~]# head  -4  /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.0.11  Va1
192.168.0.16  www.Va6.com

[root@Va1 ~]# ansible  Va6  -m  command  -a "elinks  -dump  127.0.0.1:8080"
Va6 | SUCCESS | rc=0 >>
   Va6 httpd apache

[root@Va1 ~]# ansible  Va6  -m  command  -a "elinks  -dump   www.Va6.com:8080"
Va6 | SUCCESS | rc=0 >>
   Va6 httpd apache

[root@Va1 ~]# ansible  Va6  -m  command  -a "apachectl  -t"
Va6 | SUCCESS | rc=0 >>
Syntax OK

[root@Va6 ~]# apachectl  -t    ## 修改后不报错##( 修改 ServerName配置 )
Syntax OK

[root@Va1 ~]# echo "<h1>Va1--ansible Va6 apache </h1>" > index.html

                        ## 在覆盖之前将原文件备份，备份文件包含时间信息 backup=yes
[root@Va1 ~]# ansible  other  -m  copy  -a  'src=/root/index.html  dest=/var/www/html/index.html backup=yes'
Va6 | SUCCESS => {
................
[root@Va6 ~]# ls  /var/www/html/
index.html  index.html.7837.2019-01-08@21:06:12~

[root@Va6 ~]# cat  /var/www/html/index.html.7837.2019-01-08@21\:06\:12~ 
Va6  httpd apache

[root@Va6 ~]# cat  /var/www/html/index.html
<h1>Va1--ansible Va6 apache </h1>

[root@Va1 ~]# ansible  Va6  -m  command  -a "elinks  -dump   www.Va6.com:8080"
Va6 | SUCCESS | rc=0 >>
                            Va1--ansible Va6 apache

#24.249.81.43来自美国
[root@Va1 ~]# ansible  Va6  -m  command  -a "nslookup  www.Va6.com"
Va6 | SUCCESS | rc=0 >>
Server:		192.168.0.254
Address:	192.168.0.254#53

Non-authoritative answer:
Name:	www.Va6.com
Address: 24.249.81.43   #24.249.81.43来自美国

[root@Va1 ~]# 


Ansible工作原理：

管理端支持local 、ssh、zeromq 三种方式连接被管理端，
默认使用基于ssh的连接 

可以按应用类型等方式进行Host Inventory（主机群）分类，
管理节点通过各类模块实现相应的操作－－－单个模块，单条命令的批量执行，我们可以称之为ad-hoc；

管理节点可以通过playbooks 实现多个task的集合实现一类功能，
如web服务的安装部署、数据库服务器的批量备份等。

playbooks我们可以简单的理解为，系统通过组合多条ad-hoc操作的配置文件

一、ansible七种武器
• 第一种武器
– ansible 命令,用于执行临时性的工作,也是我们之前
主要学习的功能,必须掌握

• 第二种武器
– ansible-doc 是 Ansible模块文档说明,针对每个模块
都有详细的用法说明及应用案例介终,功能和Linux系
统man命令类似,必须掌握

• 第三种武器
– ansible-console 是 Ansible 为用户提供的一款交互
式工具,用户可以在 ansible-console 虚拟出来的终
端上像 Shell 一样使用 Ansible 内置的各种命令,
这为习惯亍使用 Shell 交互方式的用户提供了良好的
使用体验。

• 第四种武器
– ansible-galaxy 从 github 上下载管理 Roles 的一款
工具,不 python 的 pip 类似。ansible七种武器

• 第五种武器
– ansible-playbook 是日常应用中使用频率最高的命令,
其工作机制是:通过读叏预先编写好的 playbook 文
件实现批量管理。要实现的功能不命令 ansible 一样,
可以理解为按一定条件组成的 ansible 任务集,必须掌握

• 第六种武器
– ansible-vault 主要用亍配置文件加密,如编写的
Playbook 配置文件中包含敏感信息,丌希望其他人随
意查看, ansible-vault 可加密/解密这个配置文件ansible七种武器

• 第七种武器
– ansible-pull
– Ansible 有两种工作模式 pull/push ,默认使用 push(推，推动)
模式工作,pull 模式和通常使用的 push 模式工作机理刚好相反
– 适用场景:有数量巨大的机器需要配置,即使使用高
幵収线程依旧要花费很多时间;
– 通常在配置大批量机器的场景下会使用,灵活性稍有
欠缺,但效率几乎可以无限提升,对运维人员的技术
水平和前瞻性规划有较高要求。
push  推，推动

pull 拉;扯;拉过来;划（船）
pull 拉;扯;拉过来;划（船）

push 
推，推动





yaml简介
• yaml 基础语法
– YAML的结构通过空格杢展示
– 数组使用"- "来表示
– 键值对使用": "来表示
– YAML使用一个固定的缩进风格表示数据层级结构关系
– 一般每个缩进级别由两个以上空格组成
– # 表示注释
• 注意:
– 不要使用tab,缩迚是初学者容易出错的地方之一
– 同一层级缩迚必须对齐

playbook语法基础
• playbook 诧法格式
– playbook由 YAML 语言编写,遵循 YAML 标准

– 在同一行中,#之后的内容表示注释
– 同一个列表中的元素应该保持相同的缩迚
– playbook 由一个或多个 play 组成
– play 中 hosts,variables,roles,tasks 等对象的表示
方法都是键值中间以 ": " 分隔表示
– YAML 还有一个小的怪癖. 所有的 YAML 文件开始行都
应该是 ---. 这是 YAML 格式的一部分, 表明一个文件的开始
















[root@Va2 ~]# sed  -n  '17p;38p'  /etc/ssh/sshd_config 
#Port 22
#PermitRootLogin yes

[root@Va2 ~]# sed  -i   '17s/#//;38s/#//'  /etc/ssh/sshd_config 

[root@Va2 ~]# sed  -n  '17p;38p;65p'  /etc/ssh/sshd_config 
Port 22
PermitRootLogin yes
PasswordAuthentication yes

[root@Va2 ~]# sed  -n  '41p;58,59p'  /etc/ssh/ssh_config 
#   Port 22
Host *
	GSSAPIAuthentication yes

[root@Va2 ~]# systemctl  restart   sshd  ;  systemctl  is-enabled  sshd
enabled

[root@Va2 ~]# cat   /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.0.11  Va1
192.168.1.11  Va1
192.168.0.12  Va2
192.168.1.12  Va2
192.168.0.13  Va3
192.168.1.13  Va3
192.168.0.14  Va4
192.168.1.14  Va4
192.168.0.15  Va5
192.168.1.15  Va5
192.168.0.16  Va6
192.168.1.16  Va6
192.168.0.17  Va7
192.168.1.17  Va7
192.168.0.18  Va8
192.168.1.18  Va8
192.168.0.19  Va9
192.168.1.19  Va9
[root@Va2 ~]# ifconfig  |grep  -A1 flags=
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.0.12  netmask 255.255.255.0  broadcast 192.168.0.255
--
eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.12  netmask 255.255.255.0  broadcast 192.168.1.255
--
eth2: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.2.12  netmask 255.255.255.0  broadcast 192.168.2.255
--
lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
--
virbr0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@Va2 ~]# 


1 简述什么是ansible

参考答案
ansible是2013年推出的一款IT自动化和DevOps软件，2015年被RedHat收购。是基于Python研发，糅合很多老运维工具的优点，实现了批量操作系统配置，批量程序部署，批量运行命令等功能
2 ansible可以实现什么功能

参考答案
自动化部署APP
自动化管理配置项
自动化持续交付
自动化（AWS）云服务管理
3 ansible优点有哪些

参考答案
只需要SSH和Python即可使用，无客户端
ansible功能强大，模块丰富
上手容易，门槛低
基于Python开发，做二次开发更容易
使用公司比较多，社区活跃
4 简述ansible中主机定义与分组的步骤

参考答案
1、ansible.cfg 配置文件：
inventory定义托管主机地址配置文件
2、编辑/etc/ansible/hosts文件，写入远程主机的地址。
格式：
# 表示注释
[组名称]
主机名称或ip地址，登录用户名，密码、端口等信息
测试：
ansible [组名称] --list-hosts
定义主机分组练习



1 阐述ansible七种武器有哪些

参考答案
第一种武器：
ansible 命令，用于执行临时性的工作，必须掌握
第二种武器：
ansible-doc是ansible模块的文档说明，针对每个模块都有详细的说明及
应用案例介绍，功能和Linux系统man命令类似，必须掌握

ansible-doc:是Ansible模块文档说明，针对每个模块都有详细的用法说明和应用案例介绍；

第三种武器：
ansible-console是ansible为用户提供的交互式工具，
用户可以在ansible-console虚拟出来的终端上像Shell一样使用ansible内置的各种命令，
这为习惯使用Shell交互方式的用户提供了良好的使用体验

ansible-console:让用户可以在ansible-console虚拟出来的终端上像Shell一样使用Ansible内置的各种命令；

ansible-console

root@mageduweb (2)[f:10] $ service name=httpd state=stopped

root@mageduweb (2)[f:10] $
执行用户@当前操作的主机组 (当前组的主机数量)[f:并发数]$

设置并发数： forks n  例如： forks 10
切换组： cd groupname  例如： cd mageduweb
列出当前组主机列表： list
列出所有的内置模块： ?


第四种武器：
galaxy
英 [ˈgæləksi]  美 [ˈɡæləksi]  
星系;银河系;一群显赫的（出色的）人物

ansible-galaxy从github上下载管理Roles的一款工具，与python的pip类似
ansible-galaxy:可以简单的理解为Github或PIP的功能，通过ansible-galaxy，我们可以下载安装优秀个Roles；

ansible-galaxy

用法：ansible-galaxy [delete|import|info|init|install|list|login|remove|search|setup] [—help] [options] …

去 https://galaxy.ansible.com/ 上传或下载优秀的Playbook(roles)

#列出所有已安装的galaxy
ansible-galaxy list

#安装galaxy
ansible-galaxy install geerlingguy.redis

#删除galaxy
ansible-galaxy remove geerlingguy.redis


第五种武器：
playbook
英 [p'leɪbʊk]   美 [p'leɪbʊk]  
剧本，剧本集

ansible-playbook是日常应用中使用频率最高的命令，工作机制：通过读取
先编写好的playbook文件实现批量管理，可以理解为按一定条件组成的ansible任
务集，必须掌握
ansible-playbook:是日常应用中使用频率最高的命令，其工作机制是，
通过读取预先编写好的playbook文件实现批量管理；

第六种武器：
vault
英 [vɔ:lt]   美 [vɔlt]  
n.
墓穴;拱顶，穹窿;地下室;撑物跳
[vault] 穹窿状覆盖物的顶部
穹窿 [qióng lóng]
(1) [sky]∶指天
(2) [vault;arched roof]∶中间高而四周下垂的样子

ansible-vault主要用于配置文件加密，如编写的playbook文件中包含敏
感信息，不想其他人随意查看，可用它加密/解密这个文件
ansible-valut

用法:ansible-vault [create|decrypt|edit|encrypt|rekey|view] [—help] [options] vaultfile.yml

ansible-vault encrypt hello.yml  # 加密
ansible-vault decrypt hello.yml  # 解密
ansible-vault view hello.yml  # 查看



第七种武器：

pull 拉;扯;拉过来;划（船）(被动模式)2000台主机以上适用 被 动服务模式
pull 拉;扯;拉过来;划（船）(被动模式)2000台主机以上适用 被 动服务模式

push  推，推动
push 推，推动(主动模式)

ansible-pull:Ansible的另一种工作模式，pull模式(被动模式)，
ansible默认使用push模式(主动模式)；

ansible有两种工作模式pull/push ，默认使用push模式工作，
pull和push工作模式机制刚好相反
 
一般2000台主机以下 适用主动服务模式
2000台主机以上适用 被 动服务模式

适用场景：有大批量机器需要配置，即便使用高并发线程依旧要花费很多时间
通常在配置大批量机器的场景下使用，灵活性稍有欠缺，但效率几乎可以无限
提升，对运维人员的技术水平和前瞻性规划有较高要求


2 什么是JSON以及其特性是什么

参考答案
JSON简介：
JSON是JavaScript对象表示法，它是一种基于文本独立于语言的轻量级数
据交换格式
JSON中的分隔符限于单引号" ' " 、小括号" () " 、中括号" [ ] " 、大
括号" { } " 、冒号 " : " 和逗号 " , "
JSON特性：
JSON是纯文本、具有"自我描述性"（人类可读）、具有层级结构（值中存在值）、
可通过JavaScript进行解析

大括号{} 表示对象, 用 点号 . 来引用 对象的 .属性/或函数 .(函数后面要加小括号)... 
中括号[] 表示数组, 用['下标']的方式来引用. 即使是混合式的数据结构, 也是同样的道理.
json的数据, 都是用 双引号, 
不管是key, 还是 value, 都要用 双引号 表示....

3 简述YAML是什么

参考答案
是一个可读性高，用来表达数据序列的格式
YAML（YAML Ain't Markup Language）参考了多种语言，如：C语言、Python、Perl等，并从XML、电子邮件的数据格式中获得灵感，Clark Evans在2001年首次发表了这种语言，目前已有数种编程语言或脚本语言支持这种语言
4 简述什么是playbook

参考答案
playbook是ansible用于配置，部署和管理托管主机剧本，通过playbook的详细描述，执行其中的一系列tasks，可以让远端主机达到预期状态
也可以说，playbook字面意思即剧本，现实中由演员按剧本表演，在ansible中由计算机进行安装，部署应用，提供对外服务，以及组织计算机处理各种各样的事情
5 用playbook安装Apache,修改端口，配置ServerName，修改主页，设置开机自启

参考答案
[root@ansible ansible]# vim http.yml
---
- hosts: cache
  remote_user: root
  tasks:
    - name: install one specific version of Apache
      yum:
        name: httpd        //安装Apache
        state: installed
    - lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^Listen '
        line: 'Listen 8080'        //修改端口为8080
    - replace:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^#(ServerName).*'        //配置ServerName
        replace: '\1 localhost'
    - service:
        name: httpd
        enabled: yes        //开机自启
        state: restarted
    - copy:
        src: /root/index.html        //修改主页，可以自己写个页面
        dest: /var/www/html/index.html
[root@ansible ansible]# curl 192.168.1.56:8080
hello world
[root@ansible ansible]# ssh cache
Last login: Fri Sep  7 09:32:05 2018 from 192.168.1.51
[root@cache ~]# apachectl -t
Syntax OK





