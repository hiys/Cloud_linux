

==========================  TCP/IP三次握手四次断开  =================
=================== TCP的三次握手(建立连接）和四次挥手(关闭连接）==========

                                       Client                                   Server
                             没有任何连接状态 CLOSED |                                   | CLOSED 没有任何连接状态
                                            |                                   | LISTEN 侦听来自远方TCP端口的连接请求
发送SYN,请求建立连接(seq=100,ctl=SYN) send SYN |--------------- SYN -------------->| receive SYN
       在发送连接请求后等待匹配的连接请求 SYN_SENT |                                   | SYN_RECV 服务端收到建立连接的SYN没有收到ACK包的时候状态
                 receive SYN+ACK |<-- SYN+ACK ---| SYN+ACK send 发送SYN，ACK(seq=300,ack=101,ctl=SYN,ACK)
                                        |            | SYN-RECEIVED 在收到和发送一个连接请求后等待对连接请求的确认状态
            发送ACK(seq=101  ack=301  ctl=ACK) |-------------- ACK --------------->| receive ACK
 代表一个打开的连接，数据可以传送给用户 ESTABLISHED|                                  | ESTABLISHED 代表一个打开的连接，数据可以传送给用户
                                            | <=== TCP session established ===> |
                                                         |                                              |
      发送FIN 请求断开连接(FIN=1,ACK=1) send FIN |-------------- FIN --------------->| receive FIN
等待远程TCP的连接中断请求，或先前的连接中断请求的确认 FIN_WAIT-1 |                       | CLOSE_WAIT 等待从本地用户发来的连接中断请求
                                 receive ACK |<------------- ACK ----------------| send ACK 发送ACK(ACK=1)
               从远程TCP等待连接中断请求 FIN_WAIT-2 |                                   |
                     receive FIN |<------------- FIN ----------------| send FIN 发送FIN 请求断开连接(FIN=1,ACK=1)
等待足够的时间以确保远程TCP接收到连接中断请求的确认 TIME_WAIT |                          | LAST_ACK 等待原来发向远程TCP的连接中断请求的确认
                            发送ACK(ACK=1) send ACK |-------------- ACK --------------->| receive ACK
                                     TimeOut |                                   | CLOSED 没有任何连接状态
                               没有任何连接状态 CLOSED |                                   |

位码即tcp标志位,有6种标示:

SYN(synchronous建立联机)

ACK(acknowledgement 确认)

PSH(push传送)

FIN(finish结束)

RST(reset重置)

URG(urgent紧急)

Sequence number(顺序号码)[32位序列号 和 32 位确认号 举例,seq=100,]

Acknowledge number(确认号码)
established   已建立的; 已设立的; 已制定的; 确定的
receive 收到; 接待; 接到; 接纳;
          接收; 受理; 欢迎; 承受;
TCP(Transmission Control Protocol)　传输控制协议

=============================== 以太网桢格式  =======================

                MAC头部  IP头部   TCP头部   上层数据
Destination Address    Source Address                          循环冗余校验 【Cyclic Redundancy Check 】
    DA                    SA               Type         Data               CRC
  目的地址                      源地址               类型/长度         数据                桢校验序列
6Byte[48bit]            6Byte【本机地址】  2Byte【16bit】 46~1500Byte       4Byte【32bit】

Mac 地址第 8 位（bit）= 0时，
即 第 2 位 16进制数 是 0，2，4，6，8，A，C，E 时，
表示该Mac地址为 “ 单 播 ”地址【物理地址】； 一对一

Mac 地址 第 8 位(bit) = 1 时
即 第 2 位 16进制数 是  1，3，5，7，9，B，D，F 时，
表示该Mac地址为 “ 组 播 ” 地址【逻辑地址】； 一对多

==================================
为了使运行不同操作系统的计算机的应用进程能够互相通信，
就必须用统一的方法对TCP/IP体系的应用进程进行标志。

 在运输层使用协议端口号(protocol port number)，
或通常简称为端口(port)；
当传输层从网络层收到数据后，
根据传输层协议中的端口号将数据交付给相应的应用进程
在通常情况下，端口好被划分为三段：

端口范围         端口类别
0到1023          公认的端口号，一般为服务端使用
1024到49151      已注册的端口号
41952到65535    动态或者私用端口号，一般为客户端使用

===============================================================

			             OSI参考模型(七层框架)

          [5] 应用层        |<----------协议--------->|	        应用层     (计算机) APDU [是应用层协议数据单元]【网络服务与最终用户的一个接口】
                HTTP  FTP  TFTP  SMTP【邮件协议】  SNMP【Simple Network Management Protocol 简单网络管理协议，SNMP就是为了让别人能够获得路由器上的统计数据而约定好的数据交流的规则】  DNS
                    上层数据
6  接口      
             表示层         |-----------协议-----------|         表示层              PPDU [是表示层协议数据单元]【数据的表现形式，如加密、压缩】
5  接口
 	     会话层         |-----------协议-----------|         会话层              SPDU [是会话层协议数据单元]【建立、管理、中止会话，例如断点续传】
4  接口      
      	  [4] 传输层        <----------协议--------->         传输层     (防火墙) TPDU [是传输层协议数据单元,即 segment "数据段"]【定义传输数据的协议端口号，以及流控和差错校验】
                TCP      UDP
                TCP头部     上层数据
3  接口
       	  [3] 网络层        <----------协议--------->         网络层     (路由器)  package 数据包 【用抓包工具抓到的一条条记录就是包】【进行逻辑地址寻址，实现不同网络之间的通信，定义了  基于IP 协议的逻辑地址】
                ICMP【ping这个工具 使用的协议】  IGMP【Internet Group Manage Protocol ： Internet组管理协议，提供internet网际多点 传送的功能,即将一个ip包拷贝给多个host，是一个尚处于实验阶段的协议】    IP   ARP【地址解析协议 Address Resolution Protocol】   RARP【Reverse Address Resolution Protocol 反向地址转换协议，允许局域网的物理机 从网关服务器的 ARP 表 或者缓存上 请求转换 其 IP 地址】
                IP头部   TCP头部     上层数据
2  接口
          [2] 数据链路层    <----------协议--------->         数据链路层 (交换机)  frame  数据帧 【数据链路层协议数据单元 以太网桢格式 】【链路层分组 称为 帧 】【建立逻辑连接、进行硬件地址寻址、差错校验等功能】
                MAC头部  IP头部   TCP头部   上层数据
1  接口   
          [1] 物理层	    <----------协议--------->	        物理层     (网卡)    bit   比特流  【建立、维护、断开物理连接】

          层            主机A                              主机B          数据单元
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
TCP/UDP常用端口号
默认端口号　　　　　　服务　　　　　　　　　　说明

21　　　　　　　　　　FTP　　　　　　　　　　文件传输协议（英文：File Transfer Protocol，缩写：FTP）
                                                 是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式。
                                                 它属于网络传输协议的应用层。

22　　　　　　　　　　SSH　　　　　　　　　 Secure Shell（缩写为SSH），
                                                 由IETF的网络工作小组（Network Working Group）所制定；
                                      SSH为一项创建在应用层和传输层基础上的安全协议，
                                                 为计算机上的Shell（壳层）提供安全的传输和使用环境。

23　　　　　　　　　　Telnet　　　　　　　  Telnet协议是一种应用层协议，使用于互联网及局域网中，
                                                 使用虚拟终端机的形式，提供双向、以文字字符串为主的交互功能。
                                                 属于TCP/IP协议族的其中之一，
                                                 是Internet远程登录服务的标准协议和主要方式，
                                                 常用于网页服务器的远程控制，可供用户在本地主机运行远程主机上的工作。

80　　　　　　　　　　HTTP　　　　　　　　  超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）
                                                是互联网上应用最为广泛的一种网络协议。
                                                设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。

443　　　　　　　　　  HTTPS　　　　　　　超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，
                                               常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。
                                               在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来加密数据包。
                                     HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。

TCP     协议名称          端口号     套接字        作用
Telnet  专司终端模拟      23        Tcp 23      它为用户提供了在本地计算机上完成远程主机工作的能力
SMTP    简单邮件传输协议  25        Tcp 25      它帮助每台计算机在发送或中转信件时找到下一个目的地
HTTP    超文本传输协议    80        Tcp 80      超文本传输协议，是我们浏览网页、看在线视频、听在线音乐等必须遵循的规则
FTP     文件传输协议      20、21    Tcp 20      文件传输协议 FTP [ File Transfer Protocol ]使得主机间可以共享文件
                                        和Tcp21
DNS     域名系统          53        Tcp 53      因特网上作为域名和IP地址相互映射的一个分布式数据库，
                                                      能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串
HTTPS   超文本传输安全协议 443     Tcp 443     HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版
SSH     安全壳协议        22        Tcp 22	SSH  为建立在应用层和传输层基础上的安全协议
POP3    邮局协议版本3    110        Tcp 110     本协议主要用于支持使用客户端远程管理在服务器上的电子邮件
NTP     网络时间协议     123        Tcp 123     它是用来同步网络中各个计算机时间的协议
IMAP4 第四版因特网信息存取协议 143  Tcp 143     IMAP4协议与POP3协议一样
                                                       也是规定个人计算机如何访问互联网上的邮件服务器进行收发邮件的协议，
                                                       但是IMAP4协议同POP3协议相比更高级
--------------------------------------------------------------------------------------
UDP         协议名称             端口号    套接字       作用
SNMP        简单网络管理协议     161       UDP 161    该协议能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况
TFTP        简单文件传输协议     69        UDP 69     TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，
                                                              提供不复杂、开销不大的文件传输服务
DNS         域名系统             53        UDP 53     因特网上作为域名和IP地址相互映射的一个分布式数据库，
                                                             能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串
BooTPS/DHCP 动态主机配置协议	67	UDP 67    主要有两个用途:给内部网络或网络服务供应商自动分配IP地址，
                                                             给用户或者内部网络管理员作为对所有计算机作中央管理的手段

Email  一个是SMTP的25号端口，还有一个是POP3的110号端口。
FTP    一个是20号端口，一个是21号端口，
  通常情况下被动模式使用的是21号端口来建立连接的，
  传输数据的是随机端口，
如果设置的是主动模式的话，则是用21号端口来建立连接，用20号端口来传输数据。

A (126) 1  -126.0.0.0  [0000  0001] -[0111 1111]  私有地址A 10.0.0.1    ~ 10.255.255.254
B (64 ) 128-191.0.0.0  [1000  0000] -[1011 1111]  私有地址B 172.16.0.1  ~ 172.31.255.254
C (32 ) 192-223.0.0.0  [1100  0000] -[1101 1111]  私有地址C 192.168.0.1 ~ 192.168.255.254
D (16 ) 224-239.0.0.0  [1110  0000] -[1110 1111]  组播地址
E (15 ) 240-254.0.0.0  [1111  0000] -[1111 1110]
        1 	 1 	 1 	 1 	 1 	 1 	 1 	 1 
	0	0	0	0	0	0	0	0
 	128	64	32	16	8	4	2	1


             ##  使用标准acl  0  代表匹配，1 不匹配
    ##  使用标准acl  0  代表匹配，1 不匹配 [ 二进制 8个1 代表255=(1111 1111)2 ]

在这里,我们可以使用
"ACL标准访问"技术来
"整体控制访问",
通过设置"允许,拒绝"
来限制某台计算机,或者某个网段的计算机访问外网,实现了信息安全的控制.
当然,对于办公室内网络,工作需要外网,
如果希望做到“允许外来的网页通信流量通过，
拒绝外来的其他通信流量”，
那么可以使用扩展ACL来达到目的.
"扩展ACL访问"技术提供了更广泛的控制范围.
通过设置 "允许,拒绝" 来 "精确控制流量"
"标准与扩展型ACL"这两种技术都能够实现"流量监控"
节约大量的数据流量,也等于为客户节约大量的"运营成本"。
最后,我们来看"隐藏拒绝访问"
这个功能是"路由器自动设置"的,我们在设置限制访问权的时候,
需要手动修改默认拒绝网段或者某个主机.

====================================

"硬件防火墙制造厂商"主要有
国际一线品牌有 ：cisco、juniper、fortinet、checkpoint、mcafee等；
国内一线品牌有 天融信、东软、华为、360网神,绿盟、安恒等。

软件防火墙厂商有
金山毒霸11 v11.2018.3.0
McAfee Stinger & Raptor(迈克菲杀毒软件) v12.1.0.2852
火绒安全软件 v4.0.68.7
瑞星个人防火墙软件V16+ v24.00.56.56
Windows Firewall Control v5.4.0.0

==========================================
              ##  使用标准acl  0  代表匹配，1 不匹配
    ##  使用标准acl  0  代表匹配，1 不匹配 [ 二进制 8个1 代表255=(1111 1111)2 ]

1 对于教室学员,内部资源已经够用,不需要连接外网,
可以设置ACL拒绝技术

##使用标准acl限制--全局指定主机---拒绝主机 1.1 的数据流量流出
R1(config)#access-list  1  deny  192.168.1.1  0.0.0.0

##使用标准acl限制--全局指定网段---拒绝主机网段 1.0 的数据流量流出
R1(config)#access-list  1  deny  192.168.1.0  0.0.0.255

#放行其他数据
#Router(config)#access-list 1 permit any

##在路由器接口中应用acl
R1(config)#interface gigabitEthernet 0/0{面向内网的接口0/0}

#接口模式：ip  access-group  列表号 {in或out}
R1(config)#interface gigabitEthernet 0/0
R1(config-if)#ip access-group 1 in #{阻止教室网络进入外网}


2 对于办公室内网络,工作需要外网,
可以设置ACL允许技术
             ##  使用标准acl  0  代表匹配，1 不匹配
##使用标准acl限制--全局指定主机---允许主机 2.1 的数据流量流出
R1(config)#access-list  1 permit  192.168.2.1  0.0.0.0

##使用标准acl限制--全局指定网段---允许主机网段 1.0 的数据流量流出
        ##  使用标准acl  0  代表匹配，1 不匹配 [ 二进制 8个1 代表255=(1111 1111)2 ]
R1(config)#access-list  1  permit  192.168.2.0  0.0.0.255

#拒绝其他数据{ 默认拒绝}
Router(config)#access-list 1 deny  any

##在路由器接口中应用acl
R1(config)#interface gigabitEthernet 0/0{面向内网的接口0/0}

#接口模式：ip  access-group  列表号 {in或out}
R1(config-if)#ip access-group 1 in #{允许办公室网络进入外网}

标准ACL只检查数据包的源地址; 

扩展ACL既检查数据包的源地址，也检查数据包的目的地址，
同时还可以检查数据包的特定协议类型、端口号等

扩展ACL比标准ACL提供了更广泛的控制范围.
如果希望做到“允许外来的Web通信流量通过，
拒绝外来的FTP和Telnet等通信流量”，
那么可以使用扩展ACL来达到目的，标准ACL不能控制这么精确。

##使用扩展ACL拒绝ftp服务,允许主机192.168.2.2访问www服务

Router(config)#access-list 100 deny tcp  any  any eq 21
Router(config)#access-list 100 permit tcp  192.168.2.2 0.0.0.0  any eq 80

  #        协议    源地址  反掩码       目标地址  目标地址反掩码 eq  相应端口   
 # deny  tcp   host 192.168.2.1 host  192.168.1.1   eq   21

-将ACL置于网络中时:

      *标准ACL应靠近目的地址

      *扩展ACL应靠近源地址。
常见的协议端口号：
http   80
dhcp   server67 client68
tftp    69
DNS   tcp的53号端口和udp的53号端口，而我们平时上网的时候都是用的UDP的53号端口。

      只有在DNS服务器之间同步DNS服务的时候，才会用到基于TCP的53号端口。或者发的报文比较大的时候也才会用到DNS的第53号端口。

NTP   是网络时间协议，使用的是123号端口
Email  一个是SMTP的25号端口，还有一个是POP3的110号端口。
FTP    一个是20号端口，一个是21号端口，
  通常情况下被动模式使用的是21号端口来建立连接的，
  传输数据的是随机端口，
如果设置的是主动模式的话，则是用21号端口来建立连接，用20号端口来传输数据。

=======================================
SELinux(Security-Enhanced Linux) 是美国国家安全局（NAS）对于强制访问控制的实现，是 Linux上最杰出的新安全子系统.
Security-Enhanced Linux
SELinux是 Security-Enhanced Linux的简称，
是一种内核强制访问控制安全系统
[root@server0 ~]# firewall-cmd --get-default-zone 
trusted
[root@server0 ~]# firewall-cmd --permanent  --add-source=172.34.0.0/24  --zone=block
-----------------------------------------------------------------------
#vim /etc/selinux/config
SELINUX=enforcing/permissive/disabled
SELinux不是杀毒软件
SELinux不是口令密码、防火墙或者其他安全系统的替代物
SELinux不是一体化的安全解决方案
SELinux是在已有的安全解决方案基础之上，增强安全性，而不是替代原有的安全解决方案。
工作状态
Enforcing(启用状态)：
Permissive（自由状态）：
Disabled(禁用状态)：SELinux不启用
#semanage fcontext -l | grep /var/www/ 
##修改文件的SELinux安全上下文
#chcon -R --reference=/var/www/ /webroot

[root@server0 ~]# firewall-cmd --permanent  --add-source=172.34.0.0/24  --zone=block
==========================================

