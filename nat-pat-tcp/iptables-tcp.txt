
[root@hiys ~]# echo 6  |clone-auto7

[root@hiys ~]# ls  /etc/yum.repos.d/
NSD-2018-1-12.tar.gz     repo  rhel7.repo

[root@hiys ~]# cat  /etc/yum.repos.d/rhel7.repo 
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://127.0.0.1/rhel7
enabled=1
gpgcheck=0
[root@hiys ~]# yum clean  all >/dev/null &&  yum repolist  |tail  -3

源标识                   源名称                                            状态
rhel7                    rhel-server-7.4-x86_64-dvd.iso                    4,986
repolist: 4,986
[root@hiys ~]# tail  -3  /etc/fstab 
UUID=bb62e9f9-f903-40e2-be01-730eb61cc7ea /                       ext4    defaults        1 1
UUID=d60728be-85d6-4b5d-8ca8-b29016db27f1 /var/lib/libvirt/images ext4    defaults        1 2
/var/lib/libvirt/images/iso/rhel-server-7.4-x86_64-dvd.iso  /var/ftp/rhel7 iso9660 defaults 0 0

======================   虚拟网络 命令 常用 =====================

[root@hiys ~]# virsh  net-autostart --disable  vbr
网络vbr取消标记为自动启动

[root@hiys ~]# virsh  net-destroy   vbr
网络 vbr 被删除

[root@hiys ~]# ls
autostart  default.xml  private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml  vbr.xml

[root@hiys ~]# virsh net-undefine  vbr   ##取消定义一个非活跃的网络 vbr
网络 vbr 已经被取消定义

[root@hiys ~]# ls  /etc/libvirt/qemu/networks/
autostart  default.xml  private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml

==================  创建  虚拟网络  vbr   vbr1  private2  [ 10 ] ===========================



[root@room9pc25 ~]# virsh  net-dumpxml  private2
<network>
  <name>private2</name>
  <uuid>dca824f3-cdfc-4fcd-9b98-f8a46656c27d</uuid>
  <bridge name='private2' stp='on' delay='0'/>
  <mac address='52:54:00:f8:f9:d7'/>
  <domain name='private2'/>
  <ip address='192.168.2.254' netmask='255.255.255.0'>
  </ip>
</network>

[root@room9pc25 ~]# 

vbr     :   inet 192.168.0  .254  --eth0
vbr1    :   inet 192.168.1  .254  --eth1
private2:   inet 192.168.2  .254  --eth2

[root@hiys ~]# cd  /etc/libvirt/qemu/networks/

[root@hiys networks]# ls
autostart  default.xml  private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml

[root@hiys networks]# vim  /etc/libvirt/qemu/networks/vbr.xml

[root@hiys networks]# cat  /etc/libvirt/qemu/networks/vbr.xml

<network>
  <name>vbr</name>
  <forward mode='nat'>
  </forward>
  <bridge name='vbr' stp='on' delay='0'/>
  <domain name='vbr'/>
  <ip address='192.168.0.254' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.0.100' end='192.168.0.200'/>
    </dhcp>
  </ip>
</network>

[root@hiys networks]# cp  /etc/libvirt/qemu/networks/vbr.xml  /etc/libvirt/qemu/networks/vbr1.xml

[root@hiys networks]# vim  /etc/libvirt/qemu/networks/vbr1.xml

[root@hiys networks]# cat  /etc/libvirt/qemu/networks/vbr1.xml

<network>
  <name>vbr1</name>
  <forward mode='nat'>
  </forward>
  <bridge name='vbr1' stp='on' delay='0'/>
  <domain name='vbr1'/>
  <ip address='192.168.1.254' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.1.100' end='192.168.1.200'/>
    </dhcp>
  </ip>
</network>

[root@hiys networks]# ls
autostart  default.xml  private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml  vbr1.xml  vbr.xml

[root@hiys networks]# virsh  net-define  vbr.xml 
Network vbr defined from vbr.xml

[root@hiys networks]# virsh  net-define  vbr1.xml 
Network vbr1 defined from vbr1.xml

[root@hiys networks]# virsh  net-autostart  vbr
Network vbr marked as autostarted

[root@hiys networks]# virsh  net-autostart  vbr1
Network vbr1 marked as autostarted

[root@hiys networks]# virsh  net-start  vbr
Network vbr started

[root@hiys networks]# virsh  net-start  vbr1
Network vbr1 started

[root@hiys networks]# ifconfig vbr ;ifconfig vbr1


[root@hiys ~]# cat  local.repo.txt
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.0.254/rhel7
enabled=1
gpgcheck=0



[root@hiys ~]# cat  local.repo.txt
[CentOS7-1708]
name=CentOS7-1708
gpgcheck=0
baseurl=ftp://192.168.0.254/CentOS7-1708/
enabled=1
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.0.254/rhel7
enabled=1
gpgcheck=0


[root@hiys ~]# vim   Vaxip.sh
[root@hiys ~]# cat   Vaxip.sh
#!/bin/bash
x=$1
ip=$2
export LANG=en_US.UTF-8
echo  1 |passwd  --stdin  root
echo  Va${x} > /etc/hostname
echo  "LANG=\"en_US.UTF-8\"" >> /etc/sysconfig/i18n
echo  "LANG=\"en_US.UTF-8\"" >>  /etc/rc.local
chmod  a+x  /etc/rc.d/rc.local
source   /etc/rc.local

echo  "NAME=\"eth0\"
DEVICE=\"eth0\"
ONBOOT=yes
NM_CONTROLLED=\"no\"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL=\"no\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.0.${ip}\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.0.254\""  > /etc/sysconfig/network-scripts/ifcfg-eth0

echo  "NAME=\"eth1\"
DEVICE=\"eth1\"
ONBOOT=yes
NM_CONTROLLED=\"no\"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL=\"no\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.1.${ip}\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.0.254\""  > /etc/sysconfig/network-scripts/ifcfg-eth1

echo  "NAME=\"eth2\"
DEVICE=\"eth2\"
ONBOOT=yes
NM_CONTROLLED=\"no\"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL=\"no\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.2.${ip}\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.0.254\""  > /etc/sysconfig/network-scripts/ifcfg-eth2

systemctl  stop   NetworkManager
yum  -y   remove  NetworkManager-*  firewalld-*  python-firewall 
sed  -i  "7c SELINUX=disabled"  /etc/selinux/config
systemctl   restart  network

=======================
 ~]# virt-manager   手动改变网卡
 ～ 】 注意增加内存 2048 MiB
 ～ 】 注意增加 cpu  2  个

[root@hiys ~]# virsh console  Va1

localhost login: root
密码：
  用户 root   123456 密码  修改密码 为 1 
Va1  192.168.0.11 ---vbr 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 ---vbr 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 ---vbr 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 ---vbr 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 ---vbr1 外网 1 
Va4  192.168.2.14 ---private2 外网 2  

Va5  192.168.1.15 ---vbr1 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 ---private2 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口
======================= =============================

[root@localhost ~]# ifconfig  |grep  eth
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        ether 52:54:00:6f:10:ef  txqueuelen 1000  (Ethernet)
eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        ether 52:54:00:f3:7b:05  txqueuelen 1000  (Ethernet)
eth2: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        ether 52:54:00:7c:8d:51  txqueuelen 1000  (Ethernet)
        ether 52:54:00:62:a0:90  txqueuelen 1000  (Ethernet)

[root@localhost ~]# vim  Vaxip.sh

[root@localhost ~]# cat   Vaxip.sh
#!/bin/bash
x=$1
ip=$2
export LANG=en_US.UTF-8
echo  1 |passwd  --stdin  root
echo  Va${x} > /etc/hostname
echo  "LANG=\"en_US.UTF-8\"" >> /etc/sysconfig/i18n
echo  "LANG=\"en_US.UTF-8\"" >>  /etc/rc.local
chmod  a+x  /etc/rc.d/rc.local
source   /etc/rc.local

echo  "NAME=\"eth0\"
DEVICE=\"eth0\"
ONBOOT=yes
NM_CONTROLLED=\"no\"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL=\"no\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.0.${ip}\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.0.254\""  > /etc/sysconfig/network-scripts/ifcfg-eth0

echo  "NAME=\"eth1\"
DEVICE=\"eth1\"
ONBOOT=yes
NM_CONTROLLED=\"no\"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL=\"no\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.1.${ip}\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.0.254\""  > /etc/sysconfig/network-scripts/ifcfg-eth1

echo  "NAME=\"eth2\"
DEVICE=\"eth2\"
ONBOOT=yes
NM_CONTROLLED=\"no\"
TYPE=Ethernet
IPV6INIT=no
IPV4_FAILURE_FATAL=\"no\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.2.${ip}\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.0.254\""  > /etc/sysconfig/network-scripts/ifcfg-eth2

systemctl  stop   NetworkManager
yum  -y   remove  NetworkManager-*  firewalld-*  python-firewall 
sed  -i  "7c SELINUX=disabled"  /etc/selinux/config
systemctl   restart  network

[root@localhost ~]# . Vaxip.sh  1  11  ## 主机名 Va1    ip  11
.............
  tracker.x86_64 0:1.10.5-4.el7                                                 

Complete!
[root@localhost ~]# ifconfig  |awk '/inet /{print $2}'
192.168.0.11
192.168.1.11
192.168.2.11
127.0.0.1
192.168.122.1
[root@localhost ~]# cat  /etc/hostname 
Va1
[root@localhost ~]# reboot

[root@room9pc27 ~]# ssh  -o  StrictHostKeyChecking=no  -X  192.168.0.11
Warning: .................
root@192.168.0.11's password:   1
........................
[root@Va1 ~]# free  -m
              total        used        free      shared  buff/cache   available
Mem:           2000         100        1760           8         138        1744
Swap:          2047           0        2047

[root@Va1 ~]# ip -o  address
1: lo    inet 127.0.0.1/8 scope host lo\       valid_lft forever preferred_lft forever
1: lo    inet6 ::1/128 scope host \       valid_lft forever preferred_lft forever
2: eth0    inet 192.168.0.11/24 brd 192.168.0.255 scope global eth0\       valid_lft forever preferred_lft forever
2: eth0    inet6 fe80::5054:ff:fe6f:10ef/64 scope link \       valid_lft forever preferred_lft forever
3: eth1    inet 192.168.1.11/24 brd 192.168.1.255 scope global eth1\       valid_lft forever preferred_lft forever
3: eth1    inet6 fe80::5054:ff:fef3:7b05/64 scope link \       valid_lft forever preferred_lft forever
4: eth2    inet 192.168.2.11/24 brd 192.168.2.255 scope global eth2\       valid_lft forever preferred_lft forever
4: eth2    inet6 fe80::5054:ff:fe7c:8d51/64 scope link \       valid_lft forever preferred_lft forever
5: virbr0    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0\       valid_lft forever preferred_lft forever

[root@Va1 ~]# ip  route  show
default via 192.168.0.254 dev eth0 
169.254.0.0/16 dev eth0 scope link metric 1002 
169.254.0.0/16 dev eth1 scope link metric 1003 
169.254.0.0/16 dev eth2 scope link metric 1004 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.11 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.11 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.11 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 

[root@Va1 ~]# scp  -o  StrictHostKeyChecking=no  root@192.168.0.254:/root/local.repo.txt  \
>  /etc/yum.repos.d/local.repo
ssh: connect to host 192.168.0.254 port 22: Connection refused

[root@room9pc27 ~]# sed  -n  '16,17p;38p;65p'  /etc/ssh/sshd_config
Port 7920
#Port 22
#PermitRootLogin yes
PasswordAuthentication yes
[root@room9pc27 ~]# sed  -i   '38s/#//'  /etc/ssh/sshd_config
[root@room9pc27 ~]# systemctl  restart   sshd
[root@room9pc27 ~]# sed  -n  '16,17p;38p;65p'  /etc/ssh/sshd_config 
Port 7920
#Port 22
PermitRootLogin yes
PasswordAuthentication yes

               ## -P  7920  使用非特定的 port 去对外联机

[root@Va1 ~]# scp  -P 7920  -o  StrictHostKeyChecking=no  root@192.168.0.254:/root/local.repo.txt   /etc/yum.repos.d/local.repo
Warning: Permanently added '[192.168.0.254]:7920' (ECDSA) to the list of known hosts.
root@192.168.0.254's password: Taren1
local.repo.txt                                                                  100%   99    65.5KB/s   00:00    

[root@Va1 ~]# ls  /etc/yum.repos.d/
local.repo  redhat.repo

[root@Va1 ~]# cat  /etc/yum.repos.d/local.repo 
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.0.254/rhel7
enabled=1
gpgcheck=0
[root@Va1 ~]# yum clean  all >/dev/null &&  yum  repolist |tail  -3
源标识                   源名称                                            状态
rhel7                    rhel-server-7.4-x86_64-dvd.iso                    4,986
repolist: 4,986

/****
[root@hiys ~]# scp  local.repo.txt  root@192.168.0.14:/etc/yum.repos.d/local.repo
root@192.168.0.14's password: 1
local.repo.txt                                   100%  195   225.8KB/s   00:00   
*****/

=====================================================

==========================  TCP/IP三次握手四次断开  =================
=================== TCP的三次握手(建立连接）和四次挥手(关闭连接）==========

                                       Client                                   Server
                             没有任何连接状态 CLOSED |                                   | CLOSED 没有任何连接状态
                                            |                                   | LISTEN 侦听来自远方TCP端口的连接请求
发送SYN,请求建立连接(seq=100,ctl=SYN) send SYN |--------------- SYN -------------->| receive SYN
       在发送连接请求后等待匹配的连接请求 SYN_SENT |                                   | SYN_RECV 服务端收到建立连接的SYN没有收到ACK包的时候状态
                 receive SYN+ACK |<-- SYN+ACK ---| SYN+ACK send 发送SYN，ACK(seq=300,ack=101,ctl=SYN,ACK)
                                        |            | SYN-RECEIVED 在收到和发送一个连接请求后等待对连接请求的确认状态
            发送ACK(seq=101  ack=301  ctl=ACK) |-------------- ACK --------------->| receive ACK
 代表一个打开的连接，数据可以传送给用户 ESTABLISHED|                                  | ESTABLISHED 代表一个打开的连接，数据可以传送给用户
                                            | <=== TCP session established ===> |
                                                         |                                              |
      发送FIN 请求断开连接(FIN=1,ACK=1) send FIN |-------------- FIN --------------->| receive FIN
等待远程TCP的连接中断请求，或先前的连接中断请求的确认 FIN_WAIT-1 |                       | CLOSE_WAIT 等待从本地用户发来的连接中断请求
                                 receive ACK |<------------- ACK ----------------| send ACK 发送ACK(ACK=1)
               从远程TCP等待连接中断请求 FIN_WAIT-2 |                                   |
                     receive FIN |<------------- FIN ----------------| send FIN 发送FIN 请求断开连接(FIN=1,ACK=1)
等待足够的时间以确保远程TCP接收到连接中断请求的确认 TIME_WAIT |                          | LAST_ACK 等待原来发向远程TCP的连接中断请求的确认
                            发送ACK(ACK=1) send ACK |-------------- ACK --------------->| receive ACK
                                     TimeOut |                                   | CLOSED 没有任何连接状态
                               没有任何连接状态 CLOSED |                                   |

位码即tcp标志位,有6种标示:

SYN(synchronous建立联机)

ACK(acknowledgement 确认)

PSH(push传送)

FIN(finish结束)

RST(reset重置)

URG(urgent紧急)

Sequence number(顺序号码)[32位序列号 和 32 位确认号 举例,seq=100,]

Acknowledge number(确认号码)
established   已建立的; 已设立的; 已制定的; 确定的
receive 收到; 接待; 接到; 接纳;
          接收; 受理; 欢迎; 承受;
TCP(Transmission Control Protocol)　传输控制协议

====================  tcpdump  ======================


[root@room9pc27 ~]# which tcpdump 
/usr/sbin/tcpdump
[root@room9pc27 ~]# tcpdump   ## listening on rhce 正在监听 网卡 rhce   ## 但是默认监听eth0
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on rhce, link-type EN10MB (Ethernet), capture size 262144 bytes
^C
0 packets captured
0 packets received by filter
0 packets dropped by kernel

[root@room9pc27 ~]# ifconfig  rhce
rhce: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.25.254.250  netmask 255.255.255.0  broadcast 172.25.254.255
        ether 52:54:00:45:6a:61  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

[root@room9pc27 ~]# ifconfig  |head -2
enp1s0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 176.121.209.134  netmask 255.255.255.0  broadcast 176.121.209.255

[root@room9pc27 ~]# tcpdump   -i  enp1s0  ##on enp1s0 正在监听 网卡 enp1s0 ## -i 即 interface  

tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp1s0, link-type EN10MB (Ethernet), capture size 262144 bytes

12:48:58.485788 IP 176.121.209.128.41138 > 239.255.255.250.ssdp: UDP, length 172
12:48:58.486593 IP room9pc27.tedu.cn.47864 > 176.121.0.100.domain: 47558+ PTR? 250.255.255.239.in-addr.arpa. (46)
12:48:58.511118 IP 176.121.0.100.domain > room9pc27.tedu.cn.47864: 47558 NXDomain 0/1/0 (103)
12:48:58.513407 IP room9pc27.tedu.cn.54511 > 176.121.0.100.domain: 41623+ PTR? 128.209.121.176.in-addr.arpa. (46)
^C
12:48:58.710057 IP 176.121.209.122.mdns > 224.0.0.251.mdns: 0*- [0q] 6/0/0 (Cache flush) TXT "", (Cache flush) A 176.121.209.122, (Cache flush) PTR room9cp01.local., (Cache flush) HINFO, (Cache flush) SRV room9cp01.local.:9 0 0, (Cache flush) AAAA fe80::ff76:efc9:e067:17b4 (219)

5 packets captured
46 packets received by filter
0 packets dropped by kernel

[root@room9pc27 ~]# 

---------------------------------  tcpdump  ----------------------------
表达式用于筛选输出哪些类型的数据包，
如果没有给定表达式，
所有的数据包都将输出，
否则只输出表达式为true的包。
在表达式中出现的shell元字符建议使用单引号包围。

tcpdump的表达式由一个或多个"单元"组成，
每个单元一般包含ID的修饰符
和一个ID(数字或名称)。

有三种修饰符：

第一种是关于类型的关键字

(1).type：指定ID的类型。
可以给定的值有host/net/port/portrange。
例如"host foo"，"net 128.3"，"port 20"，"portrange 6000-6008"。
默认的type为host。

第二种是确定传输方向的关键字，

主要包括src , dst ,dst or src, dst and src ,
这些关键字指明了传输的方向。
举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , 
dst net 202.0.0.0 指明目的网络地址是202.0.0.0 。
如果没有指明方向关键字，则缺省是src or dst关键字。
(2).dir：指定ID的方向。
可以给定的值包括src/dst/src or dst/src and dst，
默认为src or dst。
例如，"src foo"表示源主机为foo的数据包，
"dst net 128.3"表示目标网络为128.3的数据包，
"src or dst port 22"表示源或目的端口为22的数据包。

第三种是协议的关键字，

/****
WLAN是利用无线通信技术在一定的局部范围内建立的网络，
是计算机网络与无线通信技术相结合的产物，
它以无线多址信道作为传输媒介，
提供传统有线局域网LAN（LocalAreaNetwork）的功能，
能够使用户真正实现随时、随地、随意的宽带网络接入。
*****/

主要包括 fddi,  ip,  arp,  rarp,  tcp,
  udp，  wlan  等类型。
Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定 的网络协议，
实际上它是"ether"的别名，
fddi和ether具有类似的源地址和目的地址，
所以可以将fddi协议包当作ether的包进行处理和 分析。

其他的几个关键字就是指明了监听的包的协议内容。
如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。
(3).proto：通过给定协议限定匹配的数据包类型。
常用的协议有tcp/udp/arp/rarp/ip/ether/icmp等，
若未给定协议类型，
则匹配所有可能的类型。
例如"tcp port 21"，
"udp portrange 7000-7009"。

除了这三种类型的关键字之外，
其他重要的关键字如下：
gateway, broadcast,less,greater,
还有三种逻辑运算，
取非运算是 'not ' '! ', 
与运算是'and','&&;
或运算 是'or' ,'||'；
这些关键字可以组合起来构成强大的组合条件来满足人们的需要


  普通情况下，直接启动tcpdump将监视第一个网络界面上所有流过的数据包。

所以，一个基本的表达式单元格式为"proto dir type ID"

tcpdump [ -DenNqvX ] [ -c count ] [ -F file ] [ -i interface ] [ -r file ]
        [ -s snaplen ] [ -w file ] [ expression ]

常用选项	具体含义
-i	指定监听的网络接口。
-nn	IP和端口均以数字形式显示。
-c	在收到指定的数据分组后，tcpdump停止，
   如果没有这个参数，会持续不断的监听用户，直到输入[Ctrl]+C为止。
-t	再输入的每一行不打印时间戳。
-q	只输出较少的协议信息，仅输出协议名称，不输出封包标记信息。
-w	FILE直接将分组写入文件中，而不是到stdout。
-r	FILE从后面接的文件将数据包数据读出来。
-s	设置数据包抓取长度为len，如果不设置默认为65535字节。
-D	列出可用于抓包的接口。列出接口的数值编号和接口名。可用于-i后。
-L	列出网络接口的已知数据链路。
-F	从文件中读取抓包的过滤表达式，若使用该选项，则命令行中给定的其他表达式都将失效。
-A	数据包的内容以ASCLL显示，通常用来捕捉www的网页数据包资料
-X	数据包内容以十六进制和ASCLL显示。
-XX	比-X输出更详细。
--------------------- 

抓包选项：
-c：指定要抓取的包数量。
注意，是最终要获取这么多个包。
例如，指定"-c 10"将获取10个包，
但可能已经处理了100个包，只不过只有10个包是满足条件的包。

-i interface：指定tcpdump需要监听的接口。
若未指定该选项，
将从系统接口列表中搜寻编号最小的已配置好的接口
(不包括loopback接口，要抓取loopback接口使用tcpdump -i lo)，
  ：一旦找到第一个符合条件的接口，搜寻马上结束。
可以使用'any'关键字表示所有网络接口。

-n：对地址以数字方式显式，否则显式为主机名，
也就是说 -n 选项 不 做 主机名解析。

-nn：除了-n的作用外，还把端口显示为数值，否则显示端口服务名。

-N：不打印出host的域名部分。
例如tcpdump将会打印'nic'而不是'nic.ddn.mil'。

-P：指定要抓取的包是流入还是流出的包。
可以给定的值为"in"、"out"和"inout"，默认为"inout"。

-s len：设置tcpdump的数据包抓取长度为len，
如果不设置默认将会是65535字节。
对于要抓取的数据包较大时，
长度设置不够可能会产生包截断，
若出现包截断，
      ：输出行中会出现"[|proto]"的标志(proto实际会显示为协议名)。
但是抓取len越长，
包的处理时间越长，
并且会减少tcpdump可缓存的数据包的数量，
      ：从而会导致数据包的丢失，
所以在能抓取我们想要的包的前提下，
抓取长度越小越好。

输出选项：
-e：输出的每行中都将包括数据链路层头部信息，
例如源MAC和目标MAC。

-q：快速打印输出。
即打印很少的协议相关信息，
从而输出行都比较简短。

-X：输出包的头部数据，
会以16进制和ASCII两种方式同时输出。

-XX：输出包的头部数据，
会以16进制和ASCII两种方式同时输出，更详细。

-v：当分析和打印的时候，
产生详细的输出。

-vv：产生比-v更详细的输出。

-vvv：产生比-vv更详细的输出。

其他功能性选项：
-D：列出可用于抓包的接口。
将会列出接口的数值编号和接口名，
它们都可以用于"-i"后。

-F：从文件中读取抓包的表达式。
若使用该选项，
则命令行中给定的其他表达式都将失效。

-w：将抓包数据输出到文件中而不是标准输出。
  可以同时配合"-G time" 选项  使得 输出文件 每time秒 就自动 切换到 另一个文件。
可通过"-r"选项载入这些文件以进行分析和打印。

-r：从给定的数据包文件中读取数据。
使用"-"表示从标准输入中读取。

==========================  Va1   ==============================

[root@Va1 ~]# ifconfig  |awk  '/inet /{print $2}'
192.168.0.11
192.168.1.11
192.168.2.11
127.0.0.1
192.168.122.1
[root@Va1 ~]# rpm  -q  tcpdump
tcpdump-4.9.0-5.el7.x86_64

[root@Va1 ~]# ip   route  show

default via 192.168.0.254 dev eth0 
169.254.0.0/16 dev eth0 scope link metric 1002 
169.254.0.0/16 dev eth1 scope link metric 1003 
169.254.0.0/16 dev eth2 scope link metric 1004 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.11 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.11 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.11 
192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 

[root@Va1 ~]# tcpdump
................
12:43:37.542388 IP gateway.39092 > Va1.ssh: Flags [P.], seq 2557:2593, ack 5991344, win 5253, options [nop,nop,TS val 10885411 ecr 4022623], length 36
^C
34737 packets captured
34737 packets received by filter
0 packets dropped by kernel

[root@Va1 ~]# yum  -y install  elinks |tail  -3 ;rpm  -q elinks
  js.x86_64 1:1.8.5-19.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7        

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
[root@Va1 ~]# yum  -y install  httpd  elinks |tail  -3 ;rpm  -q elinks  httpd
  httpd-tools.x86_64 0:2.4.6-67.el7        mailcap.noarch 0:2.1.41-2.el7       

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.x86_64
[root@Va1 ~]# free  -m
              total        used        free      shared  buff/cache   available
Mem:           2000         135        1500           8         364        1682
Swap:          2047           0        2047

[root@Va1 ~]# echo  " Va1  192.168.0.11 " > /var/www/html/index.html
[root@Va1 ~]# systemctl  start  httpd
[root@Va1 ~]# elinks   -dump    192.168.0.11
   Va1 192.168.0.11

[root@Va1 ~]# tcpdump  -i  eth1  -c  3  ## -i 指定监听的网络接口; -c 在收到指定的数据分组后，tcpdump停止

tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 262144 bytes
13:48:37.837293 STP 802.1d, Config, Flags [none], bridge-id 8000.52:54:00:92:c9:4d.8007, length 35
13:48:39.837012 STP 802.1d, Config, Flags [none], bridge-id 8000.52:54:00:92:c9:4d.8007, length 35
13:48:41.837089 STP 802.1d, Config, Flags [none], bridge-id 8000.52:54:00:92:c9:4d.8007, length 35
3 packets captured
3 packets received by filter
0 packets dropped by kernel

  ## ## -A数据包的内容以ASCLL显示

-w：将抓包数据输出到文件中而不是标准输出。
  可以同时配合"-G time" 选项  使得 输出文件 每time秒 就自动 切换到 另一个文件。
可通过"-r"选项载入这些文件以进行分析和打印。

[root@Va1 ~]# tcpdump  -Ai  eth1  -c  2
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 262144 bytes
13:50:29.836992 STP 802.1d, Config, Flags [none], bridge-id 8000.52:54:00:92:c9:4d.8007, length 35
.......RT...M......RT...M..........
13:50:31.836980 STP 802.1d, Config, Flags [none], bridge-id 8000.52:54:00:92:c9:4d.8007, length 35
.......RT...M......RT...M..........
2 packets captured
2 packets received by filter
0 packets dropped by kernel

[root@Va1 ~]# tcpdump  -Ai  eth0  -c2  -w  /tmp/tcpdump.cap  # -w：将抓包数据输出到文件中而不是标准输出
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
2 packets captured
2 packets received by filter
0 packets dropped by kernel

[root@Va1 ~]# cat  /tmp/tcpdump.cap  ## 乱码 看不懂【二进制文件】
...........
           ��"����|����

[root@Va1 ~]# tcpdump  -A  -r  /tmp/tcpdump.cap  ## -r：从给定的数据包文件中读取数据

reading from file /tmp/tcpdump.cap, link-type EN10MB (Ethernet)
13:58:25.531301 IP Va1.ssh > gateway.39092: Flags [P.], seq 297892766:297892890, ack 587190729, 
win 295, options [nop,nop,TS val 8510612 ecr 15373370], length 124
E...pQ@.@.G...............{."......'.......
.......:....{..iV.(.n..~.=..F.Hm...
...........S.t^...BT]-.....D..k......[..x..,........j...&.>....m6.	1.0....z.-X..rq........hD..89
13:58:25.531380 IP gateway.39092 > Va1.ssh: Flags [.], ack 124, win 5253, options [nop,nop,TS val 15373398 ecr 8510612], length 0
E..4)+@.@../............".....|............
...V....
[root@Va1 ~]# netstat  -npult  |grep  -E  'httpd|sshd'
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1080/sshd           
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      1293/sshd: root@pts 
tcp6       0      0 :::80                   :::*                    LISTEN      3527/httpd          
tcp6       0      0 :::22                   :::*                    LISTEN      1080/sshd           
tcp6       0      0 ::1:6010                :::*                    LISTEN      1293/sshd: root@pts 

[root@Va1 ~]# sed  -n   '17p;38p;65p'  /etc/ssh/sshd_config 
#Port 22
#PermitRootLogin yes
PasswordAuthentication yes

[root@Va1 ~]# sed  -i  '17s/#//;38s/#//'  /etc/ssh/sshd_config

[root@Va1 ~]# sed  -n   '17p;38p;65p'  /etc/ssh/sshd_config 
Port 22
PermitRootLogin yes
PasswordAuthentication yes

[root@Va1 ~]# systemctl  restart   sshd

[root@Va1 ~]# sed  -n   '17p;38p;65p'  /etc/ssh/sshd_config 
Port 22
PermitRootLogin yes
PasswordAuthentication yes

----- ## IP Va1.ssh > gateway.39092 注意gateway 192.168.0.254 表示 Va1 连接了真机 的 ip  192.168.0.254 ---

[root@Va1 ~]# tcpdump   -i  eth0  -A  tcp  port 22   -c1  
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes

15:23:00.105101 IP Va1.ssh > gateway.39092: Flags [P.], seq 297923398:297923586, ack 587203453,

 win 295, options [nop,nop,TS val 13585185 ecr 20447941], length 188
E...q.@.@.E................F#..}...'.<.....
..K!.8..5..P..R@.J.B Q)8.h.I..2.GG......7....=...w......A..Sx.)...*....a"lz..G..C....	d.9m........$LDn.*...W..x&..x...XKIR..O...b`6..q?.*..9..X......4.bE.,..L.n.....K.:.(j.f..)..s.O.i.\....
.:..8.
1 packet captured
2 packets received by filter
0 packets dropped by kernel
[root@Va1 ~]# 
-------------------------------------
[root@Va2 ~]# ssh  -o  StrictHostKeyChecking=no  -b 192.168.1.12   192.168.1.11  ## 测试 Va2 连接了Va1 网卡接口eth1
root@192.168.1.11's password: 
Last login: Sun Dec 16 14:43:01 2018 from 192.168.2.12
[root@Va1 ~]# 
------------------------------------------------------
[root@Va1 ~]# tcpdump   -i  eth1  -A  tcp  port 22   -c1  ##监听中
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 262144 bytes

-----------------------------------------------------------------------
[root@Va1 ~]# exit     ## Va2 的 网卡接口eth1 退出 Va1
登出
Connection to 192.168.1.11 closed.
[root@Va2 ~]# 

--------------## Va1 抓到了 Va2 的eth1 接口的信息IP 192.168.1.12.48932 > Va1.ssh:-------------

[root@Va1 ~]# tcpdump   -i  eth1  -A  tcp  port 22   -c1    
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 262144 bytes

15:27:02.731031 IP 192.168.1.12.48932 > Va1.ssh: Flags [P.], seq 4219290174:4219290210, ack 1978664305, 

win 289, options [nop,nop,TS val 12614295 ecr 13715614], length 36
E..X..@.@.2q.........$...}B>u..q...!.......
..z...H...;.."..-.V.p...L...=...Bq.Z....2..O
1 packet captured
1 packet received by filter
0 packets dropped by kernel

---------------  测试  能够抓到 Va3  的网卡接口 eth2 连接 本机  eth2网络接口 -----

[root@Va1 ~]# tcpdump   -Ai  eth2   tcp  port 22  and host  192.168.2.13  -c1 ## 注意and 的意思是并且条件限制 抓包

tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth2, link-type EN10MB (Ethernet), capture size 262144 bytes

---------------------------- Va3 开始连接并退出 -------------
[root@Va3 ~]# ssh  -o  StrictHostKeyChecking=no  -b  192.168.2.13   192.168.2.11  hostname
Warning: Permanently added '192.168.2.11' (ECDSA) to the list of known hosts.
root@192.168.2.11's password: 1
Va1
[root@Va3 ~]# hostname
Va3
----------------------  Va1 显示 结果 192.168.2.13.45698 > Va1.ssh  ----------------

[root@Va1 ~]# tcpdump   -Ai  eth2   tcp  port 22  and host  192.168.2.13  -c1

tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth2, link-type EN10MB (Ethernet), capture size 262144 bytes

15:44:43.557759 IP 192.168.2.13.45698 > Va1.ssh: Flags [S], seq 4218683850, 

win 29200, options [mss 1460,sackOK,TS val 13650416 ecr 0,nop,wscale 7], length 0
E..<H:@.@.m..............t........r............
..I.........
1 packet captured
5 packets received by filter
0 packets dropped by kernel

---------------------------------------
[root@Va1 ~]# tcpdump   -Ai  eth2   tcp  port 80  or  host  192.168.2.13  -c3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth2, link-type EN10MB (Ethernet), capture size 262144 bytes

------------------------------ Va2 开始 访问 Va1的 web 页面 -------------
[root@Va2 ~]# elinks  -dump  192.168.2.11
   Va1 192.168.0.11

----------   Va1 查到结果 192.168.2.12.51304 > Va1.http: -------------

[root@Va1 ~]# tcpdump   -Ai  eth2   tcp  port 80  or  host  192.168.2.13  -c1 ## 注意抓包限制条件 或 " or "

tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth2, link-type EN10MB (Ethernet), capture size 262144 bytes

15:57:02.283129 IP 192.168.2.12.51304 > Va1.http: Flags [S], seq 2925469549,

 win 29200, options [mss 1460,sackOK,TS val 14413847 ecr 0,nop,wscale 7], length 0
E..<.z@.@............h.P._.m......r............
............
1 packet captured
5 packets received by filter
0 packets dropped by kernel

---------------------------- portrange 连续端口 20 到 80 ------------------------------

[root@Va1 ~]# tcpdump   -Ai  eth2   tcp  portrange  20-80  or  host  192.168.2.13  -c1
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth2, link-type EN10MB (Ethernet), capture size 262144 bytes

------------------------------ Va2 开始 访问 Va1的 web 页面 -------------
[root@Va2 ~]# elinks  -dump  192.168.2.11
   Va1 192.168.0.11

----------   Va1 查到结果 192.168.2.12.51304 > Va1.http: ------------

16:05:16.701376 IP 192.168.2.12.51306 > Va1.http: Flags [S], seq 2296794955, win 29200, options [mss 1460,sackOK,TS val 14908265 ecr 0,nop,wscale 7], length 0
E..<4"@.@..2.........j.P..OK......r............
..{i........
1 packet captured
5 packets received by filter
0 packets dropped by kernel

  --------------------------- 监听  Va4 的 访问 本机 的 web  页面 【 或 20-80 端口 信息】-------------------
[root@Va1 ~]# tcpdump   -Ai  eth0   tcp  portrange  20-80  and  dst  host  192.168.0.14  -c1
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes

[root@Va4 ~]# elinks   -dump  192.168.0.11   ## 注意满足 and条件 必须 对应 Va1 网卡eth0
   Va1 192.168.0.11

-------- 【 源  Va1.http 】 > 【 192.168.0.14.52272  目标 】---------- 源IP  >  目标 IP ---------------

[root@Va1 ~]# tcpdump   -Ai  eth0   tcp  portrange  20-80  and  dst  host  192.168.0.14  -c1

tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes

16:23:48.522966 IP Va1.http > 192.168.0.14.52272: Flags [S.], seq 1542525948, ack 446594963,

 win 28960, options [mss 1460,sackOK,TS val 17233603 ecr 15935165,nop,wscale 7], length 0
E..<..@.@..R.........P.0[.........q ...........
......&.....
1 packet captured
2 packets received by filter
0 packets dropped by kernel

------------------------------------------------ ---------------------------------------------------------
[root@Va1 ~]# tcpdump   -Ai  eth0   tcp  portrange  20-80  and  dst  host  192.168.0.14  -c3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
/*******************
[root@Va4 ~]# elinks   -dump  192.168.0.11
   Va1 192.168.0.11
**********************/

16:37:28.202580 IP Va1.http > 192.168.0.14.52276: Flags [S.], seq 365327602, ack 2133694128, win 28960, options [mss 1460,sackOK,TS val 18053283 ecr 16754845,nop,wscale 7], length 0
E..<..@.@..R.........P.4..t..-....q ...........
..x.........
16:37:28.202947 IP Va1.http > 192.168.0.14.52276: Flags [.], ack 147, win 235, options [nop,nop,TS val 18053283 ecr 16754846], length 0
E..4.P@.@..
.........P.4..t..-.B...........
..x.....
16:37:28.203499 IP Va1.http > 192.168.0.14.52276: Flags [P.], seq 1:336, ack 147, win 235, options [nop,nop,TS val 18053284 ecr 16754846], length 335: HTTP: HTTP/1.1 200 OK
E....Q@.@............P.4..t..-.B...........
..x.....HTTP/1.1 200 OK
Date: Sun, 16 Dec 2018 08:37:28 GMT
Server: Apache/2.4.6 (Red Hat Enterprise Linux)
Last-Modified: Sun, 16 Dec 2018 05:12:06 GMT
ETag: "14-57d1cb49bf1f9"
Accept-Ranges: bytes
Content-Length: 20
Keep-Alive: timeout=5, max=100
Connection: Keep-Alive
Content-Type: text/html; charset=UTF-8

 Va1  192.168.0.11 

3 packets captured
3 packets received by filter
0 packets dropped by kernel
[root@Va1 ~]# 
---------------------------------------------------------------------------
==========================  TCP/IP三次握手四次断开  =================
                   ---------   源IP    >     目标 IP ---------------
=================== TCP的三次握手(建立连接）和四次挥手(关闭连接）==========

                                       Client                                   Server
                             没有任何连接状态 CLOSED |                                   | CLOSED 没有任何连接状态
                                            |                                   | LISTEN 侦听来自远方TCP端口的连接请求
发送SYN,请求建立连接(seq=100,ctl=SYN) send SYN |--------------- SYN -------------->| receive SYN
       在发送连接请求后等待匹配的连接请求 SYN_SENT |                                   | SYN_RECV 服务端收到建立连接的SYN没有收到ACK包的时候状态
                 receive SYN+ACK |<-- SYN+ACK ---| SYN+ACK send 发送SYN，ACK(seq=300,ack=101,ctl=SYN,ACK)
                                        |            | SYN-RECEIVED 在收到和发送一个连接请求后等待对连接请求的确认状态
            发送ACK(seq=101  ack=301  ctl=ACK) |-------------- ACK --------------->| receive ACK
 代表一个打开的连接，数据可以传送给用户 ESTABLISHED|                                  | ESTABLISHED 代表一个打开的连接，数据可以传送给用户
                                            | <=== TCP session established ===> |
                                                         |                                              |
      发送FIN 请求断开连接(FIN=1,ACK=1) send FIN |-------------- FIN --------------->| receive FIN
等待远程TCP的连接中断请求，或先前的连接中断请求的确认 FIN_WAIT-1 |                       | CLOSE_WAIT 等待从本地用户发来的连接中断请求
                                 receive ACK |<------------- ACK ----------------| send ACK 发送ACK(ACK=1)
               从远程TCP等待连接中断请求 FIN_WAIT-2 |                                   |
                     receive FIN |<------------- FIN ----------------| send FIN 发送FIN 请求断开连接(FIN=1,ACK=1)
等待足够的时间以确保远程TCP接收到连接中断请求的确认 TIME_WAIT |                          | LAST_ACK 等待原来发向远程TCP的连接中断请求的确认
                            发送ACK(ACK=1) send ACK |-------------- ACK --------------->| receive ACK
                                     TimeOut |                                   | CLOSED 没有任何连接状态
                               没有任何连接状态 CLOSED |                                   |

位码即tcp标志位,有6种标示:

SYN(synchronous建立联机)

ACK(acknowledgement 确认)

PSH(push传送)

FIN(finish结束)

RST(reset重置)

URG(urgent紧急)

Sequence number(顺序号码)[32位序列号 和 32 位确认号 举例,seq=100,]

Acknowledge number(确认号码)
established   已建立的; 已设立的; 已制定的; 确定的
receive 收到; 接待; 接到; 接纳;
          接收; 受理; 欢迎; 承受;
TCP(Transmission Control Protocol)　传输控制协议
                         -------   源IP    >     目标 IP -------------

16:56:19.837417 IP 192.168.0.12.40670 > Va1.http: Flags [S], seq 220172651, win 29200, options [.....]
16:56:19.837458 IP Va1.http > 192.168.0.12.40670: Flags [S.], seq 3370927378, ack 220172652, win 28960, options [...]
16:56:19.837597 IP 192.168.0.12.40670 > Va1.http: Flags [.], ack 1, win 229, options [........]


16:56:19.837646 IP 192.168.0.12.40670 > Va1.http: Flags [P.], seq 1:147, ack 1, win 229, options [.......]
Connection: Keep-Alive
16:56:19.837663 IP Va1.http > 192.168.0.12.40670: Flags [.], ack 147, win 235, options [............]
16:56:19.838398 IP Va1.http > 192.168.0.12.40670: Flags [P.], seq 1:336, ack 147, win 235, options [.....]
16:56:19.838547 IP 192.168.0.12.40670 > Va1.http: Flags [.], ack 336, win 237, options [.........]

                  Va2 192.168.0.12 Client                                   Server  Va1 192.168.0.11
                               send SYN |--------------- SYN -------------->| receive SYN
                        receive SYN+ACK |<- - - - -- SYN+ACK - - - - -- ----| SYN+ACK send 发送SYN，ACK(seq=300,ack=101,ctl=SYN,ACK)
       发送ACK(seq=101  ack=301  ctl=ACK) |-------------- ACK --------------->| receive ACK


 发送FIN 请求断开连接(FIN=1,ACK=1) send FIN |-------------- FIN --------------->| receive FIN
                            receive ACK |<------------- ACK ----------------| send ACK 发送ACK(ACK=1)
                            receive FIN |<------------- FIN ----------------| send FIN 发送FIN 请求断开连接(FIN=1,ACK=1)
                     发送ACK(ACK=1) send ACK |-------------- ACK --------------->| receive ACK


[root@Va1 ~]# tcpdump   -Ai  eth0   tcp  portrange  20-80  and    host  192.168.0.12  -c7
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes

[root@Va2 ~]# elinks  -dump  192.168.0.11
   Va1 192.168.0.11

             -------   源IP    >     目标 IP -------------

[root@Va1 ~]# tcpdump   -Ai  eth0   tcp  portrange  20-80  and    host  192.168.0.12  -c7
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
16:56:19.837417 IP 192.168.0.12.40670 > Va1.http: Flags [S], seq 220172651, win 29200, options [mss 1460,sackOK,TS val 17971401 ecr 0,nop,wscale 7], length 0
E..<..@.@..............P...k......r............
..8.........
16:56:19.837458 IP Va1.http > 192.168.0.12.40670: Flags [S.], seq 3370927378, ack 220172652, win 28960, options [mss 1460,sackOK,TS val 19184918 ecr 17971401,nop,wscale 7], length 0
E..<..@.@..T.........P....E....l..q ...........
.$....8.....
16:56:19.837597 IP 192.168.0.12.40670 > Va1.http: Flags [.], ack 1, win 229, options [nop,nop,TS val 17971401 ecr 19184918], length 0
E..4..@.@..............P...l..E............
..8..$..
16:56:19.837646 IP 192.168.0.12.40670 > Va1.http: Flags [P.], seq 1:147, ack 1, win 229, options [nop,nop,TS val 17971401 ecr 19184918], length 146: HTTP: GET / HTTP/1.1
E.....@.@..&...........P...l..E...... .....
..8..$..GET / HTTP/1.1
Host: 192.168.0.11
User-Agent: ELinks/0.12pre6 (textmode; Linux; -)
Accept: */*
Accept-Language: en
Connection: Keep-Alive


16:56:19.837663 IP Va1.http > 192.168.0.12.40670: Flags [.], ack 147, win 235, options [nop,nop,TS val 19184918 ecr 17971401], length 0
E..4..@.@..V.........P....E................
.$....8.
16:56:19.838398 IP Va1.http > 192.168.0.12.40670: Flags [P.], seq 1:336, ack 147, win 235, options [nop,nop,TS val 19184919 ecr 17971401], length 335: HTTP: HTTP/1.1 200 OK
E.....@.@............P....E................
.$....8.HTTP/1.1 200 OK
Date: Sun, 16 Dec 2018 08:56:19 GMT
Server: Apache/2.4.6 (Red Hat Enterprise Linux)
Last-Modified: Sun, 16 Dec 2018 05:12:06 GMT
ETag: "14-57d1cb49bf1f9"
Accept-Ranges: bytes
Content-Length: 20
Keep-Alive: timeout=5, max=100
Connection: Keep-Alive
Content-Type: text/html; charset=UTF-8

 Va1  192.168.0.11 

16:56:19.838547 IP 192.168.0.12.40670 > Va1.http: Flags [.], ack 336, win 237, options [nop,nop,TS val 17971402 ecr 19184919], length 0
E..4..@.@..............P......Fb...........
..8..$..
7 packets captured
7 packets received by filter
0 packets dropped by kernel

[root@Va1 ~]# 




==========================  Va 2   ==============================

[root@Va2 ~]# ls  /etc/yum.repos.d/
local.repo  redhat.repo
[root@Va2 ~]# cat  /etc/yum.repos.d/local.repo 
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.0.254/rhel7
enabled=1
gpgcheck=0
[root@Va2 ~]# yum  -y install  httpd  elinks |tail  -3 ;rpm  -q  elinks  httpd
  mailcap.noarch 0:2.1.41-2.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.x86_64

[root@Va2 ~]# echo  " Va2  192.168.0.12 " > /var/www/html/index.html
[root@Va2 ~]# systemctl  start  httpd
[root@Va2 ~]# elinks   -dump    192.168.0.12
   Va2 192.168.0.12
  
   ## 指定端口 -p 22  ； ## 指定登陆用户 -l root ; 
 ## 绑定源地址 -b  192.168.1.12 适用于 客户端Va2 --- 192.168.1.12 有两个以上的 IP 地址

[root@Va2 ~]# ssh  -o  StrictHostKeyChecking=no  -b 192.168.0.12  -l root  -p22  192.168.0.13 ## 服务端主机0.13
Warning: Permanently added '192.168.0.13' (ECDSA) to the list of known hosts.
root@192.168.0.13's password: 
Last login: Sun Dec 16 11:52:57 2018 from 192.168.0.254
[root@Va3 ~]# hostname
Va3
[root@Va3 ~]# exit
登出
Connection to 192.168.0.13 closed.

   ## 绑定源地址 -b  192.168.1.12 适用于 客户端Va2 --- 192.168.1.12 有两个以上的 IP 地址
   
[root@Va2 ~]# ssh  -o  StrictHostKeyChecking=no  -b 192.168.1.12  -l root  -p22  192.168.1.11  ## 服务端主机1.11
Warning: Permanently added '192.168.1.11' (ECDSA) to the list of known hosts.
root@192.168.1.11's password: 
Last login: Sun Dec 16 14:37:37 2018 from 192.168.0.12
[root@Va1 ~]# hostname
Va1
[root@Va1 ~]# exit
登出
Connection to 192.168.1.11 closed.

     ## 绑定源地址 -b  192.168.2.12 适用于 客户端 192.168.1.12 有两个以上的 IP 地址

[root@Va2 ~]# ssh  -o  StrictHostKeyChecking=no  -b 192.168.2.12  -l root  -p22  192.168.2.11  
Warning: Permanently added '192.168.2.11' (ECDSA) to the list of known hosts.
root@192.168.2.11's password: 
Last login: Sun Dec 16 14:39:55 2018 from 192.168.1.12
[root@Va1 ~]# hostname
Va1
[root@Va1 ~]# exit
登出
Connection to 192.168.2.11 closed.
[root@Va2 ~]# 

/************
基本能完成常用的对于远程节点的管理，几个注意的点：
双引号，必须有。
如果不加双引号，第二个 ifconfig 命令在本地执行
分号，两个命令之间用分号隔开
多行命令可以输入双引号后回车，结尾使用双引号包裹

[root@Va2 ~]# ssh  -o  StrictHostKeyChecking=no  -b 192.168.0.12  \
> 192.168.0.14  "hostname;ifconfig eth0 |awk  '/inet /{print $2}'"
root@192.168.0.14's password: 1
Va4
        inet 192.168.0.14  netmask 255.255.255.0  broadcast 192.168.0.255

[root@Va2 ~]# ssh  -o  StrictHostKeyChecking=no  -b 192.168.0.12   192.168.0.14  "hostname;ifconfig eth0 |grep  'inet '"
root@192.168.0.14's password: 1
Va4
        inet 192.168.0.14  netmask 255.255.255.0  broadcast 192.168.0.255

[root@Va2 ~]# ifconfig eth0 |awk  '/inet /{print $2}'
192.168.0.12



==========================  Va3  ==============================

[root@Va3 ~]# yum  -y install  httpd  elinks |tail  -3 ;rpm  -q  elinks  httpd
  mailcap.noarch 0:2.1.41-2.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.x86_64

[root@Va3 ~]# echo  " Va3  192.168.0.13 " > /var/www/html/index.html
[root@Va3 ~]# systemctl  start  httpd
[root@Va3 ~]# elinks   -dump    192.168.0.13
   Va3 192.168.0.13



==========================  Va4   ==============================

[root@Va4 ~]# yum  -y install  httpd  elinks |tail  -3 ;rpm  -q  elinks  httpd
  mailcap.noarch 0:2.1.41-2.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.x86_64

[root@Va4 ~]# echo  " Va4  192.168.0.14 " > /var/www/html/index.html
[root@Va4 ~]# systemctl  start  httpd
[root@Va4 ~]# elinks   -dump    192.168.0.14
   Va4 192.168.0.14



==========================  Va5   ==============================

[root@Va5 ~]# yum  -y install  httpd  elinks |tail  -3 ;rpm  -q  elinks  httpd
  mailcap.noarch 0:2.1.41-2.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.x86_64

[root@Va5 ~]# echo  " Va5  192.168.1.15 " > /var/www/html/index.html
[root@Va5 ~]# systemctl  start  httpd
[root@Va5 ~]# elinks   -dump    192.168.1.15
   Va5 192.168.1.15



==========================  Va6  ==============================

[root@Va6 ~]# yum  -y install  httpd  elinks |tail  -3 ;rpm  -q  elinks  httpd
  mailcap.noarch 0:2.1.41-2.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.x86_64

[root@Va6 ~]# echo  " Va6  192.168.2.16 " > /var/www/html/index.html
[root@Va6 ~]# systemctl  start  httpd
[root@Va6 ~]# elinks   -dump    192.168.2.16
   Va6 192.168.2.16















====================  tcpdump  =======================================================
===================================================================

Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1 
Va4  192.168.2.14 --- 外网 2  

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|


[root@Va1 ~]# ip  -o  address
1: lo    inet 127.0.0.1/8 scope host lo\       valid_lft forever preferred_lft forever
1: lo    inet6 ::1/128 scope host \       valid_lft forever preferred_lft forever
2: eth0    inet 192.168.0.11/24 brd 192.168.0.255 scope global eth0\       valid_lft forever preferred_lft forever
3: eth1    inet 192.168.1.11/24 brd 192.168.1.255 scope global eth1\       valid_lft forever preferred_lft forever
4: eth2    inet 192.168.2.11/24 brd 192.168.2.255 scope global eth2\       valid_lft forever preferred_lft forever
........................
[root@Va1 ~]# ip  route  show
default via 192.168.0.254 dev eth0 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.11 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.11 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.11 

[root@Va1 ~]# rpm  -q  tree
tree-1.6.0-10.el7.x86_64

[root@Va1 ~]# lsblk
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    253:0    0  16G  0 disk 
└─vda1 253:1    0  16G  0 part /
vdb    253:16   0   8G  0 disk 

[root@Va1 ~]# ifconfig  eth1  down  ## 临时性关闭指定的网卡 eth1
[root@Va1 ~]# ifconfig  eth2  down  ## 临时性关闭指定的网卡 eth2

[root@Va1 ~]# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
[root@Va1 ~]# route  add  default  gw  192.168.0.14   ## 临时性添加新网关{添加多个网关也是此命令}

[root@Va1 ~]# ip  route  show
default via 192.168.0.14 dev eth0 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.11 

[root@Va1 ~]# ifconfig |awk '/inet /{print $2}';route  -n
192.168.0.11
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.14    0.0.0.0         UG    0      0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.0.14   ## ping 通成功
PING 192.168.0.14 (192.168.0.14) 56(84) bytes of data.
64 bytes from 192.168.0.14: icmp_seq=1 ttl=255 time=0.555 ms
64 bytes from 192.168.0.14: icmp_seq=2 ttl=255 time=0.480 ms
...................................

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.1.14  ## ping 通成功
PING 192.168.1.14 (192.168.1.14) 56(84) bytes of data.
64 bytes from 192.168.1.14: icmp_seq=1 ttl=255 time=0.272 ms
64 bytes from 192.168.1.14: icmp_seq=2 ttl=255 time=0.533 ms
..................................

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.2.14   ## ping 通成功
PING 192.168.2.14 (192.168.2.14) 56(84) bytes of data.
64 bytes from 192.168.2.14: icmp_seq=1 ttl=255 time=0.254 ms
64 bytes from 192.168.2.14: icmp_seq=2 ttl=255 time=0.558 ms
.............................

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.1.15  ## ping 不通

PING 192.168.1.15 (192.168.1.15) 56(84) bytes of data.

--- 192.168.1.15 ping statistics ---
5 packets transmitted, 0 received, 100% packet loss, time 830ms

[root@Va1 ~]# ping -c2 -i0.2  -w1  192.168.2.16  ## ping 不通

PING 192.168.2.16 (192.168.2.16) 56(84) bytes of data.

--- 192.168.2.16 ping statistics ---
5 packets transmitted, 0 received, 100% packet loss, time 830ms

[root@Va1 ~]# yum  -y install  elinks |tail  -3 ;rpm  -q elinks
Loading mirror speeds from cached hostfile
软件包 elinks-0.12-0.36.pre6.el7.x86_64 已安装并且是最新版本
无须任何处理
elinks-0.12-0.36.pre6.el7.x86_64
 








Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

[root@Va2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    0      0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 eth2

# ifconfig  eth1  down  ## 临时性关闭指定的网卡 eth1
# ifconfig  eth2  down  ## 临时性关闭指定的网卡 eth2
# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
# route  add  default  gw  192.168.0.14   ## 临时性添加新网关{添加多个网关也是此命令}

[root@Va2 ~]# ifconfig   eth1  down
[root@Va2 ~]# ifconfig   eth2  down

[root@Va2 ~]# route  del  default  gw  192.168.0.254
[root@Va2 ~]# route  add  default  gw  192.168.0.14

[root@Va2 ~]# ip  route  show
default via 192.168.0.14 dev eth0 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.12 

[root@Va2 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.0.12
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.14    0.0.0.0         UG    0      0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@Va2 ~]# yum  -y install  elinks |tail  -3 ;rpm  -q elinks
  js.x86_64 1:1.8.5-19.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7        

完毕！
elinks-0.12-0.36.pre6.el7.x86_64














Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

# ifconfig  eth1  down  ## 临时性关闭指定的网卡 eth1
# ifconfig  eth2  down  ## 临时性关闭指定的网卡 eth2
# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
# route  add  default  gw  192.168.0.14   ## 临时性添加新网关{添加多个网关也是此命令}

[root@Va3 ~]# ifconfig  eth1  down
[root@Va3 ~]# ifconfig   eth2  down
[root@Va3 ~]# route  del default  gw  192.168.0.254
[root@Va3 ~]# route  add  default  gw  192.168.0.14
[root@Va3 ~]# ip  route  show
default via 192.168.0.14 dev eth0 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.13 

[root@Va3 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.0.13
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.14    0.0.0.0         UG    0      0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@Va3 ~]# yum  -y install  elinks |tail  -3 ;rpm  -q elinks
  js.x86_64 1:1.8.5-19.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7        

完毕！
elinks-0.12-0.36.pre6.el7.x86_64















Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|
[root@Va4 ~]# ifconfig  |awk  '/inet /{print  $2}'
192.168.0.14
192.168.1.14
192.168.2.14
127.0.0.1
[root@Va4 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    0      0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 eth2

[root@Va4 ~]# which  sysctl
/usr/sbin/sysctl
[root@Va4 ~]# rpm  -qf  /usr/sbin/sysctl 
procps-ng-3.3.10-16.el7.x86_64
[root@Va4 ~]# ll  /usr/sbin/sysctl
-rwxr-xr-x. 1 root root 24128 8月   4 2017 /usr/sbin/sysctl

[root@Va4 ~]# /usr/sbin/sysctl  -p

[root@Va4 ~]# sysctl   -p

  ## sysctl命令用于运行时配置内核参数
 命令格式：
    sysctl [-n] [-e] -w variable=value
    sysctl [-n] [-e] -p <filename> (default /etc/sysctl.conf)
    sysctl [-n] [-e] -a
    常用参数的意义：
    -w   临时改变某个指定参数的值，如
        sysctl -w net.ipv4.ip_forward=1
    -a   显示所有的系统参数
    -p   从指定的文件加载系统参数，如不指定即从/etc/sysctl.conf中加载
   ## 编辑/etc/sysctl.conf文件，即可手工或自动执行由sysctl控制的功能

[root@Va4 ~]# cat  /etc/sysctl.conf    ## 永久性 开启 IP 转发 配置文件
# sysctl settings are defined through files in
# /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.
#
# Vendors settings live in /usr/lib/sysctl.d/.
# To override a whole file, create a new file with the same in
# /etc/sysctl.d/ and put new settings there. To override
# only specific settings, add a file with a lexically later
# name in /etc/sysctl.d/ and put new settings there.
#
# For more information, see sysctl.conf(5) and sysctl.d(5).

[root@Va4 ~]# sysctl   -a  |grep  netfilter  |tail -3
sysctl: reading key "net.ipv6.conf.all.stable_secret"
.................................
net.netfilter.nf_log.7 = NONE
net.netfilter.nf_log.8 = NONE
net.netfilter.nf_log.9 = NONE

[root@Va4 ~]# ll  /proc/sys/net/ipv4/ip_forward
-rw-r--r-- 1 root root 0 12月 14 09:14 /proc/sys/net/ipv4/ip_forward

[root@Va4 ~]# cat  /proc/sys/net/ipv4/ip_forward   ## 临时性 开启 IP 转发
1

[root@Va4 ~]# vim   /etc/sysctl.conf     ## 永久性 开启 IP 转发 路由功能 
[root@Va4 ~]# tail  -2  /etc/sysctl.conf
# For more information, see sysctl.conf(5) and sysctl.d(5).
net.ipv4.ip_forward=1
[root@Va4 ~]# sysctl   -p  # 从指定的文件加载系统参数，如不指定即从/etc/sysctl.conf中加载
net.ipv4.ip_forward = 1

[root@Va4 ~]# cat  /proc/sys/net/ipv4/ip_forward
1
[root@Va4 ~]# sysctl  -w  net.ipv4.ip_forward=0   ## 临时性 开启 IP 转发
net.ipv4.ip_forward = 0
[root@Va4 ~]# cat  /proc/sys/net/ipv4/ip_forward
0
[root@Va4 ~]# sysctl   -p  ## 重新加载 开启 IP 转发 路由功能  默认配置文件/etc/sysctl.conf
net.ipv4.ip_forward = 1
[root@Va4 ~]# cat  /proc/sys/net/ipv4/ip_forward
1
[root@Va4 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.0.14
192.168.1.14
192.168.2.14
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    0      0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 eth2

[root@Va4 ~]# yum clean  all > /dev/null &&  yum repolist |tail  -4
源标识                      源名称                                         状态
CentOS7-1708                CentOS7-1708                                   9,591
rhel7                       rhel-server-7.4-x86_64-dvd.iso                 4,986
repolist: 14,577
[root@Va4 ~]# cat  /etc/yum.repos.d/local.repo
[CentOS7-1708]
name=CentOS7-1708
gpgcheck=0
baseurl=ftp://192.168.0.254/CentOS7-1708/
enabled=1
[rhel7]
name=rhel-server-7.4-x86_64-dvd.iso
baseurl=ftp://192.168.0.254/rhel7
enabled=1
gpgcheck=0

[root@Va4 ~]# yum  -y install  elinks |tail  -3 ;rpm  -q elinks
  js.x86_64 1:1.8.5-19.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7        

完毕！
elinks-0.12-0.36.pre6.el7.x86_64

[root@Va4 ~]# elinks  -dump  192.168.1.15
                                  NAT-PAT-Va5
[root@Va4 ~]# elinks  -dump  192.168.2.16
                                NAT-PAT-Va6-2.16

[root@Va4 ~]# systemctl is-active  firewalld
unknown

[root@Va4 ~]# rpm  -qa |grep  iptables
iptables-1.4.21-18.0.1.el7.centos.x86_64
[root@Va4 ~]# yum  -y install  iptables-services
已安装:
  iptables-services.x86_64 0:1.4.21-18.0.1.el7.centos                                

完毕！

[root@Va4 ~]# rpm  -qa |grep  iptables
iptables-services-1.4.21-18.0.1.el7.centos.x86_64
iptables-1.4.21-18.0.1.el7.centos.x86_64

[root@Va4 ~]# service  start  iptables   ## 命令 格式 顺序不对 报错提示
The service command supports only basic LSB actions (start, stop, restart, try-restart, reload, force-reload, status). For other actions, please try to use systemctl.

[root@Va4 ~]# service    iptables  start
Redirecting to /bin/systemctl start iptables.service

[root@Va4 ~]# service    iptables  status  |grep  -io  Active
Redirecting to /bin/systemctl status iptables.service
Active
active



















Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

# ifconfig  eth0  down  ## 临时性关闭指定的网卡 eth0
# ifconfig  eth2  down  ## 临时性关闭指定的网卡 eth2
# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
# route  add  default  gw  192.168.1.254   ## 临时性添加新网关{添加多个网关也是此命令}

[root@hiys ~]# ssh  -X  192.168.1.15
Warning: Permanently added '192.168.1.15' (ECDSA) to the list of known hosts.
root@192.168.1.15's password: 1
.......................
[root@Va5 ~]# ifconfig  |awk '/inet /{print  $2}'
192.168.0.15
192.168.1.15
192.168.2.15
127.0.0.1
[root@Va5 ~]# ip  route  show
default via 192.168.0.254 dev eth0 
192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.15 
192.168.1.0/24 dev eth1 proto kernel scope link src 192.168.1.15 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.15 

[root@Va5 ~]# ifconfig  eth0  down
[root@Va5 ~]# ifconfig  eth2  down
[root@Va5 ~]# route  del  default  gw   192.168.0.254
SIOCDELRT: 没有那个进程
[root@Va5 ~]# echo  $?
7
[root@Va5 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1

[root@Va5 ~]# route  add   default  gw   192.168.1.254

[root@Va5 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.1.15
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.1.254   0.0.0.0         UG    0      0        0 eth1
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1

[root@Va5 ~]# yum  -y install  elinks  httpd |tail -3;rpm  -q  elinks  httpd
  httpd-tools.x86_64 0:2.4.6-67.el7.centos     mailcap.noarch 0:2.1.41-2.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.centos.x86_64

[root@Va5 ~]# echo "<h1> NAT-PAT-Va5 </h1>" > /var/www/html/index.html

[root@Va5 ~]# systemctl  start httpd && systemctl  enable  httpd
Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.
[root@Va5 ~]# elinks  -dump  192.168.1.15
                                  NAT-PAT-Va5










Va1  192.168.0.11 --- 内网   --- 网关 Va4 192.168.0.14
Va2  192.168.0.12 --- 内网   --- 网关 Va4 192.168.0.14
Va3  192.168.0.13 --- 内网   --- 网关 Va4 192.168.0.14

Va4  192.168.0.14 --- 内网    --- 网关 192.168.0.254
Va4  192.168.1.14 --- 外网 1
Va4  192.168.2.14 --- 外网 2

Va5  192.168.1.15 --- 外网 1   --- 网关 192.168.1.254  HTTP 服务 80 端口
Va6  192.168.2.16 --- 外网 2   --- 网关 192.168.2.254  HTTP 服务 80 端口

Va1  ----|
         |-----Va4  ----- Va5
Va2  ----|      
                     
Va2  ----|
         |-----Va4  ----- Va6
Va3  ----|

# ifconfig  eth0  down  ## 临时性关闭指定的网卡 eth0
# ifconfig  eth1  down  ## 临时性关闭指定的网卡 eth1
# route  del  default  gw  192.168.0.254  ## 临时性先删除旧的网关
# route  add  default  gw  192.168.2.254   ## 临时性添加新网关{添加多个网关也是此命令}

[root@hiys ~]# ssh  -X  192.168.2.16
Warning: Permanently added '192.168.2.16' (ECDSA) to the list of known hosts.
root@192.168.2.16's password: 
X11 forwarding request failed on channel 0
Last login: Fri Dec 14 09:17:57 2018 from 192.168.0.254
[root@Va6 ~]# ifconfig  |awk '/inet /{print  $2}'
192.168.0.16
192.168.1.16
192.168.2.16
127.0.0.1
[root@Va6 ~]# ifconfig  eth0   down
[root@Va6 ~]# ifconfig   eth1   down

[root@Va6 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 eth2

[root@Va6 ~]# ip  route  show
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.16 

[root@Va6 ~]# route  add  default  gw   192.168.2.254

[root@Va6 ~]# ip  route  show
default via 192.168.2.254 dev eth2 
192.168.2.0/24 dev eth2 proto kernel scope link src 192.168.2.16 

[root@Va6 ~]#  ifconfig |awk '/inet /{print $2}';route  -n
192.168.2.16
127.0.0.1
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.2.254   0.0.0.0         UG    0      0        0 eth2
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 eth2

[root@Va6 ~]# yum  -y install  elinks  httpd |tail -3;rpm  -q  elinks  httpd
  httpd-tools.x86_64 0:2.4.6-67.el7.centos     mailcap.noarch 0:2.1.41-2.el7    

完毕！
elinks-0.12-0.36.pre6.el7.x86_64
httpd-2.4.6-67.el7.centos.x86_64

[root@Va6 ~]# echo "<h1> NAT-PAT-Va6-2.16 </h1>" > /var/www/html/index.html
[root@Va6 ~]# systemctl start  httpd  &&  systemctl  enable  httpd
Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.
[root@Va6 ~]# elinks  -dump  192.168.2.16
                                NAT-PAT-Va6-2.16










=============================
[root@proxy source1]# systemctl is-active firewalld.service 
unknown
[root@proxy source1]# yum -y install iptables-services |tail -3 ;
  iptables-services.x86_64 0:1.4.21-18.el7                                      

完毕！
[root@proxy source1]# systemctl start iptables && systemctl enable  iptables.service  ;
#1）iptables的4个表（区分大小写）：
iptables默认有4个表，nat表（地址转换表）、filter表（数据过滤表）、
 【raw表（状态跟踪表） 一般禁用，耗CPU资源】、mangle表（包标记表）。
2）iptables的5个链（区分大小写）：
INPUT链（入站规则）
OUTPUT链（出站规则）
FORWARD链（转发规则）
PREROUTING链（路由前规则）
POSTROUTING链（路由后规则）
所有链的初始默认规则是ACCEPT
                   #  iptables [-t 表名]  选项  [链名]   [条件]     [-j 目标操作]
[root@proxy source1]# iptables -t filter  -I  INPUT -p icmp  -j REJECT;
[root@proxy source1]# ping -c2 -i0.2 -w1 192.168.4.5
PING 192.168.4.5 (192.168.4.5) 56(84) bytes of data.

--- 192.168.4.5 ping statistics ---
5 packets transmitted, 0 received, 100% packet loss, time 829ms

[root@proxy source1]# cd ;ifconfig eth0 |grep 'inet ';
   inet 192.168.4.5  netmask 255.255.255.0  broadcast 192.168.4.255

             #  iptables [-t 表名]   选项  [链名]   [条件]    [-j 目标操作]
[root@proxy ~]# iptables -t filter  -I INPUT  -p icmp  -j ACCEPT ;
-p为指定的链 设置默认规则
//注意事项与规律：
//可以不指定表，默认为filter表
//可以不指定链，默认为对应表的所有链
//如果没有找到匹配条件，则执行防火墙默认规则
//选项/链名/目标操作用大写字母，其余都小写
########################################################################
//目标操作：
// ACCEPT：允许通过/放行
// DROP：直接丢弃，不给出任何回应
// REJECT：拒绝通过，必要时会给出提示
// LOG：记录日志，然后传给下一条规则
[root@proxy ~]# ping -c2 -i0.2 -w1 192.168.4.5

64 bytes from 192.168.4.5: icmp_seq=2 ttl=64 time=0.050 ms
--- 192.168.4.5 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 200ms
                         #LOG匹配即停止的唯一例外，记录日志，然后传给下一条规则
[root@proxy ~]# iptables -t filter -I INPUT -p icmp -j LOG ;
[root@proxy ~]# > /var/log/messages
[root@proxy ~]# ping -c2 -i0.2 -w1 192.168.4.5
[root@proxy ~]# ping -c2 -i0.2 -w1 192.168.2.5
[root@proxy ~]# cat /var/log/messages
  1 Sep  3 10:54:19 proxy kernel: IN=lo OUT= MAC=00:00:00:00:00:00:00:    00:00:00:00:00:08:00 SRC=192.168.4.5 DST=192.168.4.5 LEN=84 TOS=0x    00 PREC=0x00 TTL=64 ID=25977 DF PROTO=ICMP TYPE=8 CODE=0 ID=3767 S    EQ=1

  8 Sep  3 10:54:28 proxy kernel: IN=lo OUT= MAC=00:00:00:00:00:00:00:    00:00:00:00:00:08:00 SRC=192.168.2.5 DST=192.168.2.5 LEN=84 TOS=0x    00 PREC=0x00 TTL=64 ID=56769 PROTO=ICMP TYPE=0 CODE=0 ID=3776 SEQ=    2
 
[root@proxy ~]# iptables -F  #清空所有规则-F
## -p 为指定的链 设置默认规则 tcp ,udp ,icmp
## -A 追加规则至filter表中的INPUT链的末尾
## -I 插入规则至filter表中的INPUT链的开头
[root@proxy ~]# iptables -t filter -A INPUT -p tcp -j ACCEPT ;

# 插入规则至filter表中的INPUT链的开头，允许任何人使用UDP协议访问本机
[root@proxy ~]# iptables -t filter -I INPUT -p udp -j ACCEPT ;

[root@proxy ~]# iptables -t filter -I INPUT 2  -p icmp  -j ACCEPT ;
##-I INPUT 2 插入规则至filter表中的INPUT链的第2行
[root@proxy ~]# iptables -L  #查看所有规则-L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     udp  --  anywhere             anywhere            
ACCEPT     icmp --  anywhere             anywhere            
ACCEPT     tcp  --  anywhere             anywhere            

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
[root@proxy ~]# 
[root@proxy ~]# iptables -nL --line-numbers   #-n 以数字形式显示地址，端口信息
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0           
2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           
3    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0 
[root@proxy ~]# iptables -L  --line-numbers  //查看规则，显示行号--line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     udp  --  anywhere             anywhere            
2    ACCEPT     icmp --  anywhere             anywhere            
3    ACCEPT     tcp  --  anywhere             anywhere 
[root@proxy ~]# iptables -nL INPUT     //仅查看INPUT链的规则
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0           
ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           
[root@proxy ~]# iptables -nL INPUT --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0           
2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           
3    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           
[root@proxy ~]# iptables -L INPUT --line-numbers     //查看规则，显示行号
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     udp  --  anywhere             anywhere            
2    ACCEPT     icmp --  anywhere             anywhere            
3    ACCEPT     tcp  --  anywhere             anywhere            
[root@proxy ~]# 
[root@proxy ~]# iptables -D INPUT 3    #//删除filter表中INPUT链的第3条规则
[root@proxy ~]# iptables -nL INPUT  #-n 以数字形式显示地址，端口信息
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0           
ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           
[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -nL 
Chain INPUT (policy ACCEPT)
target     prot opt source               destination   

#1）iptables的4个表（区分大小写）：
iptables默认有4个表，nat表（地址转换表）、filter表（数据过滤表）、
 【raw表（状态跟踪表） 一般禁用，耗CPU资源】、mangle表（包标记表）。
2）iptables的5个链（区分大小写）：
INPUT链（入站规则）
OUTPUT链（出站规则）
FORWARD链（转发规则）
PREROUTING链（路由前规则）
POSTROUTING链（路由后规则）
所有链的初始默认规则是ACCEPT
             #  iptables [-t 表名]   选项  [链名]   [条件]    [-j 目标操作]
	      ]# iptables -t filter  -I INPUT  -p icmp  -j ACCEPT ;
-p为指定的链 设置默认规则
//注意事项与规律：
//可以不指定表，默认为filter表
//可以不指定链，默认为对应表的所有链
//如果没有找到匹配条件，则执行防火墙默认规则
//选项/链名/目标操作用大写字母，其余都小写
########################################################################
//目标操作：
// ACCEPT：允许通过/放行
// DROP：直接丢弃，不给出任何回应
// REJECT：拒绝通过，必要时会给出提示
// LOG：记录日志，然后传给下一条规则
[root@proxy ~]# iptables -I INPUT -p tcp -j ACCEPT # -p为指定的链 设置默认规则tcp 
[root@proxy ~]# iptables -nL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
[root@proxy ~]# iptables -P INPUT  REJECT
iptables: Bad policy name. Run `dmesg' for more information.
[root@proxy ~]# iptables -P INPUT  DROP   #-P INPUT重置入站默认规则drop
[root@proxy ~]# iptables -nL
Chain INPUT (policy DROP)
target     prot opt source               destination         
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
[root@proxy ~]# iptables -P INPUT ACCEPT
[root@proxy ~]# iptables -nL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
[root@proxy ~]# 

client  ------> server    --dport 22
client <------  server   --sport 22 

[root@proxy ~]# iptables -F    #清空规则-F
[root@proxy ~]# elinks -dump http://192.168.4.5
ELinks: 拒绝连接
[root@proxy ~]# nginx
[root@proxy ~]# elinks -dump http://192.168.4.5
                               Welcome to nginx!
   2. http://nginx.com/
[root@proxy ~]# iptables -I INPUT -p tcp --dport 80 -j REJECT 
[root@proxy ~]# elinks -dump http://192.168.4.5
ELinks: 拒绝连接
[root@proxy ~]# iptables -I INPUT -p tcp --dport 80 -j ACCEPT 
[root@proxy ~]# elinks -dump http://192.168.4.5
                               Welcome to nginx!
-------------------------------------------------------------------------------
client  ---INPUT---> server    --dport 22 
client <---OUTPUT---  server   --sport 22 
-----------------------------------------------------------------------
[root@proxy ~]# iptables -F    #清空规则-F
[root@proxy ~]# iptables -I INPUT -s 192.168.2.100 -j REJECT

[root@web1 ~]# ssh -X 192.168.2.5
ssh: connect to host 192.168.2.5 port 22: Connection refused
[root@web1 ~]# ifconfig eth1 |grep 'inet '
        inet 192.168.2.100  netmask 255.255.255.0  broadcast 192.168.2.255

[root@web2 ~]# ssh -X 192.168.2.5
root@192.168.2.5's password: 
Last login: Mon Sep  3 14:20:15 2018 from 192.168.2.200
[root@proxy ~]# exit
登出
Connection to 192.168.2.5 closed.

[root@proxy ~]# iptables -I INPUT -d 192.168.2.5 -p tcp --dport 80 -j REJECT 
[root@web2 ~]# elinks -dump http://192.168.2.5
ELinks: 拒绝连接
[root@web2 ~]# ssh -X 192.168.2.5
root@192.168.2.5's password: 
Last login: Mon Sep  3 14:20:26 2018 from 192.168.2.200
[root@proxy ~]# exit
登出
Connection to 192.168.2.5 closed.

[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -I INPUT -i eth0 -p tcp --dport 80 -j REJECT
[root@web2 ~]# elinks -dump http://192.168.4.5
ELinks: 拒绝连接
[root@web2 ~]# elinks -dump http://192.168.2.5
                               Welcome to nginx!
       #nat表（地址转换表）、filter表（数据过滤表）
         //可以不指定表，默认为filter表
[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -I INPUT -s 192.168.2.0/24 -j DROP

[root@web1 ~]# ssh -X 192.168.2.5
^C
[root@web1 ~]# ssh -X 192.168.4.5
root@192.168.4.5's password: 
[root@proxy ~]# exit
登出
[root@web1 ~]# curl 192.168.4.5
<!DOCTYPE html>
[root@web1 ~]# curl 192.168.2.5
^C

[root@proxy ~]# vim /etc/sysctl.conf 
[root@proxy ~]# tail -1 /etc/sysctl.conf
net.ipv4.ip_forward=1       //永久开启路由转发
[root@proxy ~]# vim /proc/sys/net/ipv4/ip_forward
[root@proxy ~]# cat /proc/sys/net/ipv4/ip_forward
1                         //临时开启路由转发
[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -I INPUT  -p icmp --icmp-type echo-request  -j REJECT
[root@proxy ~]# ping 192.168.4.100
PING 192.168.4.100 (192.168.4.100) 56(84) bytes of data.
64 bytes from 192.168.4.100: icmp_seq=1 ttl=64 time=0.528 ms
64 bytes from 192.168.4.100: icmp_seq=2 ttl=64 time=0.616 ms
^C
[root@proxy ~]# iptables -I INPUT -p icmp --icmp-type echo-request -j REJECT 

[root@proxy ~]# iptables -I INPUT -p icmp --icmp-type echo-reply -j ACCEPT 

[root@proxy ~]# iptables -I OUTPUT -p icmp --icmp-type echo-request -j ACCEPT 
[root@proxy ~]# iptables -I OUTPUT -p icmp --icmp-type echo-reply -j DROP
[root@proxy ~]# iptables -F

[root@proxy ~]# iptables -I INPUT -s 192.168.4.100 -p tcp --dport 22 -j REJECT 
[root@client ~]# ssh -X 192.168.4.5
ssh: connect to host 192.168.4.5 port 22: Connection refused
|||=================================
[root@proxy ~]# nmap -sP 192.168.4.100 |grep MAC
mass_dns: warning: Unable to determine any DNS servers. Reverse DNS is disabled. Try using --system-dns or specify valid servers with --dns-servers
MAC Address: 52:54:00:31:EA:4A (QEMU Virtual NIC)
=========================================|||
[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -I INPUT -s 192.168.4.100 -p tcp --dport 22 -m mac --mac 52:54:00:31:EA:4A  -j REJECT 
====================================|||
[root@client ~]# ssh -X 192.168.4.5
ssh: connect to host 192.168.4.5 port 22: Connection refused

[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -I INPUT -p tcp --dport 22 -m multiport --dports 1:100,110,8080,500:600  -j ACCEPT 

[root@proxy ~]# iptables -nL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22 multiport dports 1:100,110,8080,500:600

[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -I INPUT -m iprange  --src-range 192.168.2.99-192.168.2.201 -j REJECT

[root@proxy ~]# nmcli connection modify eth1 ipv4.method manual ipv4.addresses 192.168.2.5/24 connection.autoconnect yes;nmcli connection up eth1;

[root@proxy ~]# ifconfig |grep 'inet '
        inet 192.168.4.5  netmask 255.255.255.0  broadcast 192.168.4.255
        inet 192.168.2.5  netmask 255.255.255.0  broadcast 192.168.2.255
        inet 201.1.2.5  netmask 255.255.255.0  broadcast 201.1.2.255
        inet 127.0.0.1  netmask 255.0.0.0
        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@proxy ~]# nmcli connection show
名称    UUID                                  类型            设备   
eth0    4f5f8b5d-4b51-4e1c-98c7-40f0eb90f241  802-3-ethernet  eth0   
eth1    46b69388-7aba-45cd-9c0f-0da69c69a190  802-3-ethernet  eth1   
eth3    d1ac5d19-3a5e-4ace-8054-fd7580d70b24  802-3-ethernet  eth3   
virbr0  57b76342-a0be-45d0-85a8-07dcd7c79d9e  bridge          virbr0 












[root@client ~]# nmcli connection modify eth0 ipv4.method manual ipv4.addresses 192.168.4.100/24 ipv4.gateway 192.168.4.5  connection.autoconnect yes ;nmcli connection up eth0;
[root@client ~]# ping 192.168.2.100
--- 192.168.2.100 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms

[root@client ~]# ss -anptul |grep :80
[root@client ~]# curl http://192.168.2.100  #没有防火墙的情况下client访问web服务
<h1><font color=gray><marquee>192.168.2.100-web1</marquee></font></h1>
[root@client ~]# route -n |awk 'NR>1&&NR<6{print $2}'
Gateway
192.168.2.254
201.1.2.254
192.168.4.5
[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -I FORWARD -p tcp --dport 80 -j REJECT 
[root@client ~]#  nmcli connection modify eth1 ipv4.method manual ipv4.addresses 192.168.2.1/24 ipv4.gateway 192.168.2.5  connection.autoconnect yes ;nmcli connection up eth1;
[root@client ~]# route -n |awk 'NR>1&&NR<6{print $2}'
Gateway
192.168.4.5
201.1.2.254
192.168.2.5
[root@proxy ~]# iptables -I FORWARD -s 192.168.4.100 -p tcp --dport 80 -j REJECT 

[root@client ~]# iptables -p icmp -?
iptables v1.4.21: unknown option "-?"
Try `iptables -h' or 'iptables --help' for more information.
[root@client ~]# iptables -p icmp -h
iptables v1.4.21
[root@client ~]# nmcli connection show
名称    UUID                                  类型            设备   
eth0    4f5f8b5d-4b51-4e1c-98c7-40f0eb90f241  802-3-ethernet  eth0   
virbr0  f9b110a1-3444-4961-8f01-88cb454bee5e  bridge          virbr0 
eth1    ce14adc6-9ca7-4955-9e80-38578f491d36  802-3-ethernet  --     
eth3    99dfbc2d-e1da-4b3f-82ca-7984adef839a  802-3-ethernet  --     
[root@client ~]# ifconfig eth0 |grep 'inet '
        inet 192.168.4.100  netmask 255.255.255.0  broadcast 192.168.4.255







[root@web1 ~]# nmcli connection modify eth1 ipv4.method manual ipv4.addresses 192.168.2.100/24 ipv4.gateway 192.168.2.5  connection.autoconnect yes ;nmcli connection up eth1;

[root@web1 ~]# ping -c2 -i0.2 -w1 192.168.4.100
--- 192.168.4.100 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 200ms

[root@web1 ~]# ss -anptul |grep :80 |column -t
tcp  LISTEN  0  100  :::8080                :::*  users:(("java",pid=1181,fd=46))
tcp  LISTEN  0  1    ::ffff:127.0.0.1:8005  :::*  users:(("java",pid=1181,fd=74))
tcp  LISTEN  0  100  :::8009                :::*  users:(("java",pid=1181,fd=55))
[root@web1 ~]# cat /var/www/html/index.html
<h1><font color=gray><marquee>192.168.2.100-web1</marquee></font></h1>
[root@web1 ~]# systemctl restart httpd
[root@web1 ~]# firefox http://192.168.2.100
[root@web1 ~]# elinks -dump http://192.168.2.100
                               192.168.2.100-web1
[root@web1 ~]# route -n |awk 'NR>1&&NR<6{print $2}'
Gateway
192.168.2.5
0.0.0.0
0.0.0.0

[root@web1 ~]# sysctl -a | grep forward
sysctl: reading key "net.ipv6.conf.all.stable_secret"
sysctl: reading key "net.ipv6.conf.default.stable_secret"
sysctl: reading key "net.ipv6.conf.eth0.stable_secret"
net.ipv4.conf.all.forwarding = 1
net.ipv4.conf.all.mc_forwarding = 0
net.ipv4.conf.default.forwarding = 1
[root@web1 ~]# ifconfig eth1 |grep 'inet '
        inet 192.168.2.100  netmask 255.255.255.0  broadcast 192.168.2.255
[root@web1 ~]# nmcli connection show
名称    UUID                                  类型            设备   
eth1    b0e1de23-9870-4e44-8ce3-efcbdd6f9e68  802-3-ethernet  eth1   
virbr0  391e566c-ebd1-4c40-a185-27f946a6a83f  bridge          virbr0 
eth0    4f5f8b5d-4b51-4e1c-98c7-40f0eb90f241  802-3-ethernet  --   
=====================================================



[root@proxy ~]# nmcli connection show
名称    UUID                                  类型            设备   
eth0    4f5f8b5d-4b51-4e1c-98c7-40f0eb90f241  802-3-ethernet  eth0   
eth1    46b69388-7aba-45cd-9c0f-0da69c69a190  802-3-ethernet  eth1   
eth3    d1ac5d19-3a5e-4ace-8054-fd7580d70b24  802-3-ethernet  eth3   
virbr0  57b76342-a0be-45d0-85a8-07dcd7c79d9e  bridge          virbr0 
[root@proxy ~]# ifconfig |grep 'inet '
        inet 192.168.4.5  netmask 255.255.255.0  broadcast 192.168.4.255
        inet 192.168.2.5  netmask 255.255.255.0  broadcast 192.168.2.255
        inet 201.1.2.5  netmask 255.255.255.0  broadcast 201.1.2.255
        inet 127.0.0.1  netmask 255.0.0.0
        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@proxy ~]# 
[root@proxy ~]# route -n |awk 'NR>1&&NR<7{print $2}'
Gateway
192.168.4.254
201.1.2.254
192.168.2.254
0.0.0.0
[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -t nat -nL
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         
RETURN     all  --  192.168.122.0/24     224.0.0.0/24        
RETURN     all  --  192.168.122.0/24     255.255.255.255     
MASQUERADE  tcp  --  192.168.122.0/24    !192.168.122.0/24     masq ports: 1024-65535
MASQUERADE  udp  --  192.168.122.0/24    !192.168.122.0/24     masq ports: 1024-65535
MASQUERADE  all  --  192.168.122.0/24    !192.168.122.0/24    
[root@proxy ~]# iptables -t nat -I POSTROUTING -s 192.168.4.0/24 -p tcp --dport  80 -j SNAT  --to-source 192.168.2.5
[root@proxy ~]# 
[root@proxy ~]# iptables -t nat -I POSTROUTING -s 192.168.4.0/24 -p tcp --dport  80 -j SNAT  --to-source 192.168.2.5
[root@proxy ~]# iptables -t nat -I POSTROUTING -s 192.168.4.0/24 -p udp  --dport  80 -j SNAT  --to-source 192.168.2.5
















=================
clinet ~ #ipv4.gateway 192.168.4.254
        ## iptables -t nat -I POSTROUTING -s 192.168.4.0/24 -p tcp --dport  80 -j SNAT  --to-source 192.168.2.5
      # iptables -t nat -I POSTROUTING -s 192.168.4.0/24 -p udp  --dport  80 -j SNAT  --to-source 192.168.2.5
      #ipv4.dns 8.8.8.8

  # iptables -t nat -I POSTROUTING -s 192.168.4.0/24 -p icmp -j SNAT  --to-source 192.168.2.5

=======================================
[root@web2 ~]# > /usr/local/nginx/logs/access.log
[root@web1 ~]# > /var/log/httpd/access_log
[root@proxy ~]# tail -1 /etc/sysctl.conf
net.ipv4.ip_forward=1       //永久开启路由转发
[root@proxy ~]# vim /proc/sys/net/ipv4/ip_forward
[root@proxy ~]# cat /proc/sys/net/ipv4/ip_forward
1                         //临时开启路由转发
[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination  

[root@client ~]# nmcli connection show |grep eth0
eth0    4f5f8b5d-4b51-4e1c-98c7-40f0eb90f241  802-3-ethernet  eth0   
[root@client ~]# ifconfig eth0 |awk '/inet /{print $2}'
192.168.4.100
[root@client ~]# route -n | awk '{if(NR==3){print $2}}'
192.168.4.5
[root@proxy ~]# nmcli connection show |egrep 'eth(0|1)'
eth0    4f5f8b5d-4b51-4e1c-98c7-40f0eb90f241  802-3-ethernet  eth0   
eth1    46b69388-7aba-45cd-9c0f-0da69c69a190  802-3-ethernet  eth1 
[root@proxy ~]# ifconfig eth0 |awk '/inet /{print $2}';\
> ifconfig eth1 |awk '/inet /{print $2}';
192.168.4.5
192.168.2.5
[root@proxy ~]# route -n |awk '{if(NR==3||NR==5){print $2}}'
192.168.4.254
192.168.2.254
[root@web1 ~]# nmcli connection show |grep eth1
eth1    b0e1de23-9870-4e44-8ce3-efcbdd6f9e68  802-3-ethernet  eth1   
[root@web1 ~]# ifconfig eth1 |awk '/inet /{print $2}'
192.168.2.100
[root@web1 ~]# route -n | awk '{if(NR==3){print $2}}'
192.168.2.5
[root@web2 ~]# nmcli connection show |grep eth1
eth1    5829c48d-af68-45b4-b5f9-e36c16815879  802-3-ethernet  eth1   
[root@web2 ~]# ifconfig eth1 |awk '/inet /{print $2}'
192.168.2.200
[root@web2 ~]# nmcli connection modify eth1 ipv4.gateway 192.168.2.5 connection.autoconnect yes ;nmcli connection up eth1;
[root@web2 ~]# route -n |awk 'NR==3{print $2}'
192.168.2.5
[root@web2 ~]# > /usr/local/nginx/logs/access.log
     ================设置防火墙规则，实现SNAT地址转换
[root@proxy ~]# iptables -t nat -I POSTROUTING -s 192.168.4.0/24 \
> -p tcp --dport 80 -j SNAT --to-source 192.168.2.5 ;\
> iptables -t nat -I POSTROUTING  -s 192.168.4.0/24 \
> -p udp --dport 80 -j SNAT --to-source 192.168.2.5 ; \
> iptables  -t nat -I POSTROUTING -s 192.168.4.0/24  \
> -p icmp  -j SNAT --to-source 192.168.2.5 ;
-------------------------------------------------
# iptables -t nat -I POSTROUTING -s 192.168.4.0/24 -j SNAT --to-source 192.168.2.5
--------------------------------------------------
[root@client ~]# elinks -dump http://192.168.2.100
                               192.168.2.100-web1
[root@web1 ~]# elinks -dump http://192.168.2.100
                               192.168.2.100-web1

[root@web1 ~]# cat /var/log/httpd/access_log   登陆web主机查看日志
192.168.2.5 - - [03/Sep/2018:19:36:16 +0800] "GET / HTTP/1.1" 200 71 "-" 
"Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"
                       ####客户端是先伪装为了192.168.2.5之后再访问的web服务器
192.168.2.5 - - [03/Sep/2018:19:36:17 +0800] "GET /favicon.ico HTTP/1.1" 404 209 "-" 
"Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"

192.168.2.5 - - [03/Sep/2018:19:36:17 +0800] "GET /favicon.ico HTTP/1.1" 404 209 "-" 
"Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"

192.168.2.5 - - [03/Sep/2018:19:36:36 +0800] "GET / HTTP/1.1" 200 71 "-" 
"ELinks/0.12pre6 (textmode; Linux; -)"

192.168.2.100 - - [03/Sep/2018:19:38:09 +0800] "GET / HTTP/1.1" 200 71 "-" 
"ELinks/0.12pre6 (textmode; Linux; -)"
##所有iptables规则都是临时规则，如果需要永久保留规则需要执行如下命令:
[root@proxy demo]# iptables -t nat -A POSTROUTING -s 192.168.4.0/24 -j \
> SNAT  --to-source 192.168.4.254;

[root@proxy ~]# service  iptables save    
[root@proxy demo]# cat /etc/sysconfig/iptables
  2 *nat
  3 :PREROUTING ACCEPT [0:0]
  4 :INPUT ACCEPT [0:0]
  5 :OUTPUT ACCEPT [0:0]
  6 :POSTROUTING ACCEPT [0:0]
  7 -A POSTROUTING -s 192.168.4.0/24 -j SNAT --to-source 192.168.4.254
  8 COMMIT
[root@proxy demo]# systemctl restart iptables.service
----------------------------------------------------------------------------
[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -nL
Chain INPUT (policy ACCEPT)
.........
[root@proxy ~]# iptables -t nat -A POSTROUTING -s 192.168.4.0/24 \
> -j SNAT --to-source 192.168.2.5;

[root@client ~]# firefox http://192.168.2.200 输入验证tom|tom2/123
http://192.168.2.200/home.php
Welcome web2 : tom2
Logged In : true
Session ID: ucqc7skds1e5uhvt69vmf25bs2 
*************************

[root@web2 ~]# cat /usr/local/nginx/logs/access.log |column -t
192.168.2.5  -  -  [03/Sep/2018:21:04:25  +0800]  "GET   /             HTTP/1.1"  200  588   "-"                      "Mozilla/5.0  (X11;  Linux  x86_64;  rv:52.0)  Gecko/20100101  Firefox/52.0"
192.168.2.5  -  -  [03/Sep/2018:21:04:25  +0800]  "GET   /style.css    HTTP/1.1"  200  1172  "http://192.168.2.200/"  "Mozilla/5.0  (X11;  Linux  x86_64;  rv:52.0)  Gecko/20100101  Firefox/52.0"
192.168.2.5  -  -  [03/Sep/2018:21:04:25  +0800]  "GET   /favicon.ico  HTTP/1.1"  404  169   "-"                      "Mozilla/5.0  (X11;  Linux  x86_64;  rv:52.0)  Gecko/20100101  Firefox/52.0"
192.168.2.5  -  -  [03/Sep/2018:21:04:44  +0800]  "POST  /login.php    HTTP/1.1"  302  5     "http://192.168.2.200/"  "Mozilla/5.0  (X11;  Linux  x86_64;  rv:52.0)  Gecko/20100101  Firefox/52.0"
192.168.2.5  -  -  [03/Sep/2018:21:04:44  +0800]  "GET   /home.php     HTTP/1.1"  200  185   "http://192.168.2.200/"  "Mozilla/5.0  (X11;  Linux  x86_64;  rv:52.0)  Gecko/20100101  Firefox/52.0"

--------------------------------------------------------------------------------------------------
[root@proxy ~]# route -n |awk '{if(NR==3){print $2}}'
192.168.4.254
[root@proxy ~]# echo "nameserver 8.8.8.8" > /etc/resolv.conf
[root@proxy ~]# iptables -F
[root@proxy ~]# iptables -t nat -A POSTROUTING -s 192.168.4.0/24 -j SNAT --to-source 192.168.4.254;






[root@proxy ~]# ls -Z /var/ftp/
-rw-r--r--. root root unconfined_u:object_r:public_content_t:s0 log1.tar
-rw-r--r--. 1 root root unconfined_u:object_r:admin_home_t:s0   log2.tar
[root@proxy ~]# chcon -t public_content_t /var/ftp/d2.tar.gz
[root@proxy ~]# ls -Z /var/ftp/log2.tar
-rw-r--r--. root root unconfined_u:object_r:public_content_t:s0 log2.tar
[root@proxy ~]# wget ftp://192.168.4.5/log2.tar            //再次下载，成功
注意：上例中的chcon操作可替换为（效果相同）：
# restorecon /var/ftp/log2.tar.gz
或者
# chcon --reference=/var/ftp/log1.tar.gz /var/ftp/log2.tar.gz
=====================================
for i in mangle security raw nat filter;do
     iptables -t ${i} -F
     iptables -t ${i} -X
     rmmod iptable_${i}
done
sysctl -w net.ipv4.ip_forward=1
ETH=$(ip route show|awk '{if($1=="default" && $2=="via")print $5}')
iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -o ${ETH} -j MASQUERADE
======================================================


==========================  TCP/IP三次握手四次断开  =================
=================== TCP的三次握手(建立连接）和四次挥手(关闭连接）==========

                                       Client                                   Server
                             没有任何连接状态 CLOSED |                                   | CLOSED 没有任何连接状态
                                            |                                   | LISTEN 侦听来自远方TCP端口的连接请求
发送SYN,请求建立连接(seq=100,ctl=SYN) send SYN |--------------- SYN -------------->| receive SYN
       在发送连接请求后等待匹配的连接请求 SYN_SENT |                                   | SYN_RECV 服务端收到建立连接的SYN没有收到ACK包的时候状态
                 receive SYN+ACK |<-- SYN+ACK ---| SYN+ACK send 发送SYN，ACK(seq=300,ack=101,ctl=SYN,ACK)
                                        |            | SYN-RECEIVED 在收到和发送一个连接请求后等待对连接请求的确认状态
            发送ACK(seq=101  ack=301  ctl=ACK) |-------------- ACK --------------->| receive ACK
 代表一个打开的连接，数据可以传送给用户 ESTABLISHED|                                  | ESTABLISHED 代表一个打开的连接，数据可以传送给用户
                                            | <=== TCP session established ===> |
                                                         |                                              |
      发送FIN 请求断开连接(FIN=1,ACK=1) send FIN |-------------- FIN --------------->| receive FIN
等待远程TCP的连接中断请求，或先前的连接中断请求的确认 FIN_WAIT-1 |                       | CLOSE_WAIT 等待从本地用户发来的连接中断请求
                                 receive ACK |<------------- ACK ----------------| send ACK 发送ACK(ACK=1)
               从远程TCP等待连接中断请求 FIN_WAIT-2 |                                   |
                     receive FIN |<------------- FIN ----------------| send FIN 发送FIN 请求断开连接(FIN=1,ACK=1)
等待足够的时间以确保远程TCP接收到连接中断请求的确认 TIME_WAIT |                          | LAST_ACK 等待原来发向远程TCP的连接中断请求的确认
                            发送ACK(ACK=1) send ACK |-------------- ACK --------------->| receive ACK
                                     TimeOut |                                   | CLOSED 没有任何连接状态
                               没有任何连接状态 CLOSED |                                   |

位码即tcp标志位,有6种标示:

SYN(synchronous建立联机)

ACK(acknowledgement 确认)

PSH(push传送)

FIN(finish结束)

RST(reset重置)

URG(urgent紧急)

Sequence number(顺序号码)[32位序列号 和 32 位确认号 举例,seq=100,]

Acknowledge number(确认号码)
established   已建立的; 已设立的; 已制定的; 确定的
receive 收到; 接待; 接到; 接纳;
          接收; 受理; 欢迎; 承受;
TCP(Transmission Control Protocol)　传输控制协议





